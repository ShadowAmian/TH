(in-package :th)

(defgeneric tensor-coerce (tensor value)
  (:documentation "returns coerced value for given tensor"))

(defgeneric tensor-acoerce (tensor value)
  (:documentation "returns coerced value for given tensor for accumulated type"))

(defgeneric tensor-type (tensor)
  (:documentation "returns type of elements of the tensor"))

(defgeneric tensor-at (tensor location &rest others)
  (:documentation "accessing tensor elements"))

(defgeneric (setf tensor-at) (value tensor location &rest others)
  (:documentation "setf for tensor-at method"))

(defgeneric tensor-storage (tensor)
  (:documentation "returns storage of the tensor"))
(defgeneric tensor-storage-offset (tensor)
  (:documentation "returns the 1st index used in tensor's storage"))
(defgeneric tensor-n-dimension (tensor)
  (:documentation "returns the number of dimensions of given tensor"))
(defgeneric tensor-size (tensor dimension)
  (:documentation "returns dimensions of the tensor"))
(defgeneric tensor-stride (tensor dimension)
  (:documentation "returns the jumps to go from one to next element in tensor"))
(defgeneric tensor-data (tensor)
  (:documentation "returns pointer for tensor data"))

(defgeneric tensor-with-tensor (tensor)
  (:documentation "returns a new tensor which shared the same storage of the given tensor"))
(defgeneric tensor-clone (tensor)
  (:documentation "returns a new cloned tensor"))
(defgeneric tensor-contiguous (tensor)
  (:documentation "returns a new contiguously allocated layout tensor if it's not"))
(defgeneric tensor-with-storage (storage &optional storage-offset size stride)
  (:documentation "returns a new tensor with given storage"))

(defgeneric tensor-new-select (tensor dimension slice-index)
  (:documentation "returns a new tensor slice at the slice-index in the given dimension"))
(defgeneric tensor-new-narrow (tensor dimension first-index size)
  (:documentation "returns a new tensor that is a narrowed version of src tensor"))
(defgeneric tensor-new-transpose (tensor)
  (:documentation "returns a new tensor that is the transposed view of the tensor"))
(defgeneric tensor-new-unfold (tensor dimension size step)
  (:documentation "returns a new tensor which contains all slice of the given size by step"))
(defgeneric tensor-new-view (tensor size)
  (:documentation "returns a new tensor which different dimensions of the same storage"))
(defgeneric tensor-new-expand (tensor size)
  (:documentation "returns a new tensor where singleton dimension could be expanded"))

(defgeneric tensor-expand (tensor src size)
  (:documentation "returns a new view of the src with singleton dimension expanded"))

(defgeneric tensor-resize-as (tensor src))
(defgeneric tensor-resize (tensor size &optional stride))

(defgeneric tensor-set (tensor src))

(defgeneric tensor-narrow (tensor src dimension first-idx size)
  (:documentation "returns a tensor that is a narrowed version of src tensor"))
(defgeneric tensor-select (tensor src dimension slice-index)
  (:documentation "returns a tensor which is a slice at the given index in the dim"))
(defgeneric tensor-transpose (tensor src dimension0 dimension1)
  (:documentation "returns a transposed tensor between dimensions"))
(defgeneric tensor-unfold (tensor src dimension size step))
(defgeneric tensor-squeeze (tensor src &optional dimension)
  (:documentation "removes all the dimensions with size 1"))
(defgeneric tensor-unsqueeze (tensor src dimension))

(defgeneric tensor-contiguous-p (tensor)
  (:documentation "check whether tensor is contiguous in memory in C order"))
(defgeneric tensor-same-size-p (tensor src))
(defgeneric tensor-set-to-p (tensor src))
(defgeneric tensor-size-p (tensor dims))
(defgeneric tensor-n-element (tensor))

(defgeneric tensor-copy (tensor src)
  (:documentation "returns the already same sized element-wise copied tensor from the source"))

(defgeneric tensor-random (tensor &optional generator))
(defgeneric tensor-clamped-random (tensor min max &optional generator))
(defgeneric tensor-capped-random (tensor max &optional generator))
(defgeneric tensor-geometric (tensor p &optional generator)
  (:documentation "returns geometric(p) element-wise"))
(defgeneric tensor-bernoulli (tensor p &optional generator)
  (:documentation "returns bernoulli(p) element-wise"))

(defgeneric tensor-uniform (tensor a b &optional generator)
  (:documentation "returns tensor filled with number drawn from uniform distribution"))
(defgeneric tensor-normal (tensor mean stdev &optional generator)
  (:documentation "returns tensor filled with numbers drawn from normal distribution"))
(defgeneric tensor-exponential (tensor lam &optional generator)
  (:documentation "returns tensor filled with numbers drawn from exponential distribution"))
(defgeneric tensor-cauchy (tensor median sigma &optional generator)
  (:documentation "returns tensor filled with numbers drawn from cauchy distribution"))
(defgeneric tensor-log-normal (tensor mean stdev &optional generator)
  (:documentation "returns tensor filled with numbers drawn from log normal distribution"))
(defgeneric tensor-multinomial (tensor pdist nsample replacement &optional generator)
  (:documentation "returns tensor filled with numbers drawn from multinomial distribution"))
(defgeneric tensor-multinomial-alias-setup (pdist J q))
(defgeneric tensor-multinomial-alias-draw (tensor J q &optional generator))

(defgeneric tensor-fill (tensor value)
  (:documentation "fills element of the tensor with value"))
(defgeneric tensor-zero (tensor)
  (:documentation "fills element of the tensor with zero"))

(defgeneric tensor-masked-fill (tensor mask value)
  (:documentation "fills element of tensor at the location of one in byte tensor mask"))
(defgeneric tensor-masked-copy (tensor mask src))
(defgeneric tensor-masked-select (tensor mask src)
  (:documentation "returns a vector from elements of src masked by byte mask"))

(defgeneric tensor-non-zero (tensor &optional indices)
  (:documentation "returns indices of non zero elements in tnsor"))

(defgeneric tensor-index-select (tensor src dim index))
(defgeneric tensor-index-copy (tensor src dim index))
(defgeneric tensor-index-add (tensor src dim index))
(defgeneric tensor-index-fill (tensor value dim index))

(defgeneric tensor-gather (tensor src dim index))
(defgeneric tensor-scatter (tensor src dim index))
(defgeneric tensor-scatter-add (tensor src dim index))
(defgeneric tensor-scatter-fill (tensor value dim index))

(defgeneric tensor-dot (tensor1 tensor2)
  (:documentation "returns dot product of two tensors"))

(defgeneric tensor-min-all (tensor))
(defgeneric tensor-max-all (tensor))
(defgeneric tensor-median-all (tensor))
(defgeneric tensor-sum-all (tensor))
(defgeneric tensor-prd-all (tensor))

(defgeneric tensor-neg (tensor src))
(defgeneric tensor-cinv (tensor src))

(defgeneric tensor-add (tensor src value)
  (:documentation "returns element-wise addition of scalar value"))
(defgeneric tensor-sub (tensor src value))
(defgeneric tensor-mul (tensor src value))
(defgeneric tensor-div (tensor src value)
  (:documentation "returns element-wise division of scalar value"))
(defgeneric tensor-mod (tensor src value))
(defgeneric tensor-fmod (tensor src value)
  (:documentation "returns element-wise remainders"))
(defgeneric tensor-clamp (tensor src min max)
  (:documentation "returns tensor with its elements clamped between min and max"))
(defgeneric tensor-lshift (tensor src value))
(defgeneric tensor-rshift (tensor src value))
(defgeneric tensor-bitand (tensor src value))
(defgeneric tensor-bitor (tensor src value))
(defgeneric tensor-bitxor (tensor src value))

(defgeneric tensor-cadd (tensor src1 value src2))
(defgeneric tensor-csub (tensor src1 value src2))
(defgeneric tensor-cmul (tensor src1 src2))
(defgeneric tensor-cpow (tensor src1 src2))
(defgeneric tensor-cdiv (tensor src1 src2))
(defgeneric tensor-clshift (tensor src1 src2))
(defgeneric tensor-crshift (tensor src1 src2))
(defgeneric tensor-cmod (tensor src1 src2))
(defgeneric tensor-cfmod (tensor src1 src2))
(defgeneric tensor-cbitand (tensor src1 src2))
(defgeneric tensor-cbitor (tensor src1 src2))
(defgeneric tensor-cbitxor (tensor src1 src2))

(defgeneric tensor-add-cmul (tensor src1 value src2 src3)
  (:documentation "returns src1 + value * src2 * src3, element-wise"))
(defgeneric tensor-add-cdiv (tensor src1 value src2 src3)
  (:documentation "returns src1 + value * (src2 / src3), element-wise"))
(defgeneric tensor-add-mv (tensor beta y alpha A x)
  (:documentation "returns beta * y + alpha * A @ x"))
(defgeneric tensor-add-mm (tensor beta C alpha A B)
  (:documentation "returns beta * C + alpha * A @ B"))
(defgeneric tensor-add-r (tensor beta A alpha x y)
  (:documentation "returns beta * A + alpha * (x cross y)"))
(defgeneric tensor-add-bmm (tensor beta C alpha batchA batchB)
  (:documentation "returns beta * C + alpha * [sum of batchA @ batch B]"))
(defgeneric tensor-badd-bmm (tensor beta batchC alpha batchA batchB)
  (:documentation "returns beta * batchC(i) + alpha * (batchA(i) @ batchB(i))"))

(defgeneric tensor-match (tensor m1 m2 gain))

(defgeneric tensor-max (vals indices tensor dimension keep-dim)
  (:documentation "returns max values and indices with given dimension axis"))
(defgeneric tensor-min (vals indices tensor dimension keep-dim)
  (:documentation "returns min values and indices with given dimension axis"))
(defgeneric tensor-kth-value (vals indices tensor k dimension keep-dim)
  (:documentation "returns kth smallest element of the given tensor along given dimension"))
(defgeneric tensor-mode (vals indices tensor dimension keep-dim)
  (:documentation "returns the mode value of each row specified by dimension (-1 as default)"))
(defgeneric tensor-median (vals indices tensor dimension keep-dim))
(defgeneric tensor-sum (tensor src dimension keep-dim))
(defgeneric tensor-prd (tensor src dimension keep-dim))
(defgeneric tensor-cum-sum (tensor src dimension)
  (:documentation "returns cumulative sum value along dimension axis"))
(defgeneric tensor-cum-prd (tensor src dimension)
  (:documentation "returns cumulative product value along dimension axis"))
(defgeneric tensor-sign (tensor src))
(defgeneric tensor-trace (tensor))
(defgeneric tensor-cross (tensor A B dimension))

(defgeneric tensor-cmax (tensor src1 src2))
(defgeneric tensor-cmin (tensor src1 src2))

(defgeneric tensor-zeros (tensor size))
(defgeneric tensor-ones (tensor size))
(defgeneric tensor-diag (tensor src k))
(defgeneric tensor-eye (tensor nrow ncol))
(defgeneric tensor-arange (tensor xmin xmax step))
(defgeneric tensor-range (tensor xmin xmax step))
(defgeneric tensor-rand-perm (tensor n &optional generator)
  (:documentation "returns random permutation of integers from 0 to n - 1"))

(defgeneric tensor-reshape (tensor src size)
  (:documentation "reshapes size of the given tensor src"))
(defgeneric tensor-sort (tensor indices src dimension descending))
(defgeneric tensor-top-k (tensor indices src k dim dir sorted)
  (:documentation "returns k smallest/largest(dir) values sorted or not"))
(defgeneric tensor-tri-l (tensor src k))
(defgeneric tensor-tri-u (tensor src k))
(defgeneric tensor-cat (tensor dimension &rest srcs))
(defgeneric tensor-equal (tensor-a tensor-b)
  (:documentation "check equality of element in tensors"))
(defgeneric tensor-compare (operation tensor src1 src2)) ;; :lt :le :gt :ge :ne :eq

(defgeneric tensor-sigmoid (tensor src)
  (:documentation "returns element-wise sigmoid values"))
(defgeneric tensor-log (tensor src)
  (:documentation "returns element-wise log values"))
(defgeneric tensor-lgamma (tensor src))
(defgeneric tensor-log1p (tensor src))
(defgeneric tensor-exp (tensor src)
  (:documentation "returns element-wise exponential values"))
(defgeneric tensor-cos (tensor src)
  (:documentation "returns element-wise cos values"))
(defgeneric tensor-acos (tensor src)
  (:documentation "returns element-wise acos values"))
(defgeneric tensor-cosh (tensor src)
  (:documentation "returns element-wise cosh values"))
(defgeneric tensor-sin (tensor src)
  (:documentation "returns element-wise sin values"))
(defgeneric tensor-asin (tensor src)
  (:documentation "returns element-wise asin values"))
(defgeneric tensor-sinh (tensor src)
  (:documentation "returns element-wise sinh values"))
(defgeneric tensor-tan (tensor src)
  (:documentation "returns element-wise tan values"))
(defgeneric tensor-atan (tensor src)
  (:documentation "returns element-wise atan values"))
(defgeneric tensor-atan2 (tensor srcx srcy)
  (:documentation "returns element-wise atan(x/y)"))
(defgeneric tensor-tanh (tensor src)
  (:documentation "returns element-wise tanh values"))
(defgeneric tensor-pow (tensor src exponent)
  (:documentation "returns element-wise pow values"))
(defgeneric tensor-sqrt (tensor src)
  (:documentation "returns element-wise sqrt values"))
(defgeneric tensor-rsqrt (tensor src))
(defgeneric tensor-ceil (tensor src)
  (:documentation "returns ceil of the elements"))
(defgeneric tensor-floor (tensor src)
  (:documentation "returns element-wise floor values"))
(defgeneric tensor-round (tensor src)
  (:documentation "returns element-wise rounded values"))
(defgeneric tensor-abs (tensor src)
  (:documentation "returns element-wise abs values"))
(defgeneric tensor-trunc (tensor src))
(defgeneric tensor-frac (tensor src)
  (:documentation "returns element-wise fractional values"))
(defgeneric tensor-lerp (tensor tensor-a tensor-b weight)
  (:documentation "performs linear interpolation of tensor a and b; a + weight * (b - a)"))

(defgeneric tensor-mean (tensor src dimension keep-dim))
(defgeneric tensor-sd (tensor src dimension keep-dim &optional biased))
(defgeneric tensor-var (tensor src dimension keep-dim &optional biased))
(defgeneric tensor-norm (tensor src value dimension keep-dim))
(defgeneric tensor-renorm (tensor src value dimension maxnorm)
  (:documentation "returns a tensor whose subtensors along dimension is normalized (lower maxnorm)"))
(defgeneric tensor-dist (tensor-a tensor-b value))
(defgeneric tensor-histc (hist tensor nbins min-value max-value))
(defgeneric tensor-bhistc (hist tensor nbins min-value max-value))

(defgeneric tensor-mean-all (tensor))
(defgeneric tensor-var-all (tensor &optional biased))
(defgeneric tensor-sd-all (tensor &optional biased))
(defgeneric tensor-norm-all (tensor value))

(defgeneric tensor-linspace (tensor a b n))
(defgeneric tensor-logspace (tensor a b n))
(defgeneric tensor-rand (tensor size &optional generator))
(defgeneric tensor-randn (tensor size &optional generator))

(defgeneric tensor-conv-2d-rev-ger (result beta alpha tensor k srow scol))
(defgeneric tensor-conv-2d-rev-germ (result beta alpha tensor k srow scol))
(defgeneric tensor-conv-2d-ger (result beta alpha tensor k srow scol vf xc))
(defgeneric tensor-conv-2d-mv (result beta alpha tensor k srow scol vf xc))
(defgeneric tensor-conv-2d-mm (result beta alpha tensor k srow scol vf xc))
(defgeneric tensor-conv-2d-mul (result beta alpha tensor k srow scol vf xc))
(defgeneric tensor-conv-2d-cmul (result beta alpha tensor k srow scol vf xc))

(defgeneric tensor-conv-3d-rev-ger (result beta alpha tensor k sdepth srow scol))
(defgeneric tensor-conv-3d-ger (result beta alpha tensor k sdepth srow scol vf xc))
(defgeneric tensor-conv-3d-mv (result beta alpha tensor k sdepth srow scol vf xc))
(defgeneric tensor-conv-3d-mul (result beta alpha tensor k sdepth srow scol vf xc))
(defgeneric tensor-conv-3d-cmul (result beta alpha tensor k sdepth srow scol vf xc))

(defun make-tensor-rand (tensor sizes)
  (let ((sz (if (typep ($last sizes) 'generator)
                (butlast sizes)
                sizes))
        (g (if (typep ($last sizes) 'generator)
               ($last sizes)
               *generator*)))
    (tensor-rand tensor sz g)))

(defun tensor.float-rand (&rest sizes) (make-tensor-rand (float-tensor) sizes))
(defun tensor.double-rand (&rest sizes) (make-tensor-rand (double-tensor) sizes))

(defun make-tensor-randn (tensor sizes)
  (let ((sz (if (typep ($last sizes) 'generator)
                (butlast sizes)
                sizes))
        (g (if (typep ($last sizes) 'generator)
               ($last sizes)
               *generator*)))
    (tensor-randn tensor sz g)))

(defun tensor.float-randn (&rest sizes) (make-tensor-randn (float-tensor) sizes))
(defun tensor.double-randn (&rest sizes) (make-tensor-randn (double-tensor) sizes))

(defun byte-zeros (&rest sizes) (-> (apply #'tensor.byte sizes) (tensor-zero)))
(defun char-zeros (&rest sizes) (-> (apply #'tensor.char sizes) (tensor-zero)))
(defun short-zeros (&rest sizes) (-> (apply #'tensor.short sizes) (tensor-zero)))
(defun int-zeros (&rest sizes) (-> (apply #'tensor.int sizes) (tensor-zero)))
(defun long-zeros (&rest sizes) (-> (apply #'tensor.long sizes) (tensor-zero)))
(defun float-zeros (&rest sizes) (-> (apply #'tensor.float sizes) (tensor-zero)))
(defun double-zeros (&rest sizes) (-> (apply #'tensor.double sizes) (tensor-zero)))

(defgeneric tensor-logical-all (tensor))
(defgeneric tensor-logical-any (tensor))

(defgeneric tensor-gesv (rb ra b a))
(defgeneric tensor-trtrs (rb ra b a uplo trans diag))
(defgeneric tensor-gels (rb ra b a))
(defgeneric tensor-syev (re rv a jobz uplo)
  (:documentation "computes eigenvalues and eigenvectors"))
(defgeneric tensor-geev (re rv a jobvr))
(defgeneric tensor-gesvd (ru rs rv a jobu))
(defgeneric tensor-gesvd2 (ru rs rv ra a jobu))
(defgeneric tensor-getri (ra a))
(defgeneric tensor-potrf (ra a uplo)
  (:documentation "computes the cholesky decomposition of symmetric positive-definite matrix a"))
(defgeneric tensor-potrs (rb b a uplo)
  (:documentation "solves a linear system of equations with its cholesky factor u"))
(defgeneric tensor-potri (ra a uplo)
  (:documentation "inverses a positive semidefinite matrix given its cholesky factor u"))
(defgeneric tensor-qr (rq rr a))
(defgeneric tensor-geqrf (ra rtau a))
(defgeneric tensor-orgqr (ra a tau))
(defgeneric tensor-ormqr (ra a tau c side trans))
(defgeneric tensor-pstrf (ra rpiv a uplo tol)
  (:documentation "computes the pivoted cholesky decomposition"))
(defgeneric tensor-btrifact (ra rpivots rinfo a pivot)
  (:documentation "performs batch LU factorization"))
(defgeneric tensor-btrisolve (rb b atf pivots)
  (:documentation "performs batch LU solve; uses LU factorization results"))

(defmethod tensor-with-tensor ((tensor tensor.byte))
  (let ((tr (make-instance 'tensor.byte))
        (rh (th-byte-tensor-new-with-tensor ($handle tensor))))
    (setf ($handle tr) rh)
    (sb-ext:finalize tr (lambda () (th-byte-tensor-free rh)))
    tr))
(defmethod tensor-with-tensor ((tensor tensor.char))
  (let ((tr (make-instance 'tensor.char))
        (rh (th-char-tensor-new-with-tensor ($handle tensor))))
    (setf ($handle tr) rh)
    (sb-ext:finalize tr (lambda () (th-char-tensor-free rh)))
    tr))
(defmethod tensor-with-tensor ((tensor tensor.short))
  (let ((tr (make-instance 'tensor.short))
        (rh (th-short-tensor-new-with-tensor ($handle tensor))))
    (setf ($handle tr) rh)
    (sb-ext:finalize tr (lambda () (th-short-tensor-free rh)))
    tr))
(defmethod tensor-with-tensor ((tensor tensor.int))
  (let ((tr (make-instance 'tensor.int))
        (rh (th-int-tensor-new-with-tensor ($handle tensor))))
    (setf ($handle tr) rh)
    (sb-ext:finalize tr (lambda () (th-int-tensor-free rh)))
    tr))
(defmethod tensor-with-tensor ((tensor tensor.long))
  (let ((tr (make-instance 'tensor.long))
        (rh (th-long-tensor-new-with-tensor ($handle tensor))))
    (setf ($handle tr) rh)
    (sb-ext:finalize tr (lambda () (th-long-tensor-free rh)))
    tr))
(defmethod tensor-with-tensor ((tensor tensor.float))
  (let ((tr (make-instance 'tensor.float))
        (rh (th-float-tensor-new-with-tensor ($handle tensor))))
    (setf ($handle tr) rh)
    (sb-ext:finalize tr (lambda () (th-float-tensor-free rh)))
    tr))
(defmethod tensor-with-tensor ((tensor tensor.double))
  (let ((tr (make-instance 'tensor.double))
        (rh (th-double-tensor-new-with-tensor ($handle tensor))))
    (setf ($handle tr) rh)
    (sb-ext:finalize tr (lambda () (th-double-tensor-free rh)))
    tr))

(defmethod tensor-with-storage ((storage storage.byte) &optional (storage-offset 0) size stride)
  (let* ((tr (make-instance 'tensor.byte))
         (size (if (listp size) (storage.long size) size))
         (stride (if (listp stride) (storage.long stride) stride))
         (rh (th-byte-tensor-new-with-storage ($handle storage)
                                              storage-offset
                                              (if (null size)
                                                  +nil+
                                                  ($handle size))
                                              (if (null stride)
                                                  +nil+
                                                  ($handle stride)))))
    (setf ($handle tr) rh)
    (sb-ext:finalize tr (lambda () (th-byte-tensor-free rh)))
    tr))
(defmethod tensor-with-storage ((storage storage.char) &optional (storage-offset 0) size stride)
  (let* ((tr (make-instance 'tensor.char))
         (size (if (listp size) (storage.long size) size))
         (stride (if (listp stride) (storage.long stride) stride))
         (rh (th-char-tensor-new-with-storage ($handle storage)
                                              storage-offset
                                              (if (null size)
                                                  +nil+
                                                  ($handle size))
                                              (if (null stride)
                                                  +nil+
                                                  ($handle stride)))))
    (setf ($handle tr) rh)
    (sb-ext:finalize tr (lambda () (th-char-tensor-free rh)))
    tr))
(defmethod tensor-with-storage ((storage storage.short) &optional (storage-offset 0) size stride)
  (let* ((tr (make-instance 'tensor.short))
         (size (if (listp size) (storage.long size) size))
         (stride (if (listp stride) (storage.long stride) stride))
         (rh (th-short-tensor-new-with-storage ($handle storage)
                                               storage-offset
                                               (if (null size)
                                                   +nil+
                                                   ($handle size))
                                               (if (null stride)
                                                   +nil+
                                                   ($handle stride)))))
    (setf ($handle tr) rh)
    (sb-ext:finalize tr (lambda () (th-short-tensor-free rh)))
    tr))
(defmethod tensor-with-storage ((storage storage.int) &optional (storage-offset 0) size stride)
  (let* ((tr (make-instance 'tensor.int))
         (size (if (listp size) (storage.long size) size))
         (stride (if (listp stride) (storage.long stride) stride))
         (rh (th-int-tensor-new-with-storage ($handle storage)
                                             storage-offset
                                             (if (null size)
                                                 +nil+
                                                 ($handle size))
                                             (if (null stride)
                                                 +nil+
                                                 ($handle stride)))))
    (setf ($handle tr) rh)
    (sb-ext:finalize tr (lambda () (th-int-tensor-free rh)))
    tr))
(defmethod tensor-with-storage ((storage storage.long) &optional (storage-offset 0) size stride)
  (let* ((tr (make-instance 'tensor.long))
         (size (if (listp size) (storage.long size) size))
         (stride (if (listp stride) (storage.long stride) stride))
         (rh (th-long-tensor-new-with-storage ($handle storage)
                                              storage-offset
                                              (if (null size)
                                                  +nil+
                                                  ($handle size))
                                              (if (null stride)
                                                  +nil+
                                                  ($handle stride)))))
    (setf ($handle tr) rh)
    (sb-ext:finalize tr (lambda () (th-long-tensor-free rh)))
    tr))
(defmethod tensor-with-storage ((storage storage.float) &optional (storage-offset 0) size stride)
  (let* ((tr (make-instance 'tensor.float))
         (size (if (listp size) (storage.long size) size))
         (stride (if (listp stride) (storage.long stride) stride))
         (rh (th-float-tensor-new-with-storage ($handle storage)
                                               storage-offset
                                               (if (null size)
                                                   +nil+
                                                   ($handle size))
                                               (if (null stride)
                                                   +nil+
                                                   ($handle stride)))))
    (setf ($handle tr) rh)
    (sb-ext:finalize tr (lambda () (th-float-tensor-free rh)))
    tr))
(defmethod tensor-with-storage ((storage storage.double) &optional (storage-offset 0) size stride)
  (let* ((tr (make-instance 'tensor.double))
         (size (if (listp size) (storage.long size) size))
         (stride (if (listp stride) (storage.long stride) stride))
         (rh (th-double-tensor-new-with-storage ($handle storage)
                                                storage-offset
                                                (if (null size)
                                                    +nil+
                                                    ($handle size))
                                                (if (null stride)
                                                    +nil+
                                                    ($handle stride)))))
    (setf ($handle tr) rh)
    (sb-ext:finalize tr (lambda () (th-double-tensor-free rh)))
    tr))
(defmethod tensor-with-storage ((storage null) &optional (storage-offset 0) size stride)
  (let* ((tr (make-instance *default-tensor-class*))
         (size (if (listp size) (storage.long size) size))
         (stride (if (listp stride) (storage.long stride) stride))
         (rh (th-int-tensor-new-with-storage +nil+
                                             storage-offset
                                             (if (null size)
                                                 +nil+
                                                 ($handle size))
                                             (if (null stride)
                                                 +nil+
                                                 ($handle stride)))))
    (setf ($handle tr) rh)
    (sb-ext:finalize tr (lambda () (th-int-tensor-free rh)))
    tr))

(defmethod $count ((tensor tensor)) (tensor-n-element tensor))

(defmethod tensor-coerce ((tensor tensor.byte) value) (coerce value 'unsigned-byte))
(defmethod tensor-coerce ((tensor tensor.char) value) (coerce value 'signed-byte))
(defmethod tensor-coerce ((tensor tensor.short) value) (coerce value 'integer))
(defmethod tensor-coerce ((tensor tensor.int) value) (coerce value 'integer))
(defmethod tensor-coerce ((tensor tensor.long) value) (coerce value 'integer))
(defmethod tensor-coerce ((tensor tensor.float) value) (coerce value 'single-float))
(defmethod tensor-coerce ((tensor tensor.double) value) (coerce value 'double-float))

(defmethod tensor-acoerce ((tensor tensor.byte) value) (coerce value 'integer))
(defmethod tensor-acoerce ((tensor tensor.char) value) (coerce value 'integer))
(defmethod tensor-acoerce ((tensor tensor.short) value) (coerce value 'integer))
(defmethod tensor-acoerce ((tensor tensor.int) value) (coerce value 'integer))
(defmethod tensor-acoerce ((tensor tensor.long) value) (coerce value 'integer))
(defmethod tensor-acoerce ((tensor tensor.float) value) (coerce value 'double-float))
(defmethod tensor-acoerce ((tensor tensor.double) value) (coerce value 'double-float))

(defmethod tensor-type ((tensor tensor.byte)) :byte)
(defmethod tensor-type ((tensor tensor.char)) :char)
(defmethod tensor-type ((tensor tensor.short)) :short)
(defmethod tensor-type ((tensor tensor.int)) :int)
(defmethod tensor-type ((tensor tensor.long)) :long)
(defmethod tensor-type ((tensor tensor.float)) :float)
(defmethod tensor-type ((tensor tensor.double)) :double)

(defmethod tensor-at ((tensor tensor.byte) location &rest others-and-default)
  (if (null others-and-default)
      (th-byte-tensor-get-1d ($handle tensor) location)
      (cond ((eq 1 ($count others-and-default))
             (th-byte-tensor-get-2d ($handle tensor) location ($0 others-and-default)))
            ((eq 2 ($count others-and-default))
             (th-byte-tensor-get-3d ($handle tensor) location
                                    ($0 others-and-default)
                                    ($1 others-and-default)))
            ((eq 3 ($count others-and-default))
             (th-byte-tensor-get-4d ($handle tensor) location
                                    ($0 others-and-default)
                                    ($1 others-and-default)
                                    ($2 others-and-default))))))

(defmethod tensor-at ((tensor tensor.char) location &rest others-and-default)
  (if (null others-and-default)
      (th-char-tensor-get-1d ($handle tensor) location)
      (cond ((eq 1 ($count others-and-default))
             (th-char-tensor-get-2d ($handle tensor) location ($0 others-and-default)))
            ((eq 2 ($count others-and-default))
             (th-char-tensor-get-3d ($handle tensor) location
                                    ($0 others-and-default)
                                    ($1 others-and-default)))
            ((eq 3 ($count others-and-default))
             (th-char-tensor-get-4d ($handle tensor) location
                                    ($0 others-and-default)
                                    ($1 others-and-default)
                                    ($2 others-and-default))))))

(defmethod tensor-at ((tensor tensor.short) location &rest others-and-default)
  (if (null others-and-default)
      (th-short-tensor-get-1d ($handle tensor) location)
      (cond ((eq 1 ($count others-and-default))
             (th-short-tensor-get-2d ($handle tensor) location ($0 others-and-default)))
            ((eq 2 ($count others-and-default))
             (th-short-tensor-get-3d ($handle tensor) location
                                     ($0 others-and-default)
                                     ($1 others-and-default)))
            ((eq 3 ($count others-and-default))
             (th-short-tensor-get-4d ($handle tensor) location
                                     ($0 others-and-default)
                                     ($1 others-and-default)
                                     ($2 others-and-default))))))

(defmethod tensor-at ((tensor tensor.int) location &rest others-and-default)
  (if (null others-and-default)
      (th-int-tensor-get-1d ($handle tensor) location)
      (cond ((eq 1 ($count others-and-default))
             (th-int-tensor-get-2d ($handle tensor) location ($0 others-and-default)))
            ((eq 2 ($count others-and-default))
             (th-int-tensor-get-3d ($handle tensor) location
                                   ($0 others-and-default)
                                   ($1 others-and-default)))
            ((eq 3 ($count others-and-default))
             (th-int-tensor-get-4d ($handle tensor) location
                                   ($0 others-and-default)
                                   ($1 others-and-default)
                                   ($2 others-and-default))))))

(defmethod tensor-at ((tensor tensor.long) location &rest others-and-default)
  (if (null others-and-default)
      (th-long-tensor-get-1d ($handle tensor) location)
      (cond ((eq 1 ($count others-and-default))
             (th-long-tensor-get-2d ($handle tensor) location ($0 others-and-default)))
            ((eq 2 ($count others-and-default))
             (th-long-tensor-get-3d ($handle tensor) location
                                    ($0 others-and-default)
                                    ($1 others-and-default)))
            ((eq 3 ($count others-and-default))
             (th-long-tensor-get-4d ($handle tensor) location
                                    ($0 others-and-default)
                                    ($1 others-and-default)
                                    ($2 others-and-default))))))

(defmethod tensor-at ((tensor tensor.float) location &rest others-and-default)
  (if (null others-and-default)
      (th-float-tensor-get-1d ($handle tensor) location)
      (cond ((eq 1 ($count others-and-default))
             (th-float-tensor-get-2d ($handle tensor) location ($0 others-and-default)))
            ((eq 2 ($count others-and-default))
             (th-float-tensor-get-3d ($handle tensor) location
                                     ($0 others-and-default)
                                     ($1 others-and-default)))
            ((eq 3 ($count others-and-default))
             (th-float-tensor-get-4d ($handle tensor) location
                                     ($0 others-and-default)
                                     ($1 others-and-default)
                                     ($2 others-and-default))))))

(defmethod tensor-at ((tensor tensor.double) location &rest others-and-default)
  (if (null others-and-default)
      (th-double-tensor-get-1d ($handle tensor) location)
      (cond ((eq 1 ($count others-and-default))
             (th-double-tensor-get-2d ($handle tensor) location ($0 others-and-default)))
            ((eq 2 ($count others-and-default))
             (th-double-tensor-get-3d ($handle tensor) location
                                      ($0 others-and-default)
                                      ($1 others-and-default)))
            ((eq 3 ($count others-and-default))
             (th-double-tensor-get-4d ($handle tensor) location
                                      ($0 others-and-default)
                                      ($1 others-and-default)
                                      ($2 others-and-default))))))

(defmethod (setf tensor-at) (value (tensor tensor.byte) location &rest others)
  (let ((v (tensor-coerce tensor value)))
    (if (null others)
        (th-byte-tensor-set-1d ($handle tensor) location v)
        (cond ((eq 1 ($count others))
               (th-byte-tensor-set-2d ($handle tensor) location ($0 others)
                                      v))
              ((eq 2 ($count others))
               (th-byte-tensor-set-3d ($handle tensor) location
                                      ($0 others)
                                      ($1 others)
                                      v))
              ((eq 3 ($count others))
               (th-byte-tensor-set-4d ($handle tensor) location
                                      ($0 others)
                                      ($1 others)
                                      ($2 others)
                                      v))))
    v))

(defmethod (setf tensor-at) (value (tensor tensor.char) location &rest others)
  (let ((v (tensor-coerce tensor value)))
    (if (null others)
        (th-char-tensor-set-1d ($handle tensor) location v)
        (cond ((eq 1 ($count others))
               (th-char-tensor-set-2d ($handle tensor) location ($0 others)
                                      v))
              ((eq 2 ($count others))
               (th-char-tensor-set-3d ($handle tensor) location
                                      ($0 others)
                                      ($1 others)
                                      v))
              ((eq 3 ($count others))
               (th-char-tensor-set-4d ($handle tensor) location
                                      ($0 others)
                                      ($1 others)
                                      ($2 others)
                                      v))))
    v))

(defmethod (setf tensor-at) (value (tensor tensor.short) location &rest others)
  (let ((v (tensor-coerce tensor value)))
    (if (null others)
        (th-short-tensor-set-1d ($handle tensor) location v)
        (cond ((eq 1 ($count others))
               (th-short-tensor-set-2d ($handle tensor) location ($0 others)
                                       v))
              ((eq 2 ($count others))
               (th-short-tensor-set-3d ($handle tensor) location
                                       ($0 others)
                                       ($1 others)
                                       v))
              ((eq 3 ($count others))
               (th-short-tensor-set-4d ($handle tensor) location
                                       ($0 others)
                                       ($1 others)
                                       ($2 others)
                                       v))))
    v))

(defmethod (setf tensor-at) (value (tensor tensor.int) location &rest others)
  (let ((v (tensor-coerce tensor value)))
    (if (null others)
        (th-int-tensor-set-1d ($handle tensor) location v)
        (cond ((eq 1 ($count others))
               (th-int-tensor-set-2d ($handle tensor) location ($0 others)
                                     v))
              ((eq 2 ($count others))
               (th-int-tensor-set-3d ($handle tensor) location
                                     ($0 others)
                                     ($1 others)
                                     v))
              ((eq 3 ($count others))
               (th-int-tensor-set-4d ($handle tensor) location
                                     ($0 others)
                                     ($1 others)
                                     ($2 others)
                                     v))))
    v))

(defmethod (setf tensor-at) (value (tensor tensor.long) location &rest others)
  (let ((v (tensor-coerce tensor value)))
    (if (null others)
        (th-long-tensor-set-1d ($handle tensor) location v)
        (cond ((eq 1 ($count others))
               (th-long-tensor-set-2d ($handle tensor) location ($0 others)
                                      v))
              ((eq 2 ($count others))
               (th-long-tensor-set-3d ($handle tensor) location
                                      ($0 others)
                                      ($1 others)
                                      v))
              ((eq 3 ($count others))
               (th-long-tensor-set-4d ($handle tensor) location
                                      ($0 others)
                                      ($1 others)
                                      ($2 others)
                                      v))))
    v))

(defmethod (setf tensor-at) (value (tensor tensor.float) location &rest others)
  (let ((v (tensor-coerce tensor value)))
    (if (null others)
        (th-float-tensor-set-1d ($handle tensor) location v)
        (cond ((eq 1 ($count others))
               (th-float-tensor-set-2d ($handle tensor) location ($0 others)
                                       v))
              ((eq 2 ($count others))
               (th-float-tensor-set-3d ($handle tensor) location
                                       ($0 others)
                                       ($1 others)
                                       v))
              ((eq 3 ($count others))
               (th-float-tensor-set-4d ($handle tensor) location
                                       ($0 others)
                                       ($1 others)
                                       ($2 others)
                                       v))))
    v))

(defmethod (setf tensor-at) (value (tensor tensor.double) location &rest others)
  (let ((v (tensor-coerce tensor value)))
    (if (null others)
        (th-double-tensor-set-1d ($handle tensor) location v)
        (cond ((eq 1 ($count others))
               (th-double-tensor-set-2d ($handle tensor) location ($0 others)
                                        v))
              ((eq 2 ($count others))
               (th-double-tensor-set-3d ($handle tensor) location
                                        ($0 others)
                                        ($1 others)
                                        v))
              ((eq 3 ($count others))
               (th-double-tensor-set-4d ($handle tensor) location
                                        ($0 others)
                                        ($1 others)
                                        ($2 others)
                                        v))))
    v))

(defmethod tensor-storage ((tensor tensor.byte))
  (let ((storage (make-instance 'storage.byte))
        (h (th-byte-tensor-storage ($handle tensor))))
    (when (not (cffi:null-pointer-p h))
      (setf ($handle storage) h)
      storage)))
(defmethod tensor-storage ((tensor tensor.char))
  (let ((storage (make-instance 'storage.char))
        (h (th-char-tensor-storage ($handle tensor))))
    (when (not (cffi:null-pointer-p h))
      (setf ($handle storage) h)
      storage)))
(defmethod tensor-storage ((tensor tensor.short))
  (let ((storage (make-instance 'storage.short))
        (h (th-short-tensor-storage ($handle tensor))))
    (when (not (cffi:null-pointer-p h))
      (setf ($handle storage) h)
      storage)))
(defmethod tensor-storage ((tensor tensor.int))
  (let ((storage (make-instance 'storage.int))
        (h (th-int-tensor-storage ($handle tensor))))
    (when (not (cffi:null-pointer-p h))
      (setf ($handle storage) h)
      storage)))
(defmethod tensor-storage ((tensor tensor.long))
  (let ((storage (make-instance 'storage.long))
        (h (th-long-tensor-storage ($handle tensor))))
    (when (not (cffi:null-pointer-p h))
      (setf ($handle storage) h)
      storage)))
(defmethod tensor-storage ((tensor tensor.float))
  (let ((storage (make-instance 'storage.float))
        (h (th-float-tensor-storage ($handle tensor))))
    (when (not (cffi:null-pointer-p h))
      (setf ($handle storage) h)
      storage)))
(defmethod tensor-storage ((tensor tensor.double))
  (let ((storage (make-instance 'storage.double))
        (h (th-double-tensor-storage ($handle tensor))))
    (when (not (cffi:null-pointer-p h))
      (setf ($handle storage) h)
      storage)))

(defmethod tensor-storage-offset ((tensor tensor.byte))
  (th-byte-tensor-storage-offset ($handle tensor)))
(defmethod tensor-storage-offset ((tensor tensor.char))
  (th-char-tensor-storage-offset ($handle tensor)))
(defmethod tensor-storage-offset ((tensor tensor.short))
  (th-short-tensor-storage-offset ($handle tensor)))
(defmethod tensor-storage-offset ((tensor tensor.int))
  (th-int-tensor-storage-offset ($handle tensor)))
(defmethod tensor-storage-offset ((tensor tensor.long))
  (th-long-tensor-storage-offset ($handle tensor)))
(defmethod tensor-storage-offset ((tensor tensor.float))
  (th-float-tensor-storage-offset ($handle tensor)))
(defmethod tensor-storage-offset ((tensor tensor.double))
  (th-double-tensor-storage-offset ($handle tensor)))

(defmethod tensor-n-dimension ((tensor tensor.byte))
  (th-byte-tensor-n-dimension ($handle tensor)))
(defmethod tensor-n-dimension ((tensor tensor.char))
  (th-char-tensor-n-dimension ($handle tensor)))
(defmethod tensor-n-dimension ((tensor tensor.short))
  (th-short-tensor-n-dimension ($handle tensor)))
(defmethod tensor-n-dimension ((tensor tensor.int))
  (th-int-tensor-n-dimension ($handle tensor)))
(defmethod tensor-n-dimension ((tensor tensor.long))
  (th-long-tensor-n-dimension ($handle tensor)))
(defmethod tensor-n-dimension ((tensor tensor.float))
  (th-float-tensor-n-dimension ($handle tensor)))
(defmethod tensor-n-dimension ((tensor tensor.double))
  (th-double-tensor-n-dimension ($handle tensor)))

(defmethod tensor-size ((tensor tensor.byte) dimension)
  (th-byte-tensor-size ($handle tensor) dimension))

(defmethod tensor-size ((tensor tensor.char) dimension)
  (th-char-tensor-size ($handle tensor) dimension))

(defmethod tensor-size ((tensor tensor.short) dimension)
  (th-short-tensor-size ($handle tensor) dimension))

(defmethod tensor-size ((tensor tensor.int) dimension)
  (th-int-tensor-size ($handle tensor) dimension))

(defmethod tensor-size ((tensor tensor.long) dimension)
  (th-long-tensor-size ($handle tensor) dimension))

(defmethod tensor-size ((tensor tensor.float) dimension)
  (th-float-tensor-size ($handle tensor) dimension))

(defmethod tensor-size ((tensor tensor.double) dimension)
  (th-double-tensor-size ($handle tensor) dimension))

(defmethod tensor-stride ((tensor tensor.byte) dimension)
  (th-byte-tensor-stride ($handle tensor) dimension))
(defmethod tensor-stride ((tensor tensor.char) dimension)
  (th-char-tensor-stride ($handle tensor) dimension))
(defmethod tensor-stride ((tensor tensor.short) dimension)
  (th-short-tensor-stride ($handle tensor) dimension))
(defmethod tensor-stride ((tensor tensor.int) dimension)
  (th-int-tensor-stride ($handle tensor) dimension))
(defmethod tensor-stride ((tensor tensor.long) dimension)
  (th-long-tensor-stride ($handle tensor) dimension))
(defmethod tensor-stride ((tensor tensor.float) dimension)
  (th-float-tensor-stride ($handle tensor) dimension))
(defmethod tensor-stride ((tensor tensor.double) dimension)
  (th-double-tensor-stride ($handle tensor) dimension))

(defmethod tensor-data ((tensor tensor.byte))
  (let ((ptr (make-instance 'byte-pointer)))
    (setf ($handle ptr) (th-byte-tensor-data ($handle tensor)))
    ptr))
(defmethod tensor-data ((tensor tensor.char))
  (let ((ptr (make-instance 'char-pointer)))
    (setf ($handle ptr) (th-char-tensor-data ($handle tensor)))
    ptr))
(defmethod tensor-data ((tensor tensor.short))
  (let ((ptr (make-instance 'short-pointer)))
    (setf ($handle ptr) (th-short-tensor-data ($handle tensor)))
    ptr))
(defmethod tensor-data ((tensor tensor.int))
  (let ((ptr (make-instance 'int-pointer)))
    (setf ($handle ptr) (th-int-tensor-data ($handle tensor)))
    ptr))
(defmethod tensor-data ((tensor tensor.long))
  (let ((ptr (make-instance 'long-pointer)))
    (setf ($handle ptr) (th-long-tensor-data ($handle tensor)))
    ptr))
(defmethod tensor-data ((tensor tensor.float))
  (let ((ptr (make-instance 'float-pointer)))
    (setf ($handle ptr) (th-float-tensor-data ($handle tensor)))
    ptr))
(defmethod tensor-data ((tensor tensor.double))
  (let ((ptr (make-instance 'double-pointer)))
    (setf ($handle ptr) (th-double-tensor-data ($handle tensor)))
    ptr))

(defmethod tensor-clone ((tensor tensor.byte))
  (let ((clone (make-instance 'tensor.byte))
        (handle (th-byte-tensor-new-clone ($handle tensor))))
    (setf ($handle clone) handle)
    (sb-ext:finalize clone (lambda () (th-byte-tensor-free handle)))
    clone))
(defmethod tensor-clone ((tensor tensor.char))
  (let ((clone (make-instance 'tensor.char))
        (handle (th-char-tensor-new-clone ($handle tensor))))
    (setf ($handle clone) handle)
    (sb-ext:finalize clone (lambda () (th-char-tensor-free handle)))
    clone))
(defmethod tensor-clone ((tensor tensor.short))
  (let ((clone (make-instance 'tensor.short))
        (handle (th-short-tensor-new-clone ($handle tensor))))
    (setf ($handle clone) handle)
    (sb-ext:finalize clone (lambda () (th-short-tensor-free handle)))
    clone))
(defmethod tensor-clone ((tensor tensor.int))
  (let ((clone (make-instance 'tensor.int))
        (handle (th-int-tensor-new-clone ($handle tensor))))
    (setf ($handle clone) handle)
    (sb-ext:finalize clone (lambda () (th-int-tensor-free handle)))
    clone))
(defmethod tensor-clone ((tensor tensor.long))
  (let ((clone (make-instance 'tensor.long))
        (handle (th-long-tensor-new-clone ($handle tensor))))
    (setf ($handle clone) handle)
    (sb-ext:finalize clone (lambda () (th-long-tensor-free handle)))
    clone))
(defmethod tensor-clone ((tensor tensor.float))
  (let ((clone (make-instance 'tensor.float))
        (handle (th-float-tensor-new-clone ($handle tensor))))
    (setf ($handle clone) handle)
    (sb-ext:finalize clone (lambda () (th-float-tensor-free handle)))
    clone))
(defmethod tensor-clone ((tensor tensor.double))
  (let ((clone (make-instance 'tensor.double))
        (handle (th-double-tensor-new-clone ($handle tensor))))
    (setf ($handle clone) handle)
    (sb-ext:finalize clone (lambda () (th-double-tensor-free handle)))
    clone))

(defmethod tensor-contiguous ((tensor tensor.byte))
  (let ((tr (make-instance 'tensor.byte))
        (rh (th-byte-tensor-new-contiguous ($handle tensor))))
    (setf ($handle tr) rh)
    (sb-ext:finalize tr (lambda () (th-byte-tensor-free rh)))
    tr))
(defmethod tensor-contiguous ((tensor tensor.char))
  (let ((tr (make-instance 'tensor.char))
        (rh (th-char-tensor-new-contiguous ($handle tensor))))
    (setf ($handle tr) rh)
    (sb-ext:finalize tr (lambda () (th-char-tensor-free rh)))
    tr))
(defmethod tensor-contiguous ((tensor tensor.short))
  (let ((tr (make-instance 'tensor.short))
        (rh (th-short-tensor-new-contiguous ($handle tensor))))
    (setf ($handle tr) rh)
    (sb-ext:finalize tr (lambda () (th-short-tensor-free rh)))
    tr))
(defmethod tensor-contiguous ((tensor tensor.int))
  (let ((tr (make-instance 'tensor.int))
        (rh (th-int-tensor-new-contiguous ($handle tensor))))
    (setf ($handle tr) rh)
    (sb-ext:finalize tr (lambda () (th-int-tensor-free rh)))
    tr))
(defmethod tensor-contiguous ((tensor tensor.long))
  (let ((tr (make-instance 'tensor.long))
        (rh (th-long-tensor-new-contiguous ($handle tensor))))
    (setf ($handle tr) rh)
    (sb-ext:finalize tr (lambda () (th-long-tensor-free rh)))
    tr))
(defmethod tensor-contiguous ((tensor tensor.float))
  (let ((tr (make-instance 'tensor.float))
        (rh (th-float-tensor-new-contiguous ($handle tensor))))
    (setf ($handle tr) rh)
    (sb-ext:finalize tr (lambda () (th-float-tensor-free rh)))
    tr))
(defmethod tensor-contiguous ((tensor tensor.double))
  (let ((tr (make-instance 'tensor.double))
        (rh (th-double-tensor-new-contiguous ($handle tensor))))
    (setf ($handle tr) rh)
    (sb-ext:finalize tr (lambda () (th-double-tensor-free rh)))
    tr))

(defmethod tensor-new-select ((tensor tensor.byte) dimension slice-index)
  (let ((tr (make-instance 'tensor.byte))
        (h (th-byte-tensor-new-select ($handle tensor) dimension slice-index)))
    (setf ($handle tr) h)
    (sb-ext:finalize tr (lambda () (th-byte-tensor-free h)))
    tr))
(defmethod tensor-new-select ((tensor tensor.char) dimension slice-index)
  (let ((tr (make-instance 'tensor.char))
        (h (th-char-tensor-new-select ($handle tensor) dimension slice-index)))
    (setf ($handle tr) h)
    (sb-ext:finalize tr (lambda () (th-char-tensor-free h)))
    tr))
(defmethod tensor-new-select ((tensor tensor.short) dimension slice-index)
  (let ((tr (make-instance 'tensor.short))
        (h (th-short-tensor-new-select ($handle tensor) dimension slice-index)))
    (setf ($handle tr) h)
    (sb-ext:finalize tr (lambda () (th-short-tensor-free h)))
    tr))
(defmethod tensor-new-select ((tensor tensor.int) dimension slice-index)
  (let ((tr (make-instance 'tensor.int))
        (h (th-int-tensor-new-select ($handle tensor) dimension slice-index)))
    (setf ($handle tr) h)
    (sb-ext:finalize tr (lambda () (th-int-tensor-free h)))
    tr))
(defmethod tensor-new-select ((tensor tensor.long) dimension slice-index)
  (let ((tr (make-instance 'tensor.long))
        (h (th-long-tensor-new-select ($handle tensor) dimension slice-index)))
    (setf ($handle tr) h)
    (sb-ext:finalize tr (lambda () (th-long-tensor-free h)))
    tr))
(defmethod tensor-new-select ((tensor tensor.float) dimension slice-index)
  (let ((tr (make-instance 'tensor.float))
        (h (th-float-tensor-new-select ($handle tensor) dimension slice-index)))
    (setf ($handle tr) h)
    (sb-ext:finalize tr (lambda () (th-float-tensor-free h)))
    tr))
(defmethod tensor-new-select ((tensor tensor.double) dimension slice-index)
  (let ((tr (make-instance 'tensor.double))
        (h (th-double-tensor-new-select ($handle tensor) dimension slice-index)))
    (setf ($handle tr) h)
    (sb-ext:finalize tr (lambda () (th-double-tensor-free h)))
    tr))

(defmethod tensor-new-narrow ((tensor tensor.byte) dimension first-index size)
  (let ((r (make-instance 'tensor.byte))
        (h (th-byte-tensor-new-narrow ($handle tensor) dimension first-index size)))
    (setf ($handle r) h)
    (sb-ext:finalize r (lambda () (th-byte-tensor-free h)))
    r))
(defmethod tensor-new-narrow ((tensor tensor.char) dimension first-index size)
  (let ((r (make-instance 'tensor.char))
        (h (th-char-tensor-new-narrow ($handle tensor) dimension first-index size)))
    (setf ($handle r) h)
    (sb-ext:finalize r (lambda () (th-char-tensor-free h)))
    r))
(defmethod tensor-new-narrow ((tensor tensor.short) dimension first-index size)
  (let ((r (make-instance 'tensor.short))
        (h (th-short-tensor-new-narrow ($handle tensor) dimension first-index size)))
    (setf ($handle r) h)
    (sb-ext:finalize r (lambda () (th-short-tensor-free h)))
    r))
(defmethod tensor-new-narrow ((tensor tensor.int) dimension first-index size)
  (let ((r (make-instance 'tensor.int))
        (h (th-int-tensor-new-narrow ($handle tensor) dimension first-index size)))
    (setf ($handle r) h)
    (sb-ext:finalize r (lambda () (th-int-tensor-free h)))
    r))
(defmethod tensor-new-narrow ((tensor tensor.long) dimension first-index size)
  (let ((r (make-instance 'tensor.long))
        (h (th-long-tensor-new-narrow ($handle tensor) dimension first-index size)))
    (setf ($handle r) h)
    (sb-ext:finalize r (lambda () (th-long-tensor-free h)))
    r))
(defmethod tensor-new-narrow ((tensor tensor.float) dimension first-index size)
  (let ((r (make-instance 'tensor.float))
        (h (th-float-tensor-new-narrow ($handle tensor) dimension first-index size)))
    (setf ($handle r) h)
    (sb-ext:finalize r (lambda () (th-float-tensor-free h)))
    r))
(defmethod tensor-new-narrow ((tensor tensor.double) dimension first-index size)
  (let ((r (make-instance 'tensor.double))
        (h (th-double-tensor-new-narrow ($handle tensor) dimension first-index size)))
    (setf ($handle r) h)
    (sb-ext:finalize r (lambda () (th-double-tensor-free h)))
    r))

(defmethod tensor-new-transpose ((tensor tensor.byte))
  (let ((r (make-instance 'tensor.byte))
        (h (th-byte-tensor-new-transpose ($handle tensor) 0 1)))
    (setf ($handle r) h)
    (sb-ext:finalize r (lambda () (th-byte-tensor-free h)))
    r))
(defmethod tensor-new-transpose ((tensor tensor.char))
  (let ((r (make-instance 'tensor.char))
        (h (th-char-tensor-new-transpose ($handle tensor) 0 1)))
    (setf ($handle r) h)
    (sb-ext:finalize r (lambda () (th-char-tensor-free h)))
    r))
(defmethod tensor-new-transpose ((tensor tensor.short))
  (let ((r (make-instance 'tensor.short))
        (h (th-short-tensor-new-transpose ($handle tensor) 0 1)))
    (setf ($handle r) h)
    (sb-ext:finalize r (lambda () (th-short-tensor-free h)))
    r))
(defmethod tensor-new-transpose ((tensor tensor.int))
  (let ((r (make-instance 'tensor.int))
        (h (th-int-tensor-new-transpose ($handle tensor) 0 1)))
    (setf ($handle r) h)
    (sb-ext:finalize r (lambda () (th-int-tensor-free h)))
    r))
(defmethod tensor-new-transpose ((tensor tensor.long))
  (let ((r (make-instance 'tensor.long))
        (h (th-long-tensor-new-transpose ($handle tensor) 0 1)))
    (setf ($handle r) h)
    (sb-ext:finalize r (lambda () (th-long-tensor-free h)))
    r))
(defmethod tensor-new-transpose ((tensor tensor.float))
  (let ((r (make-instance 'tensor.float))
        (h (th-float-tensor-new-transpose ($handle tensor) 0 1)))
    (setf ($handle r) h)
    (sb-ext:finalize r (lambda () (th-float-tensor-free h)))
    r))
(defmethod tensor-new-transpose ((tensor tensor.double))
  (let ((r (make-instance 'tensor.double))
        (h (th-double-tensor-new-transpose ($handle tensor) 0 1)))
    (setf ($handle r) h)
    (sb-ext:finalize r (lambda () (th-double-tensor-free h)))
    r))

(defmethod tensor-new-unfold ((tensor tensor.byte) dimension size step)
  (let ((r (make-instance 'tensor.byte))
        (h (th-byte-tensor-new-unfold ($handle tensor) dimension size step)))
    (setf ($handle r) h)
    (sb-ext:finalize r (lambda () (th-byte-tensor-free h)))
    r))
(defmethod tensor-new-unfold ((tensor tensor.char) dimension size step)
  (let ((r (make-instance 'tensor.char))
        (h (th-char-tensor-new-unfold ($handle tensor) dimension size step)))
    (setf ($handle r) h)
    (sb-ext:finalize r (lambda () (th-char-tensor-free h)))
    r))
(defmethod tensor-new-unfold ((tensor tensor.short) dimension size step)
  (let ((r (make-instance 'tensor.short))
        (h (th-short-tensor-new-unfold ($handle tensor) dimension size step)))
    (setf ($handle r) h)
    (sb-ext:finalize r (lambda () (th-short-tensor-free h)))
    r))
(defmethod tensor-new-unfold ((tensor tensor.int) dimension size step)
  (let ((r (make-instance 'tensor.int))
        (h (th-int-tensor-new-unfold ($handle tensor) dimension size step)))
    (setf ($handle r) h)
    (sb-ext:finalize r (lambda () (th-int-tensor-free h)))
    r))
(defmethod tensor-new-unfold ((tensor tensor.long) dimension size step)
  (let ((r (make-instance 'tensor.long))
        (h (th-long-tensor-new-unfold ($handle tensor) dimension size step)))
    (setf ($handle r) h)
    (sb-ext:finalize r (lambda () (th-long-tensor-free h)))
    r))
(defmethod tensor-new-unfold ((tensor tensor.float) dimension size step)
  (let ((r (make-instance 'tensor.float))
        (h (th-float-tensor-new-unfold ($handle tensor) dimension size step)))
    (setf ($handle r) h)
    (sb-ext:finalize r (lambda () (th-float-tensor-free h)))
    r))
(defmethod tensor-new-unfold ((tensor tensor.double) dimension size step)
  (let ((r (make-instance 'tensor.double))
        (h (th-double-tensor-new-unfold ($handle tensor) dimension size step)))
    (setf ($handle r) h)
    (sb-ext:finalize r (lambda () (th-double-tensor-free h)))
    r))

(defmethod tensor-new-view ((tensor tensor.byte) (size list))
  (let* ((r (make-instance 'tensor.byte))
         (s (let ((s (long-storage ($count size))))
              (loop :for i :from 0 :below ($count size)
                    :do (setf ($ s i) ($ size i)))
              s))
         (h (th-byte-tensor-new-view ($handle tensor) ($handle s))))
    (setf ($handle r) h)
    (sb-ext:finalize r (lambda () (th-byte-tensor-free h)))
    r))
(defmethod tensor-new-view ((tensor tensor.char) (size list))
  (let* ((r (make-instance 'tensor.char))
         (s (let ((s (long-storage ($count size))))
              (loop :for i :from 0 :below ($count size)
                    :do (setf ($ s i) ($ size i)))
              s))
         (h (th-char-tensor-new-view ($handle tensor) ($handle s))))
    (setf ($handle r) h)
    (sb-ext:finalize r (lambda () (th-char-tensor-free h)))
    r))
(defmethod tensor-new-view ((tensor tensor.short) (size list))
  (let* ((r (make-instance 'tensor.short))
         (s (let ((s (long-storage ($count size))))
              (loop :for i :from 0 :below ($count size)
                    :do (setf ($ s i) ($ size i)))
              s))
         (h (th-short-tensor-new-view ($handle tensor) ($handle s))))
    (setf ($handle r) h)
    (sb-ext:finalize r (lambda () (th-short-tensor-free h)))
    r))
(defmethod tensor-new-view ((tensor tensor.int) (size list))
  (let* ((r (make-instance 'tensor.int))
         (s (let ((s (long-storage ($count size))))
              (loop :for i :from 0 :below ($count size)
                    :do (setf ($ s i) ($ size i)))
              s))
         (h (th-int-tensor-new-view ($handle tensor) ($handle s))))
    (setf ($handle r) h)
    (sb-ext:finalize r (lambda () (th-int-tensor-free h)))
    r))
(defmethod tensor-new-view ((tensor tensor.long) (size list))
  (let* ((r (make-instance 'tensor.long))
         (s (let ((s (long-storage ($count size))))
              (loop :for i :from 0 :below ($count size)
                    :do (setf ($ s i) ($ size i)))
              s))
         (h (th-long-tensor-new-view ($handle tensor) ($handle s))))
    (setf ($handle r) h)
    (sb-ext:finalize r (lambda () (th-long-tensor-free h)))
    r))
(defmethod tensor-new-view ((tensor tensor.float) (size list))
  (let* ((r (make-instance 'tensor.float))
         (s (let ((s (long-storage ($count size))))
              (loop :for i :from 0 :below ($count size)
                    :do (setf ($ s i) ($ size i)))
              s))
         (h (th-float-tensor-new-view ($handle tensor) ($handle s))))
    (setf ($handle r) h)
    (sb-ext:finalize r (lambda () (th-float-tensor-free h)))
    r))
(defmethod tensor-new-view ((tensor tensor.double) (size list))
  (let* ((r (make-instance 'tensor.double))
         (s (let ((s (long-storage ($count size))))
              (loop :for i :from 0 :below ($count size)
                    :do (setf ($ s i) ($ size i)))
              s))
         (h (th-double-tensor-new-view ($handle tensor) ($handle s))))
    (setf ($handle r) h)
    (sb-ext:finalize r (lambda () (th-double-tensor-free h)))
    r))

(defmethod tensor-new-view ((tensor tensor.byte) (size storage.long))
  (let ((r (make-instance 'tensor.byte))
        (h (th-byte-tensor-new-view ($handle tensor) ($handle size))))
    (setf ($handle r) h)
    (sb-ext:finalize r (lambda () (th-byte-tensor-free h)))
    r))
(defmethod tensor-new-view ((tensor tensor.char) (size storage.long))
  (let ((r (make-instance 'tensor.char))
        (h (th-char-tensor-new-view ($handle tensor) ($handle size))))
    (setf ($handle r) h)
    (sb-ext:finalize r (lambda () (th-char-tensor-free h)))
    r))
(defmethod tensor-new-view ((tensor tensor.short) (size storage.long))
  (let ((r (make-instance 'tensor.short))
        (h (th-short-tensor-new-view ($handle tensor) ($handle size))))
    (setf ($handle r) h)
    (sb-ext:finalize r (lambda () (th-short-tensor-free h)))
    r))
(defmethod tensor-new-view ((tensor tensor.int) (size storage.long))
  (let ((r (make-instance 'tensor.int))
        (h (th-int-tensor-new-view ($handle tensor) ($handle size))))
    (setf ($handle r) h)
    (sb-ext:finalize r (lambda () (th-int-tensor-free h)))
    r))
(defmethod tensor-new-view ((tensor tensor.long) (size storage.long))
  (let ((r (make-instance 'tensor.long))
        (h (th-long-tensor-new-view ($handle tensor) ($handle size))))
    (setf ($handle r) h)
    (sb-ext:finalize r (lambda () (th-long-tensor-free h)))
    r))
(defmethod tensor-new-view ((tensor tensor.float) (size storage.long))
  (let ((r (make-instance 'tensor.float))
        (h (th-float-tensor-new-view ($handle tensor) ($handle size))))
    (setf ($handle r) h)
    (sb-ext:finalize r (lambda () (th-float-tensor-free h)))
    r))
(defmethod tensor-new-view ((tensor tensor.double) (size storage.long))
  (let ((r (make-instance 'tensor.double))
        (h (th-double-tensor-new-view ($handle tensor) ($handle size))))
    (setf ($handle r) h)
    (sb-ext:finalize r (lambda () (th-double-tensor-free h)))
    r))

(defmethod tensor-new-expand ((tensor tensor.byte) (size list))
  (let* ((r (make-instance 'tensor.byte))
         (s (let ((s (long-storage ($count size))))
              (loop :for i :from 0 :below ($count size)
                    :do (setf ($ s i) ($ size i)))
              s))
         (h (th-byte-tensor-new-expand ($handle tensor) ($handle s))))
    (setf ($handle r) h)
    (sb-ext:finalize r (lambda () (th-byte-tensor-free h)))
    r))
(defmethod tensor-new-expand ((tensor tensor.char) (size list))
  (let* ((r (make-instance 'tensor.char))
         (s (let ((s (long-storage ($count size))))
              (loop :for i :from 0 :below ($count size)
                    :do (setf ($ s i) ($ size i)))
              s))
         (h (th-char-tensor-new-expand ($handle tensor) ($handle s))))
    (setf ($handle r) h)
    (sb-ext:finalize r (lambda () (th-char-tensor-free h)))
    r))
(defmethod tensor-new-expand ((tensor tensor.short) (size list))
  (let* ((r (make-instance 'tensor.short))
         (s (let ((s (long-storage ($count size))))
              (loop :for i :from 0 :below ($count size)
                    :do (setf ($ s i) ($ size i)))
              s))
         (h (th-short-tensor-new-expand ($handle tensor) ($handle s))))
    (setf ($handle r) h)
    (sb-ext:finalize r (lambda () (th-short-tensor-free h)))
    r))
(defmethod tensor-new-expand ((tensor tensor.int) (size list))
  (let* ((r (make-instance 'tensor.int))
         (s (let ((s (long-storage ($count size))))
              (loop :for i :from 0 :below ($count size)
                    :do (setf ($ s i) ($ size i)))
              s))
         (h (th-int-tensor-new-expand ($handle tensor) ($handle s))))
    (setf ($handle r) h)
    (sb-ext:finalize r (lambda () (th-int-tensor-free h)))
    r))
(defmethod tensor-new-expand ((tensor tensor.long) (size list))
  (let* ((r (make-instance 'tensor.long))
         (s (let ((s (long-storage ($count size))))
              (loop :for i :from 0 :below ($count size)
                    :do (setf ($ s i) ($ size i)))
              s))
         (h (th-long-tensor-new-expand ($handle tensor) ($handle s))))
    (setf ($handle r) h)
    (sb-ext:finalize r (lambda () (th-long-tensor-free h)))
    r))
(defmethod tensor-new-expand ((tensor tensor.float) (size list))
  (let* ((r (make-instance 'tensor.float))
         (s (let ((s (long-storage ($count size))))
              (loop :for i :from 0 :below ($count size)
                    :do (setf ($ s i) ($ size i)))
              s))
         (h (th-float-tensor-new-expand ($handle tensor) ($handle s))))
    (setf ($handle r) h)
    (sb-ext:finalize r (lambda () (th-float-tensor-free h)))
    r))
(defmethod tensor-new-expand ((tensor tensor.double) (size list))
  (let* ((r (make-instance 'tensor.double))
         (s (let ((s (long-storage ($count size))))
              (loop :for i :from 0 :below ($count size)
                    :do (setf ($ s i) ($ size i)))
              s))
         (h (th-double-tensor-new-expand ($handle tensor) ($handle s))))
    (setf ($handle r) h)
    (sb-ext:finalize r (lambda () (th-double-tensor-free h)))
    r))

(defmethod tensor-new-expand ((tensor tensor.byte) (size storage.long))
  (let* ((r (make-instance 'tensor.byte))
         (h (th-byte-tensor-new-expand ($handle tensor) ($handle size))))
    (setf ($handle r) h)
    (sb-ext:finalize r (lambda () (th-byte-tensor-free h)))
    r))
(defmethod tensor-new-expand ((tensor tensor.char) (size storage.long))
  (let* ((r (make-instance 'tensor.char))
         (h (th-char-tensor-new-expand ($handle tensor) ($handle size))))
    (setf ($handle r) h)
    (sb-ext:finalize r (lambda () (th-char-tensor-free h)))
    r))
(defmethod tensor-new-expand ((tensor tensor.short) (size storage.long))
  (let* ((r (make-instance 'tensor.short))
         (h (th-short-tensor-new-expand ($handle tensor) ($handle size))))
    (setf ($handle r) h)
    (sb-ext:finalize r (lambda () (th-short-tensor-free h)))
    r))
(defmethod tensor-new-expand ((tensor tensor.int) (size storage.long))
  (let* ((r (make-instance 'tensor.int))
         (h (th-int-tensor-new-expand ($handle tensor) ($handle size))))
    (setf ($handle r) h)
    (sb-ext:finalize r (lambda () (th-int-tensor-free h)))
    r))
(defmethod tensor-new-expand ((tensor tensor.long) (size storage.long))
  (let* ((r (make-instance 'tensor.long))
         (h (th-long-tensor-new-expand ($handle tensor) ($handle size))))
    (setf ($handle r) h)
    (sb-ext:finalize r (lambda () (th-long-tensor-free h)))
    r))
(defmethod tensor-new-expand ((tensor tensor.float) (size storage.long))
  (let* ((r (make-instance 'tensor.float))
         (h (th-float-tensor-new-expand ($handle tensor) ($handle size))))
    (setf ($handle r) h)
    (sb-ext:finalize r (lambda () (th-float-tensor-free h)))
    r))
(defmethod tensor-new-expand ((tensor tensor.double) (size storage.long))
  (let* ((r (make-instance 'tensor.double))
         (h (th-double-tensor-new-expand ($handle tensor) ($handle size))))
    (setf ($handle r) h)
    (sb-ext:finalize r (lambda () (th-double-tensor-free h)))
    r))

(defmethod tensor-expand ((tensor tensor.byte) (src tensor.byte) (size list))
  (when (> ($count size) 0)
    (let ((storage (long-storage ($count size)))
          (tensor (or tensor (byte-tensor))))
      (loop :for i :from 0 :below ($count size)
            :do (setf ($ storage i) ($ size i)))
      (th-byte-tensor-expand ($handle tensor) ($handle src)
                             ($handle storage))
      tensor)))
(defmethod tensor-expand ((tensor tensor.char) (src tensor.char) (size list))
  (when (> ($count size) 0)
    (let ((storage (long-storage ($count size)))
          (tensor (or tensor (char-tensor))))
      (loop :for i :from 0 :below ($count size)
            :do (setf ($ storage i) ($ size i)))
      (th-char-tensor-expand ($handle tensor) ($handle src)
                             ($handle storage))
      tensor)))
(defmethod tensor-expand ((tensor tensor.short) (src tensor.short) (size list))
  (when (> ($count size) 0)
    (let ((storage (long-storage ($count size)))
          (tensor (or tensor (short-tensor))))
      (loop :for i :from 0 :below ($count size)
            :do (setf ($ storage i) ($ size i)))
      (th-short-tensor-expand ($handle tensor) ($handle src)
                              ($handle storage))
      tensor)))
(defmethod tensor-expand ((tensor tensor.int) (src tensor.int) (size list))
  (when (> ($count size) 0)
    (let ((storage (long-storage ($count size)))
          (tensor (or tensor (int-tensor))))
      (loop :for i :from 0 :below ($count size)
            :do (setf ($ storage i) ($ size i)))
      (th-int-tensor-expand ($handle tensor) ($handle src)
                            ($handle storage))
      tensor)))
(defmethod tensor-expand ((tensor tensor.long) (src tensor.long) (size list))
  (when (> ($count size) 0)
    (let ((storage (long-storage ($count size)))
          (tensor (or tensor (long-tensor))))
      (loop :for i :from 0 :below ($count size)
            :do (setf ($ storage i) ($ size i)))
      (th-long-tensor-expand ($handle tensor) ($handle src)
                             ($handle storage))
      tensor)))
(defmethod tensor-expand ((tensor tensor.float) (src tensor.float) (size list))
  (when (> ($count size) 0)
    (let ((storage (long-storage ($count size)))
          (tensor (or tensor (float-tensor))))
      (loop :for i :from 0 :below ($count size)
            :do (setf ($ storage i) ($ size i)))
      (th-float-tensor-expand ($handle tensor) ($handle src)
                              ($handle storage))
      tensor)))
(defmethod tensor-expand ((tensor tensor.double) (src tensor.double) (size list))
  (when (> ($count size) 0)
    (let ((storage (long-storage ($count size)))
          (tensor (or tensor (double-tensor))))
      (loop :for i :from 0 :below ($count size)
            :do (setf ($ storage i) ($ size i)))
      (th-double-tensor-expand ($handle tensor) ($handle src)
                               ($handle storage))
      tensor)))

(defmethod tensor-resize-as ((tensor tensor.byte) src)
  (th-byte-tensor-resize-as ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-resize-as ((tensor tensor.char) src)
  (th-char-tensor-resize-as ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-resize-as ((tensor tensor.short) src)
  (th-short-tensor-resize-as ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-resize-as ((tensor tensor.int) src)
  (th-int-tensor-resize-as ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-resize-as ((tensor tensor.long) src)
  (th-long-tensor-resize-as ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-resize-as ((tensor tensor.float) src)
  (th-float-tensor-resize-as ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-resize-as ((tensor tensor.double) src)
  (th-double-tensor-resize-as ($handle tensor) ($handle src))
  tensor)

(defmethod tensor-resize ((tensor tensor.byte) (size list) &optional stride)
  (if (null stride)
      (let ((sz (long-storage ($count size))))
        (loop :for i :from 0 :below ($count size) :do (setf ($ sz i) ($ size i)))
        (th-byte-tensor-resize-nd ($handle tensor)
                                  ($size sz)
                                  ($pointer sz)
                                  +nil+)
        tensor)
      (when (eq ($count size) ($count stride))
        (let ((sz (long-storage ($count size)))
              (sd (long-storage ($count stride))))
          (loop :for i :from 0 :below ($count size)
                :do (progn (setf ($ sz i) ($ size i))
                           (setf ($ sd i) ($ stride i))))
          (th-byte-tensor-resize-nd ($handle tensor)
                                    ($size sz)
                                    ($pointer sz)
                                    ($pointer sd))
          tensor))))
(defmethod tensor-resize ((tensor tensor.char) (size list) &optional stride)
  (if (null stride)
      (let ((sz (long-storage ($count size))))
        (loop :for i :from 0 :below ($count size) :do (setf ($ sz i) ($ size i)))
        (th-char-tensor-resize-nd ($handle tensor)
                                  ($size sz)
                                  ($pointer sz)
                                  +nil+)
        tensor)
      (when (eq ($count size) ($count stride))
        (let ((sz (long-storage ($count size)))
              (sd (long-storage ($count stride))))
          (loop :for i :from 0 :below ($count size)
                :do (progn (setf ($ sz i) ($ size i))
                           (setf ($ sd i) ($ stride i))))
          (th-char-tensor-resize-nd ($handle tensor)
                                    ($size sz)
                                    ($pointer sz)
                                    ($pointer sd))
          tensor))))
(defmethod tensor-resize ((tensor tensor.short) (size list) &optional stride)
  (if (null stride)
      (let ((sz (long-storage ($count size))))
        (loop :for i :from 0 :below ($count size) :do (setf ($ sz i) ($ size i)))
        (th-short-tensor-resize-nd ($handle tensor)
                                   ($size sz)
                                   ($pointer sz)
                                   +nil+)
        tensor)
      (when (eq ($count size) ($count stride))
        (let ((sz (long-storage ($count size)))
              (sd (long-storage ($count stride))))
          (loop :for i :from 0 :below ($count size)
                :do (progn (setf ($ sz i) ($ size i))
                           (setf ($ sd i) ($ stride i))))
          (th-short-tensor-resize-nd ($handle tensor)
                                     ($size sz)
                                     ($pointer sz)
                                     ($pointer sd))
          tensor))))
(defmethod tensor-resize ((tensor tensor.int) (size list) &optional stride)
  (if (null stride)
      (let ((sz (long-storage ($count size))))
        (loop :for i :from 0 :below ($count size) :do (setf ($ sz i) ($ size i)))
        (th-int-tensor-resize-nd ($handle tensor)
                                 ($size sz)
                                 ($pointer sz)
                                 +nil+)
        tensor)
      (when (eq ($count size) ($count stride))
        (let ((sz (long-storage ($count size)))
              (sd (long-storage ($count stride))))
          (loop :for i :from 0 :below ($count size)
                :do (progn (setf ($ sz i) ($ size i))
                           (setf ($ sd i) ($ stride i))))
          (th-int-tensor-resize-nd ($handle tensor)
                                   ($size sz)
                                   ($pointer sz)
                                   ($pointer sd))
          tensor))))
(defmethod tensor-resize ((tensor tensor.long) (size list) &optional stride)
  (if (null stride)
      (let ((sz (long-storage ($count size))))
        (loop :for i :from 0 :below ($count size) :do (setf ($ sz i) ($ size i)))
        (th-long-tensor-resize-nd ($handle tensor)
                                  ($size sz)
                                  ($pointer sz)
                                  +nil+)
        tensor)
      (when (eq ($count size) ($count stride))
        (let ((sz (long-storage ($count size)))
              (sd (long-storage ($count stride))))
          (loop :for i :from 0 :below ($count size)
                :do (progn (setf ($ sz i) ($ size i))
                           (setf ($ sd i) ($ stride i))))
          (th-long-tensor-resize-nd ($handle tensor)
                                    ($size sz)
                                    ($pointer sz)
                                    ($pointer sd))
          tensor))))
(defmethod tensor-resize ((tensor tensor.float) (size list) &optional stride)
  (if (null stride)
      (let ((sz (long-storage ($count size))))
        (loop :for i :from 0 :below ($count size) :do (setf ($ sz i) ($ size i)))
        (th-float-tensor-resize-nd ($handle tensor)
                                   ($size sz)
                                   ($pointer sz)
                                   +nil+)
        tensor)
      (when (eq ($count size) ($count stride))
        (let ((sz (long-storage ($count size)))
              (sd (long-storage ($count stride))))
          (loop :for i :from 0 :below ($count size)
                :do (progn (setf ($ sz i) ($ size i))
                           (setf ($ sd i) ($ stride i))))
          (th-float-tensor-resize-nd ($handle tensor)
                                     ($size sz)
                                     ($pointer sz)
                                     ($pointer sd))
          tensor))))
(defmethod tensor-resize ((tensor tensor.double) (size list) &optional stride)
  (if (null stride)
      (let ((sz (long-storage ($count size))))
        (loop :for i :from 0 :below ($count size) :do (setf ($ sz i) ($ size i)))
        (th-double-tensor-resize-nd ($handle tensor)
                                    ($size sz)
                                    ($pointer sz)
                                    +nil+)
        tensor)
      (when (eq ($count size) ($count stride))
        (let ((sz (long-storage ($count size)))
              (sd (long-storage ($count stride))))
          (loop :for i :from 0 :below ($count size)
                :do (progn (setf ($ sz i) ($ size i))
                           (setf ($ sd i) ($ stride i))))
          (th-double-tensor-resize-nd ($handle tensor)
                                      ($size sz)
                                      ($pointer sz)
                                      ($pointer sd))
          tensor))))

(defmethod tensor-set ((tensor tensor.byte) (src tensor))
  (th-byte-tensor-set ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-set ((tensor tensor.char) (src tensor))
  (th-char-tensor-set ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-set ((tensor tensor.short) (src tensor))
  (th-short-tensor-set ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-set ((tensor tensor.int) (src tensor))
  (th-int-tensor-set ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-set ((tensor tensor.long) (src tensor))
  (th-long-tensor-set ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-set ((tensor tensor.float) (src tensor))
  (th-float-tensor-set ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-set ((tensor tensor.double) (src tensor))
  (th-double-tensor-set ($handle tensor) ($handle src))
  tensor)

(defmethod tensor-narrow ((tensor tensor.byte) (src tensor.byte) dimension first-idx size)
  (th-byte-tensor-narrow ($handle tensor) ($handle src)
                         dimension first-idx size)
  tensor)
(defmethod tensor-narrow ((tensor tensor.char) (src tensor.char) dimension first-idx size)
  (th-char-tensor-narrow ($handle tensor) ($handle src)
                         dimension first-idx size)
  tensor)
(defmethod tensor-narrow ((tensor tensor.short) (src tensor.short) dimension first-idx size)
  (th-short-tensor-narrow ($handle tensor) ($handle src)
                          dimension first-idx size)
  tensor)
(defmethod tensor-narrow ((tensor tensor.int) (src tensor.int) dimension first-idx size)
  (th-int-tensor-narrow ($handle tensor) ($handle src)
                        dimension first-idx size)
  tensor)
(defmethod tensor-narrow ((tensor tensor.long) (src tensor.long) dimension first-idx size)
  (th-long-tensor-narrow ($handle tensor) ($handle src)
                         dimension first-idx size)
  tensor)
(defmethod tensor-narrow ((tensor tensor.float) (src tensor.float) dimension first-idx size)
  (th-float-tensor-narrow ($handle tensor) ($handle src)
                          dimension first-idx size)
  tensor)
(defmethod tensor-narrow ((tensor tensor.double) (src tensor.double) dimension first-idx size)
  (th-double-tensor-narrow ($handle tensor) ($handle src)
                           dimension first-idx size)
  tensor)

(defmethod tensor-select ((tensor tensor.byte) (src tensor.byte) dimension slice-index)
  (th-byte-tensor-select ($handle tensor) ($handle src)
                         dimension slice-index)
  tensor)
(defmethod tensor-select ((tensor tensor.char) (src tensor.char) dimension slice-index)
  (th-char-tensor-select ($handle tensor) ($handle src)
                         dimension slice-index)
  tensor)
(defmethod tensor-select ((tensor tensor.short) (src tensor.short) dimension slice-index)
  (th-short-tensor-select ($handle tensor) ($handle src)
                          dimension slice-index)
  tensor)
(defmethod tensor-select ((tensor tensor.int) (src tensor.int) dimension slice-index)
  (th-int-tensor-select ($handle tensor) ($handle src)
                        dimension slice-index)
  tensor)
(defmethod tensor-select ((tensor tensor.long) (src tensor.long) dimension slice-index)
  (th-long-tensor-select ($handle tensor) ($handle src)
                         dimension slice-index)
  tensor)
(defmethod tensor-select ((tensor tensor.float) (src tensor.float) dimension slice-index)
  (th-float-tensor-select ($handle tensor) ($handle src)
                          dimension slice-index)
  tensor)
(defmethod tensor-select ((tensor tensor.double) (src tensor.double) dimension slice-index)
  (th-double-tensor-select ($handle tensor) ($handle src)
                           dimension slice-index)
  tensor)

(defmethod tensor-transpose ((tensor tensor.byte) (src tensor.byte) dimension0 dimension1)
  (th-byte-tensor-transpose ($handle tensor) ($handle src)
                            dimension0 dimension1)
  tensor)
(defmethod tensor-transpose ((tensor tensor.char) (src tensor.char) dimension0 dimension1)
  (th-char-tensor-transpose ($handle tensor) ($handle src)
                            dimension0 dimension1)
  tensor)
(defmethod tensor-transpose ((tensor tensor.short) (src tensor.short) dimension0 dimension1)
  (th-short-tensor-transpose ($handle tensor) ($handle src)
                             dimension0 dimension1)
  tensor)
(defmethod tensor-transpose ((tensor tensor.int) (src tensor.int) dimension0 dimension1)
  (th-int-tensor-transpose ($handle tensor) ($handle src)
                           dimension0 dimension1)
  tensor)
(defmethod tensor-transpose ((tensor tensor.long) (src tensor.long) dimension0 dimension1)
  (th-long-tensor-transpose ($handle tensor) ($handle src)
                            dimension0 dimension1)
  tensor)
(defmethod tensor-transpose ((tensor tensor.float) (src tensor.float) dimension0 dimension1)
  (th-float-tensor-transpose ($handle tensor) ($handle src)
                             dimension0 dimension1)
  tensor)
(defmethod tensor-transpose ((tensor tensor.double) (src tensor.double) dimension0 dimension1)
  (th-double-tensor-transpose ($handle tensor) ($handle src)
                              dimension0 dimension1)
  tensor)

(defmethod tensor-unfold ((tensor tensor.byte) (src tensor.byte) dimension size step)
  (th-byte-tensor-unfold ($handle tensor) ($handle src)
                         dimension size step)
  tensor)
(defmethod tensor-unfold ((tensor tensor.byte) (src null) dimension size step)
  (th-byte-tensor-unfold ($handle tensor) +nil+
                         dimension size step)
  tensor)
(defmethod tensor-unfold ((tensor tensor.char) (src tensor.char) dimension size step)
  (th-char-tensor-unfold ($handle tensor) ($handle src)
                         dimension size step)
  tensor)
(defmethod tensor-unfold ((tensor tensor.char) (src null) dimension size step)
  (th-char-tensor-unfold ($handle tensor) +nil+
                         dimension size step)
  tensor)
(defmethod tensor-unfold ((tensor tensor.short) (src tensor.short) dimension size step)
  (th-short-tensor-unfold ($handle tensor) ($handle src)
                          dimension size step)
  tensor)
(defmethod tensor-unfold ((tensor tensor.short) (src null) dimension size step)
  (th-short-tensor-unfold ($handle tensor) +nil+
                          dimension size step)
  tensor)
(defmethod tensor-unfold ((tensor tensor.int) (src tensor.int) dimension size step)
  (th-int-tensor-unfold ($handle tensor) ($handle src)
                        dimension size step)
  tensor)
(defmethod tensor-unfold ((tensor tensor.int) (src null) dimension size step)
  (th-int-tensor-unfold ($handle tensor) +nil+
                        dimension size step)
  tensor)
(defmethod tensor-unfold ((tensor tensor.long) (src tensor.long) dimension size step)
  (th-long-tensor-unfold ($handle tensor) ($handle src)
                         dimension size step)
  tensor)
(defmethod tensor-unfold ((tensor tensor.long) (src null) dimension size step)
  (th-long-tensor-unfold ($handle tensor) +nil+
                         dimension size step)
  tensor)
(defmethod tensor-unfold ((tensor tensor.float) (src tensor.float) dimension size step)
  (th-float-tensor-unfold ($handle tensor) ($handle src)
                          dimension size step)
  tensor)
(defmethod tensor-unfold ((tensor tensor.float) (src null) dimension size step)
  (th-float-tensor-unfold ($handle tensor) +nil+
                          dimension size step)
  tensor)
(defmethod tensor-unfold ((tensor tensor.double) (src tensor.double) dimension size step)
  (th-double-tensor-unfold ($handle tensor) ($handle src)
                           dimension size step)
  tensor)
(defmethod tensor-unfold ((tensor tensor.double) (src null) dimension size step)
  (th-double-tensor-unfold ($handle tensor) +nil+
                           dimension size step)
  tensor)

(defmethod tensor-squeeze ((tensor tensor.byte) (src tensor.byte) &optional dimension)
  (cond ((null dimension) (th-byte-tensor-squeeze ($handle tensor)
                                                  ($handle src)))
        (t (th-byte-tensor-squeeze-1d ($handle tensor) ($handle src)
                                      dimension)))
  tensor)
(defmethod tensor-squeeze ((tensor tensor.byte) (src null) &optional dimension)
  (cond ((null dimension) (th-byte-tensor-squeeze ($handle tensor)
                                                  +nil+))
        (t (th-byte-tensor-squeeze-1d ($handle tensor) +nil+
                                      dimension)))
  tensor)
(defmethod tensor-squeeze ((tensor tensor.char) (src tensor.char) &optional dimension)
  (cond ((null dimension) (th-char-tensor-squeeze ($handle tensor)
                                                  ($handle src)))
        (t (th-char-tensor-squeeze-1d ($handle tensor) ($handle src)
                                      dimension)))
  tensor)
(defmethod tensor-squeeze ((tensor tensor.char) (src null) &optional dimension)
  (cond ((null dimension) (th-char-tensor-squeeze ($handle tensor)
                                                  +nil+))
        (t (th-char-tensor-squeeze-1d ($handle tensor) +nil+
                                      dimension)))
  tensor)
(defmethod tensor-squeeze ((tensor tensor.short) (src tensor.short) &optional dimension)
  (cond ((null dimension) (th-short-tensor-squeeze ($handle tensor)
                                                   ($handle src)))
        (t (th-short-tensor-squeeze-1d ($handle tensor) ($handle src)
                                       dimension)))
  tensor)
(defmethod tensor-squeeze ((tensor tensor.short) (src null) &optional dimension)
  (cond ((null dimension) (th-short-tensor-squeeze ($handle tensor)
                                                   +nil+))
        (t (th-short-tensor-squeeze-1d ($handle tensor) +nil+
                                       dimension)))
  tensor)
(defmethod tensor-squeeze ((tensor tensor.int) (src tensor.int) &optional dimension)
  (cond ((null dimension) (th-int-tensor-squeeze ($handle tensor)
                                                 ($handle src)))
        (t (th-int-tensor-squeeze-1d ($handle tensor) ($handle src)
                                     dimension)))
  tensor)
(defmethod tensor-squeeze ((tensor tensor.int) (src null) &optional dimension)
  (cond ((null dimension) (th-int-tensor-squeeze ($handle tensor)
                                                 +nil+))
        (t (th-int-tensor-squeeze-1d ($handle tensor) +nil+
                                     dimension)))
  tensor)
(defmethod tensor-squeeze ((tensor tensor.long) (src tensor.long) &optional dimension)
  (cond ((null dimension) (th-long-tensor-squeeze ($handle tensor)
                                                  ($handle src)))
        (t (th-long-tensor-squeeze-1d ($handle tensor) ($handle src)
                                      dimension)))
  tensor)
(defmethod tensor-squeeze ((tensor tensor.long) (src null) &optional dimension)
  (cond ((null dimension) (th-long-tensor-squeeze ($handle tensor)
                                                  +nil+))
        (t (th-long-tensor-squeeze-1d ($handle tensor) +nil+
                                      dimension)))
  tensor)
(defmethod tensor-squeeze ((tensor tensor.float) (src tensor.float) &optional dimension)
  (cond ((null dimension) (th-float-tensor-squeeze ($handle tensor)
                                                   ($handle src)))
        (t (th-float-tensor-squeeze-1d ($handle tensor) ($handle src)
                                       dimension)))
  tensor)
(defmethod tensor-squeeze ((tensor tensor.float) (src null) &optional dimension)
  (cond ((null dimension) (th-float-tensor-squeeze ($handle tensor)
                                                   +nil+))
        (t (th-float-tensor-squeeze-1d ($handle tensor) +nil+
                                       dimension)))
  tensor)
(defmethod tensor-squeeze ((tensor tensor.double) (src tensor.double) &optional dimension)
  (cond ((null dimension) (th-double-tensor-squeeze ($handle tensor)
                                                    ($handle src)))
        (t (th-double-tensor-squeeze-1d ($handle tensor) ($handle src)
                                        dimension)))
  tensor)
(defmethod tensor-squeeze ((tensor tensor.double) (src null) &optional dimension)
  (cond ((null dimension) (th-double-tensor-squeeze ($handle tensor)
                                                    +nil+))
        (t (th-double-tensor-squeeze-1d ($handle tensor) +nil+
                                        dimension)))
  tensor)

(defmethod tensor-unsqueeze ((tensor tensor.byte) (src tensor.byte) dimension)
  (th-byte-tensor-unsqueeze-1d ($handle tensor) ($handle src) dimension)
  tensor)
(defmethod tensor-unsqueeze ((tensor tensor.byte) (src null) dimension)
  (th-byte-tensor-unsqueeze-1d ($handle tensor) +nil+ dimension)
  tensor)
(defmethod tensor-unsqueeze ((tensor tensor.char) (src tensor.char) dimension)
  (th-char-tensor-unsqueeze-1d ($handle tensor) ($handle src) dimension)
  tensor)
(defmethod tensor-unsqueeze ((tensor tensor.char) (src null) dimension)
  (th-char-tensor-unsqueeze-1d ($handle tensor) +nil+ dimension)
  tensor)
(defmethod tensor-unsqueeze ((tensor tensor.short) (src tensor.short) dimension)
  (th-short-tensor-unsqueeze-1d ($handle tensor) ($handle src) dimension)
  tensor)
(defmethod tensor-unsqueeze ((tensor tensor.short) (src null) dimension)
  (th-short-tensor-unsqueeze-1d ($handle tensor) +nil+ dimension)
  tensor)
(defmethod tensor-unsqueeze ((tensor tensor.int) (src tensor.int) dimension)
  (th-int-tensor-unsqueeze-1d ($handle tensor) ($handle src) dimension)
  tensor)
(defmethod tensor-unsqueeze ((tensor tensor.int) (src null) dimension)
  (th-int-tensor-unsqueeze-1d ($handle tensor) +nil+ dimension)
  tensor)
(defmethod tensor-unsqueeze ((tensor tensor.long) (src tensor.long) dimension)
  (th-long-tensor-unsqueeze-1d ($handle tensor) ($handle src) dimension)
  tensor)
(defmethod tensor-unsqueeze ((tensor tensor.long) (src null) dimension)
  (th-long-tensor-unsqueeze-1d ($handle tensor) +nil+ dimension)
  tensor)
(defmethod tensor-unsqueeze ((tensor tensor.float) (src tensor.float) dimension)
  (th-float-tensor-unsqueeze-1d ($handle tensor) ($handle src) dimension)
  tensor)
(defmethod tensor-unsqueeze ((tensor tensor.float) (src null) dimension)
  (th-float-tensor-unsqueeze-1d ($handle tensor) +nil+ dimension)
  tensor)
(defmethod tensor-unsqueeze ((tensor tensor.double) (src tensor.double) dimension)
  (th-double-tensor-unsqueeze-1d ($handle tensor) ($handle src) dimension)
  tensor)
(defmethod tensor-unsqueeze ((tensor tensor.double) (src null) dimension)
  (th-double-tensor-unsqueeze-1d ($handle tensor) +nil+ dimension)
  tensor)

(defmethod tensor-contiguous-p ((tensor tensor.byte))
  (eq 1 (th-byte-tensor-is-contiguous ($handle tensor))))
(defmethod tensor-contiguous-p ((tensor tensor.char))
  (eq 1 (th-char-tensor-is-contiguous ($handle tensor))))
(defmethod tensor-contiguous-p ((tensor tensor.short))
  (eq 1 (th-short-tensor-is-contiguous ($handle tensor))))
(defmethod tensor-contiguous-p ((tensor tensor.int))
  (eq 1 (th-int-tensor-is-contiguous ($handle tensor))))
(defmethod tensor-contiguous-p ((tensor tensor.long))
  (eq 1 (th-long-tensor-is-contiguous ($handle tensor))))
(defmethod tensor-contiguous-p ((tensor tensor.float))
  (eq 1 (th-float-tensor-is-contiguous ($handle tensor))))
(defmethod tensor-contiguous-p ((tensor tensor.double))
  (eq 1 (th-double-tensor-is-contiguous ($handle tensor))))

(defmethod tensor-same-size-p ((tensor tensor.byte) (src tensor.byte))
  (eq 1 (th-byte-tensor-is-same-size-as ($handle tensor) ($handle src))))
(defmethod tensor-same-size-p ((tensor tensor.char) (src tensor.char))
  (eq 1 (th-char-tensor-is-same-size-as ($handle tensor) ($handle src))))
(defmethod tensor-same-size-p ((tensor tensor.short) (src tensor.short))
  (eq 1 (th-short-tensor-is-same-size-as ($handle tensor) ($handle src))))
(defmethod tensor-same-size-p ((tensor tensor.int) (src tensor.int))
  (eq 1 (th-int-tensor-is-same-size-as ($handle tensor) ($handle src))))
(defmethod tensor-same-size-p ((tensor tensor.long) (src tensor.long))
  (eq 1 (th-long-tensor-is-same-size-as ($handle tensor) ($handle src))))
(defmethod tensor-same-size-p ((tensor tensor.float) (src tensor.float))
  (eq 1 (th-float-tensor-is-same-size-as ($handle tensor) ($handle src))))
(defmethod tensor-same-size-p ((tensor tensor.double) (src tensor.double))
  (eq 1 (th-double-tensor-is-same-size-as ($handle tensor) ($handle src))))

(defmethod tensor-set-to-p ((tensor tensor.byte) (src tensor.byte))
  (eq 1 (th-byte-tensor-is-set-to ($handle tensor) ($handle src))))
(defmethod tensor-set-to-p ((tensor tensor.char) (src tensor.char))
  (eq 1 (th-char-tensor-is-set-to ($handle tensor) ($handle src))))
(defmethod tensor-set-to-p ((tensor tensor.short) (src tensor.short))
  (eq 1 (th-short-tensor-is-set-to ($handle tensor) ($handle src))))
(defmethod tensor-set-to-p ((tensor tensor.int) (src tensor.int))
  (eq 1 (th-int-tensor-is-set-to ($handle tensor) ($handle src))))
(defmethod tensor-set-to-p ((tensor tensor.long) (src tensor.long))
  (eq 1 (th-long-tensor-is-set-to ($handle tensor) ($handle src))))
(defmethod tensor-set-to-p ((tensor tensor.float) (src tensor.float))
  (eq 1 (th-float-tensor-is-set-to ($handle tensor) ($handle src))))
(defmethod tensor-set-to-p ((tensor tensor.double) (src tensor.double))
  (eq 1 (th-double-tensor-is-set-to ($handle tensor) ($handle src))))

(defmethod tensor-size-p ((tensor tensor.byte) (size list))
  (let ((s (long-storage ($count size))))
    (loop :for i :from 0 :below ($count size) :do (setf ($ s i) ($ size i)))
    (eq 1 (th-byte-tensor-is-size ($handle tensor) ($handle s)))))
(defmethod tensor-size-p ((tensor tensor.byte) (size storage.long))
  (eq 1 (th-byte-tensor-is-size ($handle tensor) ($handle size))))
(defmethod tensor-size-p ((tensor tensor.char) (size list))
  (let ((s (long-storage ($count size))))
    (loop :for i :from 0 :below ($count size) :do (setf ($ s i) ($ size i)))
    (eq 1 (th-char-tensor-is-size ($handle tensor) ($handle s)))))
(defmethod tensor-size-p ((tensor tensor.char) (size storage.long))
  (eq 1 (th-char-tensor-is-size ($handle tensor) ($handle size))))
(defmethod tensor-size-p ((tensor tensor.short) (size list))
  (let ((s (long-storage ($count size))))
    (loop :for i :from 0 :below ($count size) :do (setf ($ s i) ($ size i)))
    (eq 1 (th-short-tensor-is-size ($handle tensor) ($handle s)))))
(defmethod tensor-size-p ((tensor tensor.short) (size storage.long))
  (eq 1 (th-short-tensor-is-size ($handle tensor) ($handle size))))
(defmethod tensor-size-p ((tensor tensor.int) (size list))
  (let ((s (long-storage ($count size))))
    (loop :for i :from 0 :below ($count size) :do (setf ($ s i) ($ size i)))
    (eq 1 (th-int-tensor-is-size ($handle tensor) ($handle s)))))
(defmethod tensor-size-p ((tensor tensor.int) (size storage.long))
  (eq 1 (th-int-tensor-is-size ($handle tensor) ($handle size))))
(defmethod tensor-size-p ((tensor tensor.long) (size list))
  (let ((s (long-storage ($count size))))
    (loop :for i :from 0 :below ($count size) :do (setf ($ s i) ($ size i)))
    (eq 1 (th-long-tensor-is-size ($handle tensor) ($handle s)))))
(defmethod tensor-size-p ((tensor tensor.long) (size storage.long))
  (eq 1 (th-long-tensor-is-size ($handle tensor) ($handle size))))
(defmethod tensor-size-p ((tensor tensor.float) (size list))
  (let ((s (long-storage ($count size))))
    (loop :for i :from 0 :below ($count size) :do (setf ($ s i) ($ size i)))
    (eq 1 (th-float-tensor-is-size ($handle tensor) ($handle s)))))
(defmethod tensor-size-p ((tensor tensor.float) (size storage.long))
  (eq 1 (th-float-tensor-is-size ($handle tensor) ($handle size))))
(defmethod tensor-size-p ((tensor tensor.double) (size list))
  (let ((s (long-storage ($count size))))
    (loop :for i :from 0 :below ($count size) :do (setf ($ s i) ($ size i)))
    (eq 1 (th-double-tensor-is-size ($handle tensor) ($handle s)))))
(defmethod tensor-size-p ((tensor tensor.double) (size storage.long))
  (eq 1 (th-double-tensor-is-size ($handle tensor) ($handle size))))

(defmethod tensor-n-element ((tensor tensor.byte))
  (th-byte-tensor-n-element ($handle tensor)))
(defmethod tensor-n-element ((tensor tensor.char))
  (th-char-tensor-n-element ($handle tensor)))
(defmethod tensor-n-element ((tensor tensor.short))
  (th-short-tensor-n-element ($handle tensor)))
(defmethod tensor-n-element ((tensor tensor.int))
  (th-int-tensor-n-element ($handle tensor)))
(defmethod tensor-n-element ((tensor tensor.long))
  (th-long-tensor-n-element ($handle tensor)))
(defmethod tensor-n-element ((tensor tensor.float))
  (th-float-tensor-n-element ($handle tensor)))
(defmethod tensor-n-element ((tensor tensor.double))
  (th-double-tensor-n-element ($handle tensor)))

(defmethod tensor-copy ((tensor tensor.byte) (src tensor.byte))
  (th-byte-tensor-copy ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-copy ((tensor tensor.byte) (src tensor.char))
  (th-byte-tensor-copy-char ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-copy ((tensor tensor.byte) (src tensor.short))
  (th-byte-tensor-copy-short ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-copy ((tensor tensor.byte) (src tensor.int))
  (th-byte-tensor-copy-int ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-copy ((tensor tensor.byte) (src tensor.long))
  (th-byte-tensor-copy-long ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-copy ((tensor tensor.byte) (src tensor.float))
  (th-byte-tensor-copy-float ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-copy ((tensor tensor.byte) (src tensor.double))
  (th-byte-tensor-copy-double ($handle tensor) ($handle src))
  tensor)

(defmethod tensor-copy ((tensor tensor.char) (src tensor.byte))
  (th-char-tensor-copy-byte ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-copy ((tensor tensor.char) (src tensor.char))
  (th-char-tensor-copy ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-copy ((tensor tensor.char) (src tensor.short))
  (th-char-tensor-copy-short ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-copy ((tensor tensor.char) (src tensor.int))
  (th-char-tensor-copy-int ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-copy ((tensor tensor.char) (src tensor.long))
  (th-char-tensor-copy-long ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-copy ((tensor tensor.char) (src tensor.float))
  (th-char-tensor-copy-float ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-copy ((tensor tensor.char) (src tensor.double))
  (th-char-tensor-copy-double ($handle tensor) ($handle src))
  tensor)

(defmethod tensor-copy ((tensor tensor.short) (src tensor.byte))
  (th-short-tensor-copy-byte ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-copy ((tensor tensor.short) (src tensor.char))
  (th-short-tensor-copy-char ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-copy ((tensor tensor.short) (src tensor.short))
  (th-short-tensor-copy ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-copy ((tensor tensor.short) (src tensor.int))
  (th-short-tensor-copy-int ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-copy ((tensor tensor.short) (src tensor.long))
  (th-short-tensor-copy-long ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-copy ((tensor tensor.short) (src tensor.float))
  (th-short-tensor-copy-float ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-copy ((tensor tensor.short) (src tensor.double))
  (th-short-tensor-copy-double ($handle tensor) ($handle src))
  tensor)

(defmethod tensor-copy ((tensor tensor.int) (src tensor.byte))
  (th-int-tensor-copy-byte ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-copy ((tensor tensor.int) (src tensor.char))
  (th-int-tensor-copy-char ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-copy ((tensor tensor.int) (src tensor.short))
  (th-int-tensor-copy-short ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-copy ((tensor tensor.int) (src tensor.int))
  (th-int-tensor-copy ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-copy ((tensor tensor.int) (src tensor.long))
  (th-int-tensor-copy-long ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-copy ((tensor tensor.int) (src tensor.float))
  (th-int-tensor-copy-float ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-copy ((tensor tensor.int) (src tensor.double))
  (th-int-tensor-copy-double ($handle tensor) ($handle src))
  tensor)

(defmethod tensor-copy ((tensor tensor.long) (src tensor.byte))
  (th-long-tensor-copy-byte ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-copy ((tensor tensor.long) (src tensor.char))
  (th-long-tensor-copy-char ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-copy ((tensor tensor.long) (src tensor.short))
  (th-long-tensor-copy-short ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-copy ((tensor tensor.long) (src tensor.int))
  (th-long-tensor-copy-int ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-copy ((tensor tensor.long) (src tensor.long))
  (th-long-tensor-copy ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-copy ((tensor tensor.long) (src tensor.float))
  (th-long-tensor-copy-float ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-copy ((tensor tensor.long) (src tensor.double))
  (th-long-tensor-copy-double ($handle tensor) ($handle src))
  tensor)

(defmethod tensor-copy ((tensor tensor.float) (src tensor.byte))
  (th-float-tensor-copy-byte ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-copy ((tensor tensor.float) (src tensor.char))
  (th-float-tensor-copy-char ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-copy ((tensor tensor.float) (src tensor.short))
  (th-float-tensor-copy-short ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-copy ((tensor tensor.float) (src tensor.int))
  (th-float-tensor-copy-int ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-copy ((tensor tensor.float) (src tensor.long))
  (th-float-tensor-copy-long ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-copy ((tensor tensor.float) (src tensor.float))
  (th-float-tensor-copy ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-copy ((tensor tensor.float) (src tensor.double))
  (th-float-tensor-copy-double ($handle tensor) ($handle src))
  tensor)

(defmethod tensor-copy ((tensor tensor.double) (src tensor.byte))
  (th-double-tensor-copy-byte ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-copy ((tensor tensor.double) (src tensor.char))
  (th-double-tensor-copy-char ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-copy ((tensor tensor.double) (src tensor.short))
  (th-double-tensor-copy-short ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-copy ((tensor tensor.double) (src tensor.int))
  (th-double-tensor-copy-int ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-copy ((tensor tensor.double) (src tensor.long))
  (th-double-tensor-copy-long ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-copy ((tensor tensor.double) (src tensor.float))
  (th-double-tensor-copy-float ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-copy ((tensor tensor.double) (src tensor.double))
  (th-double-tensor-copy ($handle tensor) ($handle src))
  tensor)

(defmethod tensor-random ((tensor tensor.byte) &optional generator)
  (th-byte-tensor-random ($handle tensor)
                         ($handle (or generator *generator*)))
  tensor)
(defmethod tensor-random ((tensor tensor.char) &optional generator)
  (th-char-tensor-random ($handle tensor)
                         ($handle (or generator *generator*)))
  tensor)
(defmethod tensor-random ((tensor tensor.short) &optional generator)
  (th-short-tensor-random ($handle tensor)
                          ($handle (or generator *generator*)))
  tensor)
(defmethod tensor-random ((tensor tensor.int) &optional generator)
  (th-int-tensor-random ($handle tensor)
                        ($handle (or generator *generator*)))
  tensor)
(defmethod tensor-random ((tensor tensor.long) &optional generator)
  (th-long-tensor-random ($handle tensor)
                         ($handle (or generator *generator*)))
  tensor)
(defmethod tensor-random ((tensor tensor.float) &optional generator)
  (th-float-tensor-random ($handle tensor)
                          ($handle (or generator *generator*)))
  tensor)
(defmethod tensor-random ((tensor tensor.double) &optional generator)
  (th-double-tensor-random ($handle tensor)
                           ($handle (or generator *generator*)))
  tensor)

(defun tensor.byte-random (&rest sizes)
  (let ((x (apply #'tensor.byte sizes)))
    (tensor-random x)))
(defun tensor.char-random (&rest sizes)
  (let ((x (apply #'tensor.char sizes)))
    (tensor-random x)))
(defun tensor.short-random (&rest sizes)
  (let ((x (apply #'tensor.short sizes)))
    (tensor-random x)))
(defun tensor.int-random (&rest sizes)
  (let ((x (apply #'tensor.int sizes)))
    (tensor-random x)))
(defun tensor.long-random (&rest sizes)
  (let ((x (apply #'tensor.long sizes)))
    (tensor-random x)))
(defun tensor.float-random (&rest sizes)
  (let ((x (apply #'tensor.float sizes)))
    (tensor-random x)))
(defun tensor.double-random (&rest sizes)
  (let ((x (apply #'tensor.double sizes)))
    (tensor-random x)))

(defun coerce-to-long (v) (coerce v 'integer))

(defmethod tensor-clamped-random ((tensor tensor.byte) min max &optional generator)
  (th-byte-tensor-clamped-random ($handle tensor)
                                 ($handle (or generator *generator*))
                                 (coerce-to-long min)
                                 (coerce-to-long max))
  tensor)
(defmethod tensor-clamped-random ((tensor tensor.char) min max &optional generator)
  (th-char-tensor-clamped-random ($handle tensor)
                                 ($handle (or generator *generator*))
                                 (coerce-to-long min)
                                 (coerce-to-long max))
  tensor)
(defmethod tensor-clamped-random ((tensor tensor.short) min max &optional generator)
  (th-short-tensor-clamped-random ($handle tensor)
                                  ($handle (or generator *generator*))
                                  (coerce-to-long min)
                                  (coerce-to-long max))
  tensor)
(defmethod tensor-clamped-random ((tensor tensor.int) min max &optional generator)
  (th-int-tensor-clamped-random ($handle tensor)
                                ($handle (or generator *generator*))
                                (coerce-to-long min)
                                (coerce-to-long max))
  tensor)
(defmethod tensor-clamped-random ((tensor tensor.long) min max &optional generator)
  (th-long-tensor-clamped-random ($handle tensor)
                                 ($handle (or generator *generator*))
                                 (coerce-to-long min)
                                 (coerce-to-long max))
  tensor)
(defmethod tensor-clamped-random ((tensor tensor.float) min max &optional generator)
  (th-float-tensor-clamped-random ($handle tensor)
                                  ($handle (or generator *generator*))
                                  (coerce-to-long min)
                                  (coerce-to-long max))
  tensor)
(defmethod tensor-clamped-random ((tensor tensor.double) min max &optional generator)
  (th-double-tensor-clamped-random ($handle tensor)
                                   ($handle (or generator *generator*))
                                   (coerce-to-long min)
                                   (coerce-to-long max))
  tensor)

(defmethod tensor-capped-random ((tensor tensor.byte) max &optional generator)
  (th-byte-tensor-capped-random ($handle tensor)
                                ($handle (or generator *generator*))
                                (coerce-to-long max))
  tensor)
(defmethod tensor-capped-random ((tensor tensor.char) max &optional generator)
  (th-char-tensor-capped-random ($handle tensor)
                                ($handle (or generator *generator*))
                                (coerce-to-long max))
  tensor)
(defmethod tensor-capped-random ((tensor tensor.short) max &optional generator)
  (th-short-tensor-capped-random ($handle tensor)
                                 ($handle (or generator *generator*))
                                 (coerce-to-long max))
  tensor)
(defmethod tensor-capped-random ((tensor tensor.int) max &optional generator)
  (th-int-tensor-capped-random ($handle tensor)
                               ($handle (or generator *generator*))
                               (coerce-to-long max))
  tensor)
(defmethod tensor-capped-random ((tensor tensor.long) max &optional generator)
  (th-long-tensor-capped-random ($handle tensor)
                                ($handle (or generator *generator*))
                                (coerce-to-long max))
  tensor)
(defmethod tensor-capped-random ((tensor tensor.float) max &optional generator)
  (th-float-tensor-capped-random ($handle tensor)
                                 ($handle (or generator *generator*))
                                 (coerce-to-long max))
  tensor)
(defmethod tensor-capped-random ((tensor tensor.double) max &optional generator)
  (th-double-tensor-capped-random ($handle tensor)
                                  ($handle (or generator *generator*))
                                  (coerce-to-long max))
  tensor)

(defun coerce-to-prob (p) (coerce p 'double-float))

(defmethod tensor-geometric ((tensor tensor.byte) p &optional generator)
  (th-byte-tensor-geometric ($handle tensor) ($handle (or generator *generator*))
                            (coerce-to-prob p))
  tensor)
(defmethod tensor-geometric ((tensor tensor.char) p &optional generator)
  (th-char-tensor-geometric ($handle tensor) ($handle (or generator *generator*))
                            (coerce-to-prob p))
  tensor)
(defmethod tensor-geometric ((tensor tensor.short) p &optional generator)
  (th-short-tensor-geometric ($handle tensor) ($handle (or generator *generator*))
                             (coerce-to-prob p))
  tensor)
(defmethod tensor-geometric ((tensor tensor.int) p &optional generator)
  (th-int-tensor-geometric ($handle tensor) ($handle (or generator *generator*))
                           (coerce-to-prob p))
  tensor)
(defmethod tensor-geometric ((tensor tensor.long) p &optional generator)
  (th-long-tensor-geometric ($handle tensor) ($handle (or generator *generator*))
                            (coerce-to-prob p))
  tensor)
(defmethod tensor-geometric ((tensor tensor.float) p &optional generator)
  (th-float-tensor-geometric ($handle tensor) ($handle (or generator *generator*))
                             (coerce-to-prob p))
  tensor)
(defmethod tensor-geometric ((tensor tensor.double) p &optional generator)
  (th-double-tensor-geometric ($handle tensor) ($handle (or generator *generator*))
                              (coerce-to-prob p))
  tensor)

(defmethod tensor-bernoulli ((tensor tensor.byte) (p number) &optional generator)
  (if (zerop (tensor-n-element tensor)) (tensor-resize tensor '(1)))
  (th-byte-tensor-bernoulli ($handle tensor) ($handle (or generator *generator*))
                            (coerce-to-prob p))
  tensor)
(defmethod tensor-bernoulli ((tensor tensor.char) (p number) &optional generator)
  (if (zerop (tensor-n-element tensor)) (tensor-resize tensor '(1)))
  (th-char-tensor-bernoulli ($handle tensor) ($handle (or generator *generator*))
                            (coerce-to-prob p))
  tensor)
(defmethod tensor-bernoulli ((tensor tensor.short) (p number) &optional generator)
  (if (zerop (tensor-n-element tensor)) (tensor-resize tensor '(1)))
  (th-short-tensor-bernoulli ($handle tensor) ($handle (or generator *generator*))
                             (coerce-to-prob p))
  tensor)
(defmethod tensor-bernoulli ((tensor tensor.int) (p number) &optional generator)
  (if (zerop (tensor-n-element tensor)) (tensor-resize tensor '(1)))
  (th-int-tensor-bernoulli ($handle tensor) ($handle (or generator *generator*))
                           (coerce-to-prob p))
  tensor)
(defmethod tensor-bernoulli ((tensor tensor.long) (p number) &optional generator)
  (if (zerop (tensor-n-element tensor)) (tensor-resize tensor '(1)))
  (th-long-tensor-bernoulli ($handle tensor) ($handle (or generator *generator*))
                            (coerce-to-prob p))
  tensor)
(defmethod tensor-bernoulli ((tensor tensor.float) (p number) &optional generator)
  (if (zerop (tensor-n-element tensor)) (tensor-resize tensor '(1)))
  (th-float-tensor-bernoulli ($handle tensor) ($handle (or generator *generator*))
                             (coerce-to-prob p))
  tensor)
(defmethod tensor-bernoulli ((tensor tensor.double) (p number) &optional generator)
  (if (zerop (tensor-n-element tensor)) (tensor-resize tensor '(1)))
  (th-double-tensor-bernoulli ($handle tensor) ($handle (or generator *generator*))
                              (coerce-to-prob p))
  tensor)

(defmethod tensor-bernoulli ((tensor tensor.byte) (p tensor.float) &optional generator)
  (tensor-resize-as tensor p)
  (th-byte-tensor-bernoulli-float-tensor ($handle tensor)
                                         ($handle (or generator *generator*))
                                         ($handle p))
  tensor)
(defmethod tensor-bernoulli ((tensor tensor.char) (p tensor.float) &optional generator)
  (tensor-resize-as tensor p)
  (th-char-tensor-bernoulli-float-tensor ($handle tensor)
                                         ($handle (or generator *generator*))
                                         ($handle p))
  tensor)
(defmethod tensor-bernoulli ((tensor tensor.short) (p tensor.float) &optional generator)
  (tensor-resize-as tensor p)
  (th-short-tensor-bernoulli-float-tensor ($handle tensor)
                                          ($handle (or generator *generator*))
                                          ($handle p))
  tensor)
(defmethod tensor-bernoulli ((tensor tensor.int) (p tensor.float) &optional generator)
  (tensor-resize-as tensor p)
  (th-int-tensor-bernoulli-float-tensor ($handle tensor)
                                        ($handle (or generator *generator*))
                                        ($handle p))
  tensor)
(defmethod tensor-bernoulli ((tensor tensor.long) (p tensor.float) &optional generator)
  (tensor-resize-as tensor p)
  (th-long-tensor-bernoulli-float-tensor ($handle tensor)
                                         ($handle (or generator *generator*))
                                         ($handle p))
  tensor)
(defmethod tensor-bernoulli ((tensor tensor.float) (p tensor.float) &optional generator)
  (tensor-resize-as tensor p)
  (th-float-tensor-bernoulli-float-tensor ($handle tensor)
                                          ($handle (or generator *generator*))
                                          ($handle p))
  tensor)
(defmethod tensor-bernoulli ((tensor tensor.double) (p tensor.float) &optional generator)
  (tensor-resize-as tensor p)
  (th-double-tensor-bernoulli-float-tensor ($handle tensor)
                                           ($handle (or generator *generator*))
                                           ($handle p))
  tensor)

(defmethod tensor-bernoulli ((tensor tensor.byte) (p tensor.double) &optional generator)
  (tensor-resize-as tensor p)
  (th-byte-tensor-bernoulli-double-tensor ($handle tensor)
                                          ($handle (or generator *generator*))
                                          ($handle p))
  tensor)
(defmethod tensor-bernoulli ((tensor tensor.char) (p tensor.double) &optional generator)
  (tensor-resize-as tensor p)
  (th-char-tensor-bernoulli-double-tensor ($handle tensor)
                                          ($handle (or generator *generator*))
                                          ($handle p))
  tensor)
(defmethod tensor-bernoulli ((tensor tensor.short) (p tensor.double) &optional generator)
  (tensor-resize-as tensor p)
  (th-short-tensor-bernoulli-double-tensor ($handle tensor)
                                           ($handle (or generator *generator*))
                                           ($handle p))
  tensor)
(defmethod tensor-bernoulli ((tensor tensor.int) (p tensor.double) &optional generator)
  (tensor-resize-as tensor p)
  (th-int-tensor-bernoulli-double-tensor ($handle tensor)
                                         ($handle (or generator *generator*))
                                         ($handle p))
  tensor)
(defmethod tensor-bernoulli ((tensor tensor.long) (p tensor.double) &optional generator)
  (tensor-resize-as tensor p)
  (th-long-tensor-bernoulli-double-tensor ($handle tensor)
                                          ($handle (or generator *generator*))
                                          ($handle p))
  tensor)
(defmethod tensor-bernoulli ((tensor tensor.float) (p tensor.double) &optional generator)
  (tensor-resize-as tensor p)
  (th-float-tensor-bernoulli-double-tensor ($handle tensor)
                                           ($handle (or generator *generator*))
                                           ($handle p))
  tensor)
(defmethod tensor-bernoulli ((tensor tensor.double) (p tensor.double) &optional generator)
  (tensor-resize-as tensor p)
  (th-double-tensor-bernoulli-double-tensor ($handle tensor)
                                            ($handle (or generator *generator*))
                                            ($handle p))
  tensor)

(defmethod tensor-uniform ((tensor tensor.float) a b &optional generator)
  (th-float-tensor-uniform ($handle tensor) ($handle (or generator *generator*))
                           (tensor-acoerce tensor a)
                           (tensor-acoerce tensor b))
  tensor)
(defmethod tensor-uniform ((tensor tensor.double) a b &optional generator)
  (th-double-tensor-uniform ($handle tensor) ($handle (or generator *generator*))
                            (tensor-acoerce tensor a)
                            (tensor-acoerce tensor b))
  tensor)

(defmethod tensor-normal ((tensor tensor.float) (mean number) (stdev number) &optional generator)
  (th-float-tensor-normal ($handle tensor) ($handle (or generator *generator*))
                          (tensor-acoerce tensor mean)
                          (tensor-acoerce tensor stdev))
  tensor)
(defmethod tensor-normal ((tensor tensor.double) (mean number) (stdev number) &optional generator)
  (th-double-tensor-normal ($handle tensor) ($handle (or generator *generator*))
                           (tensor-acoerce tensor mean)
                           (tensor-acoerce tensor stdev))
  tensor)

(defmethod tensor-normal ((tensor tensor.float) (mean tensor.float) (stdev number)
                          &optional generator)
  (th-float-tensor-normal-means ($handle tensor)
                                ($handle (or generator *generator*))
                                ($handle mean)
                                (tensor-acoerce tensor stdev))
  tensor)
(defmethod tensor-normal ((tensor tensor.double) (mean tensor.double) (stdev number)
                          &optional generator)
  (th-double-tensor-normal-means ($handle tensor)
                                 ($handle (or generator *generator*))
                                 ($handle mean)
                                 (tensor-acoerce tensor stdev))
  tensor)

(defmethod tensor-normal ((tensor tensor.float) (mean tensor.float) (stdev tensor.float)
                          &optional generator)
  (th-float-tensor-normal-means-stddevs ($handle tensor)
                                        ($handle (or generator *generator*))
                                        ($handle mean)
                                        ($handle stdev))
  tensor)
(defmethod tensor-normal ((tensor tensor.double) (mean tensor.double) (stdev tensor.double)
                          &optional generator)
  (th-double-tensor-normal-means-stddevs ($handle tensor)
                                         ($handle (or generator *generator*))
                                         ($handle mean)
                                         ($handle stdev))
  tensor)

(defmethod tensor-exponential ((tensor tensor.float) lam &optional generator)
  (th-float-tensor-exponential ($handle tensor) ($handle (or generator *generator*))
                               (tensor-acoerce tensor lam))
  tensor)
(defmethod tensor-exponential ((tensor tensor.double) lam &optional generator)
  (th-double-tensor-exponential ($handle tensor) ($handle (or generator *generator*))
                                (tensor-acoerce tensor lam))
  tensor)

(defmethod tensor-cauchy ((tensor tensor.float) median sigma &optional generator)
  (th-float-tensor-cauchy ($handle tensor) ($handle (or generator *generator*))
                          (tensor-acoerce tensor median)
                          (tensor-acoerce tensor sigma))
  tensor)
(defmethod tensor-cauchy ((tensor tensor.double) median sigma &optional generator)
  (th-double-tensor-cauchy ($handle tensor) ($handle (or generator *generator*))
                           (tensor-acoerce tensor median)
                           (tensor-acoerce tensor sigma))
  tensor)

(defmethod tensor-log-normal ((tensor tensor.float) mean stdev &optional generator)
  (th-float-tensor-log-normal ($handle tensor) ($handle (or generator *generator*))
                              (tensor-acoerce tensor mean)
                              (tensor-acoerce tensor stdev))
  tensor)
(defmethod tensor-log-normal ((tensor tensor.double) mean stdev &optional generator)
  (th-double-tensor-log-normal ($handle tensor) ($handle (or generator *generator*))
                               (tensor-acoerce tensor mean)
                               (tensor-acoerce tensor stdev))
  tensor)

(defmethod tensor-multinomial ((tensor tensor.long) (pdist tensor.float) nsample replacement
                               &optional generator)
  (th-float-tensor-multinomial ($handle tensor)
                               ($handle (or generator *generator*))
                               ($handle pdist)
                               nsample
                               (if replacement 1 0))
  tensor)
(defmethod tensor-multinomial ((tensor tensor.long) (pdist tensor.double) nsample replacement
                               &optional generator)
  (th-double-tensor-multinomial ($handle tensor)
                                ($handle (or generator *generator*))
                                ($handle pdist)
                                nsample
                                (if replacement 1 0))
  tensor)

(defmethod tensor-multinomial-alias-setup ((pdist tensor.float) (J tensor.long) (q tensor.float))
  (th-float-tensor-multinomial-alias-setup ($handle pdist)
                                           ($handle J)
                                           ($handle q))
  pdist)
(defmethod tensor-multinomial-alias-setup ((pdist tensor.double) (J tensor.long) (q tensor.double))
  (th-double-tensor-multinomial-alias-setup ($handle pdist)
                                            ($handle J)
                                            ($handle q))
  pdist)

(defmethod tensor-multinomial-alias-draw ((tensor tensor.float) (J tensor.long) (q tensor.float)
                                          &optional generator)
  (th-float-tensor-multinomial-alias-draw ($handle tensor)
                                          ($handle (or generator *generator*))
                                          ($handle J)
                                          ($handle q))
  tensor)
(defmethod tensor-multinomial-alias-draw ((tensor tensor.double) (J tensor.long) (q tensor.double)
                                          &optional generator)
  (th-double-tensor-multinomial-alias-draw ($handle tensor)
                                           ($handle (or generator *generator*))
                                           ($handle J)
                                           ($handle q))
  tensor)

(defmethod tensor-fill ((tensor tensor.byte) value)
  (th-byte-tensor-fill ($handle tensor) (tensor-coerce tensor value))
  tensor)
(defmethod tensor-fill ((tensor tensor.char) value)
  (th-char-tensor-fill ($handle tensor) (tensor-coerce tensor value))
  tensor)
(defmethod tensor-fill ((tensor tensor.short) value)
  (th-short-tensor-fill ($handle tensor) (tensor-coerce tensor value))
  tensor)
(defmethod tensor-fill ((tensor tensor.int) value)
  (th-int-tensor-fill ($handle tensor) (tensor-coerce tensor value))
  tensor)
(defmethod tensor-fill ((tensor tensor.long) value)
  (th-long-tensor-fill ($handle tensor) (tensor-coerce tensor value))
  tensor)
(defmethod tensor-fill ((tensor tensor.float) value)
  (th-float-tensor-fill ($handle tensor) (tensor-coerce tensor value))
  tensor)
(defmethod tensor-fill ((tensor tensor.double) value)
  (th-double-tensor-fill ($handle tensor) (tensor-coerce tensor value))
  tensor)

(defmethod tensor-zero ((tensor tensor.byte))
  (th-byte-tensor-zero ($handle tensor)) tensor)
(defmethod tensor-zero ((tensor tensor.char))
  (th-char-tensor-zero ($handle tensor)) tensor)
(defmethod tensor-zero ((tensor tensor.short))
  (th-short-tensor-zero ($handle tensor)) tensor)
(defmethod tensor-zero ((tensor tensor.int))
  (th-int-tensor-zero ($handle tensor)) tensor)
(defmethod tensor-zero ((tensor tensor.long))
  (th-long-tensor-zero ($handle tensor)) tensor)
(defmethod tensor-zero ((tensor tensor.float))
  (th-float-tensor-zero ($handle tensor)) tensor)
(defmethod tensor-zero ((tensor tensor.double))
  (th-double-tensor-zero ($handle tensor)) tensor)

(defmethod tensor-masked-fill ((tensor tensor.byte) (mask tensor.byte) value)
  (th-byte-tensor-masked-fill ($handle tensor)
                              ($handle mask)
                              (tensor-coerce tensor value))
  tensor)
(defmethod tensor-masked-fill ((tensor tensor.char) (mask tensor.byte) value)
  (th-char-tensor-masked-fill ($handle tensor)
                              ($handle mask)
                              (tensor-coerce tensor value))
  tensor)
(defmethod tensor-masked-fill ((tensor tensor.short) (mask tensor.byte) value)
  (th-short-tensor-masked-fill ($handle tensor)
                               ($handle mask)
                               (tensor-coerce tensor value))
  tensor)
(defmethod tensor-masked-fill ((tensor tensor.int) (mask tensor.byte) value)
  (th-int-tensor-masked-fill ($handle tensor)
                             ($handle mask)
                             (tensor-coerce tensor value))
  tensor)
(defmethod tensor-masked-fill ((tensor tensor.long) (mask tensor.byte) value)
  (th-long-tensor-masked-fill ($handle tensor)
                              ($handle mask)
                              (tensor-coerce tensor value))
  tensor)
(defmethod tensor-masked-fill ((tensor tensor.float) (mask tensor.byte) value)
  (th-float-tensor-masked-fill ($handle tensor)
                               ($handle mask)
                               (tensor-coerce tensor value))
  tensor)
(defmethod tensor-masked-fill ((tensor tensor.double) (mask tensor.byte) value)
  (th-double-tensor-masked-fill ($handle tensor)
                                ($handle mask)
                                (tensor-coerce tensor value))
  tensor)

(defmethod tensor-masked-copy ((tensor tensor.byte) (mask tensor.byte) (src tensor.byte))
  (th-byte-tensor-masked-copy ($handle tensor)
                              ($handle mask)
                              ($handle src))
  tensor)
(defmethod tensor-masked-copy ((tensor tensor.char) (mask tensor.byte) (src tensor.char))
  (th-char-tensor-masked-copy ($handle tensor)
                              ($handle mask)
                              ($handle src))
  tensor)
(defmethod tensor-masked-copy ((tensor tensor.short) (mask tensor.byte) (src tensor.short))
  (th-short-tensor-masked-copy ($handle tensor)
                               ($handle mask)
                               ($handle src))
  tensor)
(defmethod tensor-masked-copy ((tensor tensor.int) (mask tensor.byte) (src tensor.int))
  (th-int-tensor-masked-copy ($handle tensor)
                             ($handle mask)
                             ($handle src))
  tensor)
(defmethod tensor-masked-copy ((tensor tensor.long) (mask tensor.byte) (src tensor.long))
  (th-long-tensor-masked-copy ($handle tensor)
                              ($handle mask)
                              ($handle src))
  tensor)
(defmethod tensor-masked-copy ((tensor tensor.float) (mask tensor.byte) (src tensor.float))
  (th-float-tensor-masked-copy ($handle tensor)
                               ($handle mask)
                               ($handle src))
  tensor)
(defmethod tensor-masked-copy ((tensor tensor.double) (mask tensor.byte) (src tensor.double))
  (th-double-tensor-masked-copy ($handle tensor)
                                ($handle mask)
                                ($handle src))
  tensor)

(defmethod tensor-masked-select ((tensor tensor.byte) (mask tensor.byte) (src tensor.byte))
  (th-byte-tensor-masked-select ($handle tensor)
                                ($handle src)
                                ($handle mask))
  tensor)
(defmethod tensor-masked-select ((tensor tensor.char) (mask tensor.byte) (src tensor.char))
  (th-char-tensor-masked-select ($handle tensor)
                                ($handle src)
                                ($handle mask))
  tensor)
(defmethod tensor-masked-select ((tensor tensor.short) (mask tensor.byte) (src tensor.short))
  (th-short-tensor-masked-select ($handle tensor)
                                 ($handle src)
                                 ($handle mask))
  tensor)
(defmethod tensor-masked-select ((tensor tensor.int) (mask tensor.byte) (src tensor.int))
  (th-int-tensor-masked-select ($handle tensor)
                               ($handle src)
                               ($handle mask))
  tensor)
(defmethod tensor-masked-select ((tensor tensor.long) (mask tensor.byte) (src tensor.long))
  (th-long-tensor-masked-select ($handle tensor)
                                ($handle src)
                                ($handle mask))
  tensor)
(defmethod tensor-masked-select ((tensor tensor.float) (mask tensor.byte) (src tensor.float))
  (th-float-tensor-masked-select ($handle tensor)
                                 ($handle src)
                                 ($handle mask))
  tensor)
(defmethod tensor-masked-select ((tensor tensor.double) (mask tensor.byte) (src tensor.double))
  (th-double-tensor-masked-select ($handle tensor)
                                  ($handle src)
                                  ($handle mask))
  tensor)

(defmethod tensor-non-zero ((tensor tensor.byte) &optional indices)
  (let ((indices (or indices (long-tensor))))
    (th-byte-tensor-nonzero ($handle indices)
                            ($handle tensor))
    indices))
(defmethod tensor-non-zero ((tensor tensor.char) &optional indices)
  (let ((indices (or indices (long-tensor))))
    (th-char-tensor-nonzero ($handle indices)
                            ($handle tensor))
    indices))
(defmethod tensor-non-zero ((tensor tensor.short) &optional indices)
  (let ((indices (or indices (long-tensor))))
    (th-short-tensor-nonzero ($handle indices)
                             ($handle tensor))
    indices))
(defmethod tensor-non-zero ((tensor tensor.int) &optional indices)
  (let ((indices (or indices (long-tensor))))
    (th-int-tensor-nonzero ($handle indices)
                           ($handle tensor))
    indices))
(defmethod tensor-non-zero ((tensor tensor.long) &optional indices)
  (let ((indices (or indices (long-tensor))))
    (th-long-tensor-nonzero ($handle indices)
                            ($handle tensor))
    indices))
(defmethod tensor-non-zero ((tensor tensor.float) &optional indices)
  (let ((indices (or indices (long-tensor))))
    (th-float-tensor-nonzero ($handle indices)
                             ($handle tensor))
    indices))
(defmethod tensor-non-zero ((tensor tensor.double) &optional indices)
  (let ((indices (or indices (long-tensor))))
    (th-double-tensor-nonzero ($handle indices)
                              ($handle tensor))
    indices))

(defmethod tensor-index-select ((tensor tensor.byte) (src tensor.byte) dim (index tensor.long))
  (th-byte-tensor-index-select ($handle tensor)
                               ($handle src)
                               dim
                               ($handle index))
  tensor)
(defmethod tensor-index-select ((tensor tensor.char) (src tensor.char) dim (index tensor.long))
  (th-char-tensor-index-select ($handle tensor)
                               ($handle src)
                               dim
                               ($handle index))
  tensor)
(defmethod tensor-index-select ((tensor tensor.short) (src tensor.short) dim (index tensor.long))
  (th-short-tensor-index-select ($handle tensor)
                                ($handle src)
                                dim
                                ($handle index))
  tensor)
(defmethod tensor-index-select ((tensor tensor.int) (src tensor.int) dim (index tensor.long))
  (th-int-tensor-index-select ($handle tensor)
                              ($handle src)
                              dim
                              ($handle index))
  tensor)
(defmethod tensor-index-select ((tensor tensor.long) (src tensor.long) dim (index tensor.long))
  (th-long-tensor-index-select ($handle tensor)
                               ($handle src)
                               dim
                               ($handle index))
  tensor)
(defmethod tensor-index-select ((tensor tensor.float) (src tensor.float) dim (index tensor.long))
  (th-float-tensor-index-select ($handle tensor)
                                ($handle src)
                                dim
                                ($handle index))
  tensor)
(defmethod tensor-index-select ((tensor tensor.double) (src tensor.double) dim (index tensor.long))
  (th-double-tensor-index-select ($handle tensor)
                                 ($handle src)
                                 dim
                                 ($handle index))
  tensor)

(defmethod tensor-index-copy ((tensor tensor.byte) (src tensor.byte) dim (index tensor.long))
  (th-byte-tensor-index-copy ($handle tensor)
                             dim
                             ($handle index)
                             ($handle src))
  tensor)
(defmethod tensor-index-copy ((tensor tensor.char) (src tensor.char) dim (index tensor.long))
  (th-char-tensor-index-copy ($handle tensor)
                             dim
                             ($handle index)
                             ($handle src))
  tensor)
(defmethod tensor-index-copy ((tensor tensor.short) (src tensor.short) dim (index tensor.long))
  (th-short-tensor-index-copy ($handle tensor)
                              dim
                              ($handle index)
                              ($handle src))
  tensor)
(defmethod tensor-index-copy ((tensor tensor.int) (src tensor.int) dim (index tensor.long))
  (th-int-tensor-index-copy ($handle tensor)
                            dim
                            ($handle index)
                            ($handle src))
  tensor)
(defmethod tensor-index-copy ((tensor tensor.long) (src tensor.long) dim (index tensor.long))
  (th-long-tensor-index-copy ($handle tensor)
                             dim
                             ($handle index)
                             ($handle src))
  tensor)
(defmethod tensor-index-copy ((tensor tensor.float) (src tensor.float) dim (index tensor.long))
  (th-float-tensor-index-copy ($handle tensor)
                              dim
                              ($handle index)
                              ($handle src))
  tensor)
(defmethod tensor-index-copy ((tensor tensor.double) (src tensor.double) dim (index tensor.long))
  (th-double-tensor-index-copy ($handle tensor)
                               dim
                               ($handle index)
                               ($handle src))
  tensor)

(defmethod tensor-index-add ((tensor tensor.byte) (src tensor.byte) dim (index tensor.long))
  (th-byte-tensor-index-add ($handle tensor)
                            dim
                            ($handle index)
                            ($handle src))
  tensor)
(defmethod tensor-index-add ((tensor tensor.char) (src tensor.char) dim (index tensor.long))
  (th-char-tensor-index-add ($handle tensor)
                            dim
                            ($handle index)
                            ($handle src))
  tensor)
(defmethod tensor-index-add ((tensor tensor.short) (src tensor.short) dim (index tensor.long))
  (th-short-tensor-index-add ($handle tensor)
                             dim
                             ($handle index)
                             ($handle src))
  tensor)
(defmethod tensor-index-add ((tensor tensor.int) (src tensor.int) dim (index tensor.long))
  (th-int-tensor-index-add ($handle tensor)
                           dim
                           ($handle index)
                           ($handle src))
  tensor)
(defmethod tensor-index-add ((tensor tensor.long) (src tensor.long) dim (index tensor.long))
  (th-long-tensor-index-add ($handle tensor)
                            dim
                            ($handle index)
                            ($handle src))
  tensor)
(defmethod tensor-index-add ((tensor tensor.float) (src tensor.float) dim (index tensor.long))
  (th-float-tensor-index-add ($handle tensor)
                             dim
                             ($handle index)
                             ($handle src))
  tensor)
(defmethod tensor-index-add ((tensor tensor.double) (src tensor.double) dim (index tensor.long))
  (th-double-tensor-index-add ($handle tensor)
                              dim
                              ($handle index)
                              ($handle src))
  tensor)

(defmethod tensor-index-fill ((tensor tensor.byte) value dim (index tensor.long))
  (th-byte-tensor-index-fill ($handle tensor)
                             dim
                             ($handle index)
                             (tensor-coerce tensor value))
  tensor)
(defmethod tensor-index-fill ((tensor tensor.char) value dim (index tensor.long))
  (th-char-tensor-index-fill ($handle tensor)
                             dim
                             ($handle index)
                             (tensor-coerce tensor value))
  tensor)
(defmethod tensor-index-fill ((tensor tensor.short) value dim (index tensor.long))
  (th-short-tensor-index-fill ($handle tensor)
                              dim
                              ($handle index)
                              (tensor-coerce tensor value))
  tensor)
(defmethod tensor-index-fill ((tensor tensor.int) value dim (index tensor.long))
  (th-int-tensor-index-fill ($handle tensor)
                            dim
                            ($handle index)
                            (tensor-coerce tensor value))
  tensor)
(defmethod tensor-index-fill ((tensor tensor.long) value dim (index tensor.long))
  (th-long-tensor-index-fill ($handle tensor)
                             dim
                             ($handle index)
                             (tensor-coerce tensor value))
  tensor)
(defmethod tensor-index-fill ((tensor tensor.float) value dim (index tensor.long))
  (th-float-tensor-index-fill ($handle tensor)
                              dim
                              ($handle index)
                              (tensor-coerce tensor value))
  tensor)
(defmethod tensor-index-fill ((tensor tensor.double) value dim (index tensor.long))
  (th-double-tensor-index-fill ($handle tensor)
                               dim
                               ($handle index)
                               (tensor-coerce tensor value))
  tensor)

(defmethod tensor-gather ((tensor tensor.byte) (src tensor.byte) dim (index tensor.long))
  (th-byte-tensor-gather ($handle tensor)
                         ($handle src)
                         dim
                         ($handle index))
  tensor)
(defmethod tensor-gather ((tensor tensor.char) (src tensor.char) dim (index tensor.long))
  (th-char-tensor-gather ($handle tensor)
                         ($handle src)
                         dim
                         ($handle index))
  tensor)
(defmethod tensor-gather ((tensor tensor.short) (src tensor.short) dim (index tensor.long))
  (th-short-tensor-gather ($handle tensor)
                          ($handle src)
                          dim
                          ($handle index))
  tensor)
(defmethod tensor-gather ((tensor tensor.int) (src tensor.int) dim (index tensor.long))
  (th-int-tensor-gather ($handle tensor)
                        ($handle src)
                        dim
                        ($handle index))
  tensor)
(defmethod tensor-gather ((tensor tensor.long) (src tensor.long) dim (index tensor.long))
  (th-long-tensor-gather ($handle tensor)
                         ($handle src)
                         dim
                         ($handle index))
  tensor)
(defmethod tensor-gather ((tensor tensor.float) (src tensor.float) dim (index tensor.long))
  (th-float-tensor-gather ($handle tensor)
                          ($handle src)
                          dim
                          ($handle index))
  tensor)
(defmethod tensor-gather ((tensor tensor.double) (src tensor.double) dim (index tensor.long))
  (th-double-tensor-gather ($handle tensor)
                           ($handle src)
                           dim
                           ($handle index))
  tensor)

(defmethod tensor-scatter ((tensor tensor.byte) (src tensor.byte) dim (index tensor.long))
  (th-byte-tensor-scatter ($handle tensor)
                          dim
                          ($handle index)
                          ($handle src))
  tensor)
(defmethod tensor-scatter ((tensor tensor.char) (src tensor.char) dim (index tensor.long))
  (th-char-tensor-scatter ($handle tensor)
                          dim
                          ($handle index)
                          ($handle src))
  tensor)
(defmethod tensor-scatter ((tensor tensor.short) (src tensor.short) dim (index tensor.long))
  (th-short-tensor-scatter ($handle tensor)
                           dim
                           ($handle index)
                           ($handle src))
  tensor)
(defmethod tensor-scatter ((tensor tensor.int) (src tensor.int) dim (index tensor.long))
  (th-int-tensor-scatter ($handle tensor)
                         dim
                         ($handle index)
                         ($handle src))
  tensor)
(defmethod tensor-scatter ((tensor tensor.long) (src tensor.long) dim (index tensor.long))
  (th-long-tensor-scatter ($handle tensor)
                          dim
                          ($handle index)
                          ($handle src))
  tensor)
(defmethod tensor-scatter ((tensor tensor.float) (src tensor.float) dim (index tensor.long))
  (th-float-tensor-scatter ($handle tensor)
                           dim
                           ($handle index)
                           ($handle src))
  tensor)
(defmethod tensor-scatter ((tensor tensor.double) (src tensor.double) dim (index tensor.long))
  (th-double-tensor-scatter ($handle tensor)
                            dim
                            ($handle index)
                            ($handle src))
  tensor)

(defmethod tensor-scatter-add ((tensor tensor.byte) (src tensor.byte) dim (index tensor.long))
  (th-byte-tensor-scatter-add ($handle tensor)
                              dim
                              ($handle index)
                              ($handle src))
  tensor)
(defmethod tensor-scatter-add ((tensor tensor.char) (src tensor.char) dim (index tensor.long))
  (th-char-tensor-scatter-add ($handle tensor)
                              dim
                              ($handle index)
                              ($handle src))
  tensor)
(defmethod tensor-scatter-add ((tensor tensor.short) (src tensor.short) dim (index tensor.long))
  (th-short-tensor-scatter-add ($handle tensor)
                               dim
                               ($handle index)
                               ($handle src))
  tensor)
(defmethod tensor-scatter-add ((tensor tensor.int) (src tensor.int) dim (index tensor.long))
  (th-int-tensor-scatter-add ($handle tensor)
                             dim
                             ($handle index)
                             ($handle src))
  tensor)
(defmethod tensor-scatter-add ((tensor tensor.long) (src tensor.long) dim (index tensor.long))
  (th-long-tensor-scatter-add ($handle tensor)
                              dim
                              ($handle index)
                              ($handle src))
  tensor)
(defmethod tensor-scatter-add ((tensor tensor.float) (src tensor.float) dim (index tensor.long))
  (th-float-tensor-scatter-add ($handle tensor)
                               dim
                               ($handle index)
                               ($handle src))
  tensor)
(defmethod tensor-scatter-add ((tensor tensor.double) (src tensor.double) dim (index tensor.long))
  (th-double-tensor-scatter-add ($handle tensor)
                                dim
                                ($handle index)
                                ($handle src))
  tensor)

(defmethod tensor-scatter-fill ((tensor tensor.byte) value dim (index tensor.long))
  (th-byte-tensor-scatter-fill ($handle tensor)
                               dim
                               ($handle index)
                               (tensor-coerce tensor value))
  tensor)
(defmethod tensor-scatter-fill ((tensor tensor.char) value dim (index tensor.long))
  (th-char-tensor-scatter-fill ($handle tensor)
                               dim
                               ($handle index)
                               (tensor-coerce tensor value))
  tensor)
(defmethod tensor-scatter-fill ((tensor tensor.short) value dim (index tensor.long))
  (th-short-tensor-scatter-fill ($handle tensor)
                                dim
                                ($handle index)
                                (tensor-coerce tensor value))
  tensor)
(defmethod tensor-scatter-fill ((tensor tensor.int) value dim (index tensor.long))
  (th-int-tensor-scatter-fill ($handle tensor)
                              dim
                              ($handle index)
                              (tensor-coerce tensor value))
  tensor)
(defmethod tensor-scatter-fill ((tensor tensor.long) value dim (index tensor.long))
  (th-long-tensor-scatter-fill ($handle tensor)
                               dim
                               ($handle index)
                               (tensor-coerce tensor value))
  tensor)
(defmethod tensor-scatter-fill ((tensor tensor.float) value dim (index tensor.long))
  (th-float-tensor-scatter-fill ($handle tensor)
                                dim
                                ($handle index)
                                (tensor-coerce tensor value))
  tensor)
(defmethod tensor-scatter-fill ((tensor tensor.double) value dim (index tensor.long))
  (th-double-tensor-scatter-fill ($handle tensor)
                                 dim
                                 ($handle index)
                                 (tensor-coerce tensor value))
  tensor)

(defmethod tensor-dot ((tensor1 tensor.byte) (tensor2 tensor.byte))
  (th-byte-tensor-dot ($handle tensor1) ($handle tensor2)))
(defmethod tensor-dot ((tensor1 tensor.char) (tensor2 tensor.char))
  (th-char-tensor-dot ($handle tensor1) ($handle tensor2)))
(defmethod tensor-dot ((tensor1 tensor.short) (tensor2 tensor.short))
  (th-short-tensor-dot ($handle tensor1) ($handle tensor2)))
(defmethod tensor-dot ((tensor1 tensor.int) (tensor2 tensor.int))
  (th-int-tensor-dot ($handle tensor1) ($handle tensor2)))
(defmethod tensor-dot ((tensor1 tensor.long) (tensor2 tensor.long))
  (th-long-tensor-dot ($handle tensor1) ($handle tensor2)))
(defmethod tensor-dot ((tensor1 tensor.float) (tensor2 tensor.float))
  (th-float-tensor-dot ($handle tensor1) ($handle tensor2)))
(defmethod tensor-dot ((tensor1 tensor.double) (tensor2 tensor.double))
  (th-double-tensor-dot ($handle tensor1) ($handle tensor2)))

(defmethod tensor-min-all ((tensor tensor.byte))
  (th-byte-tensor-min-all ($handle tensor)))
(defmethod tensor-min-all ((tensor tensor.char))
  (th-char-tensor-min-all ($handle tensor)))
(defmethod tensor-min-all ((tensor tensor.short))
  (th-short-tensor-min-all ($handle tensor)))
(defmethod tensor-min-all ((tensor tensor.int))
  (th-int-tensor-min-all ($handle tensor)))
(defmethod tensor-min-all ((tensor tensor.long))
  (th-long-tensor-min-all ($handle tensor)))
(defmethod tensor-min-all ((tensor tensor.float))
  (th-float-tensor-min-all ($handle tensor)))
(defmethod tensor-min-all ((tensor tensor.double))
  (th-double-tensor-min-all ($handle tensor)))

(defmethod tensor-max-all ((tensor tensor.byte))
  (th-byte-tensor-max-all ($handle tensor)))
(defmethod tensor-max-all ((tensor tensor.char))
  (th-char-tensor-max-all ($handle tensor)))
(defmethod tensor-max-all ((tensor tensor.short))
  (th-short-tensor-max-all ($handle tensor)))
(defmethod tensor-max-all ((tensor tensor.int))
  (th-int-tensor-max-all ($handle tensor)))
(defmethod tensor-max-all ((tensor tensor.long))
  (th-long-tensor-max-all ($handle tensor)))
(defmethod tensor-max-all ((tensor tensor.float))
  (th-float-tensor-max-all ($handle tensor)))
(defmethod tensor-max-all ((tensor tensor.double))
  (th-double-tensor-max-all ($handle tensor)))

(defmethod tensor-median-all ((tensor tensor.byte))
  (th-byte-tensor-median-all ($handle tensor)))
(defmethod tensor-median-all ((tensor tensor.char))
  (th-char-tensor-median-all ($handle tensor)))
(defmethod tensor-median-all ((tensor tensor.short))
  (th-short-tensor-median-all ($handle tensor)))
(defmethod tensor-median-all ((tensor tensor.int))
  (th-int-tensor-median-all ($handle tensor)))
(defmethod tensor-median-all ((tensor tensor.long))
  (th-long-tensor-median-all ($handle tensor)))
(defmethod tensor-median-all ((tensor tensor.float))
  (th-float-tensor-median-all ($handle tensor)))
(defmethod tensor-median-all ((tensor tensor.double))
  (th-double-tensor-median-all ($handle tensor)))

(defmethod tensor-sum-all ((tensor tensor.byte))
  (th-byte-tensor-sum-all ($handle tensor)))
(defmethod tensor-sum-all ((tensor tensor.char))
  (th-char-tensor-sum-all ($handle tensor)))
(defmethod tensor-sum-all ((tensor tensor.short))
  (th-short-tensor-sum-all ($handle tensor)))
(defmethod tensor-sum-all ((tensor tensor.int))
  (th-int-tensor-sum-all ($handle tensor)))
(defmethod tensor-sum-all ((tensor tensor.long))
  (th-long-tensor-sum-all ($handle tensor)))
(defmethod tensor-sum-all ((tensor tensor.float))
  (th-float-tensor-sum-all ($handle tensor)))
(defmethod tensor-sum-all ((tensor tensor.double))
  (th-double-tensor-sum-all ($handle tensor)))

(defmethod tensor-prd-all ((tensor tensor.byte))
  (th-byte-tensor-prod-all ($handle tensor)))
(defmethod tensor-prd-all ((tensor tensor.char))
  (th-char-tensor-prod-all ($handle tensor)))
(defmethod tensor-prd-all ((tensor tensor.short))
  (th-short-tensor-prod-all ($handle tensor)))
(defmethod tensor-prd-all ((tensor tensor.int))
  (th-int-tensor-prod-all ($handle tensor)))
(defmethod tensor-prd-all ((tensor tensor.long))
  (th-long-tensor-prod-all ($handle tensor)))
(defmethod tensor-prd-all ((tensor tensor.float))
  (th-float-tensor-prod-all ($handle tensor)))
(defmethod tensor-prd-all ((tensor tensor.double))
  (th-double-tensor-prod-all ($handle tensor)))

(defmethod tensor-neg ((tensor tensor.short) (src tensor.short))
  (th-short-tensor-neg ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-neg ((tensor tensor.int) (src tensor.int))
  (th-int-tensor-neg ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-neg ((tensor tensor.long) (src tensor.long))
  (th-long-tensor-neg ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-neg ((tensor tensor.float) (src tensor.float))
  (th-float-tensor-neg ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-neg ((tensor tensor.double) (src tensor.double))
  (th-double-tensor-neg ($handle tensor) ($handle src))
  tensor)

(defmethod tensor-cinv ((tensor tensor.float) (src tensor.float))
  (th-float-tensor-cinv ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-cinv ((tensor tensor.double) (src tensor.double))
  (th-double-tensor-cinv ($handle tensor) ($handle src))
  tensor)

(defmethod tensor-add ((tensor tensor.byte) (src tensor.byte) (value number))
  (th-byte-tensor-add ($handle tensor)
                      ($handle src)
                      (tensor-coerce src value))
  tensor)
(defmethod tensor-add ((tensor tensor.char) (src tensor.char) (value number))
  (th-char-tensor-add ($handle tensor)
                      ($handle src)
                      (tensor-coerce src value))
  tensor)
(defmethod tensor-add ((tensor tensor.short) (src tensor.short) (value number))
  (th-short-tensor-add ($handle tensor)
                       ($handle src)
                       (tensor-coerce src value))
  tensor)
(defmethod tensor-add ((tensor tensor.int) (src tensor.int) (value number))
  (th-int-tensor-add ($handle tensor)
                     ($handle src)
                     (tensor-coerce src value))
  tensor)
(defmethod tensor-add ((tensor tensor.long) (src tensor.long) (value number))
  (th-long-tensor-add ($handle tensor)
                      ($handle src)
                      (tensor-coerce src value))
  tensor)
(defmethod tensor-add ((tensor tensor.float) (src tensor.float) (value number))
  (th-float-tensor-add ($handle tensor)
                       ($handle src)
                       (tensor-coerce src value))
  tensor)
(defmethod tensor-add ((tensor tensor.double) (src tensor.double) (value number))
  (th-double-tensor-add ($handle tensor)
                        ($handle src)
                        (tensor-coerce src value))
  tensor)

(defmethod tensor-sub ((tensor tensor.byte) (src tensor.byte) (value number))
  (th-byte-tensor-sub ($handle tensor)
                      ($handle src)
                      (tensor-coerce src value))
  tensor)
(defmethod tensor-sub ((tensor tensor.char) (src tensor.char) (value number))
  (th-char-tensor-sub ($handle tensor)
                      ($handle src)
                      (tensor-coerce src value))
  tensor)
(defmethod tensor-sub ((tensor tensor.short) (src tensor.short) (value number))
  (th-short-tensor-sub ($handle tensor)
                       ($handle src)
                       (tensor-coerce src value))
  tensor)
(defmethod tensor-sub ((tensor tensor.int) (src tensor.int) (value number))
  (th-int-tensor-sub ($handle tensor)
                     ($handle src)
                     (tensor-coerce src value))
  tensor)
(defmethod tensor-sub ((tensor tensor.long) (src tensor.long) (value number))
  (th-long-tensor-sub ($handle tensor)
                      ($handle src)
                      (tensor-coerce src value))
  tensor)
(defmethod tensor-sub ((tensor tensor.float) (src tensor.float) (value number))
  (th-float-tensor-sub ($handle tensor)
                       ($handle src)
                       (tensor-coerce src value))
  tensor)
(defmethod tensor-sub ((tensor tensor.double) (src tensor.double) (value number))
  (th-double-tensor-sub ($handle tensor)
                        ($handle src)
                        (tensor-coerce src value))
  tensor)

(defmethod tensor-mul ((tensor tensor.byte) (src tensor.byte) (value number))
  (th-byte-tensor-mul ($handle tensor)
                      ($handle src)
                      (tensor-coerce src value))
  tensor)
(defmethod tensor-mul ((tensor tensor.char) (src tensor.char) (value number))
  (th-char-tensor-mul ($handle tensor)
                      ($handle src)
                      (tensor-coerce src value))
  tensor)
(defmethod tensor-mul ((tensor tensor.short) (src tensor.short) (value number))
  (th-short-tensor-mul ($handle tensor)
                       ($handle src)
                       (tensor-coerce src value))
  tensor)
(defmethod tensor-mul ((tensor tensor.int) (src tensor.int) (value number))
  (th-int-tensor-mul ($handle tensor)
                     ($handle src)
                     (tensor-coerce src value))
  tensor)
(defmethod tensor-mul ((tensor tensor.long) (src tensor.long) (value number))
  (th-long-tensor-mul ($handle tensor)
                      ($handle src)
                      (tensor-coerce src value))
  tensor)
(defmethod tensor-mul ((tensor tensor.float) (src tensor.float) (value number))
  (th-float-tensor-mul ($handle tensor)
                       ($handle src)
                       (tensor-coerce src value))
  tensor)
(defmethod tensor-mul ((tensor tensor.double) (src tensor.double) (value number))
  (th-double-tensor-mul ($handle tensor)
                        ($handle src)
                        (tensor-coerce src value))
  tensor)

(defmethod tensor-div ((tensor tensor.byte) (src tensor.byte) (value number))
  (th-byte-tensor-div ($handle tensor)
                      ($handle src)
                      (tensor-coerce src value))
  tensor)
(defmethod tensor-div ((tensor tensor.char) (src tensor.char) (value number))
  (th-char-tensor-div ($handle tensor)
                      ($handle src)
                      (tensor-coerce src value))
  tensor)
(defmethod tensor-div ((tensor tensor.short) (src tensor.short) (value number))
  (th-short-tensor-div ($handle tensor)
                       ($handle src)
                       (tensor-coerce src value))
  tensor)
(defmethod tensor-div ((tensor tensor.int) (src tensor.int) (value number))
  (th-int-tensor-div ($handle tensor)
                     ($handle src)
                     (tensor-coerce src value))
  tensor)
(defmethod tensor-div ((tensor tensor.long) (src tensor.long) (value number))
  (th-long-tensor-div ($handle tensor)
                      ($handle src)
                      (tensor-coerce src value))
  tensor)
(defmethod tensor-div ((tensor tensor.float) (src tensor.float) (value number))
  (th-float-tensor-div ($handle tensor)
                       ($handle src)
                       (tensor-coerce src value))
  tensor)
(defmethod tensor-div ((tensor tensor.double) (src tensor.double) (value number))
  (th-double-tensor-div ($handle tensor)
                        ($handle src)
                        (tensor-coerce src value))
  tensor)

(defmethod tensor-mod ((tensor tensor.byte) (src tensor.byte) (value number))
  (th-byte-tensor-remainder ($handle tensor)
                            ($handle src)
                            (tensor-coerce src value))
  tensor)
(defmethod tensor-mod ((tensor tensor.char) (src tensor.char) (value number))
  (th-char-tensor-remainder ($handle tensor)
                            ($handle src)
                            (tensor-coerce src value))
  tensor)
(defmethod tensor-mod ((tensor tensor.short) (src tensor.short) (value number))
  (th-short-tensor-remainder ($handle tensor)
                             ($handle src)
                             (tensor-coerce src value))
  tensor)
(defmethod tensor-mod ((tensor tensor.int) (src tensor.int) (value number))
  (th-int-tensor-remainder ($handle tensor)
                           ($handle src)
                           (tensor-coerce src value))
  tensor)
(defmethod tensor-mod ((tensor tensor.long) (src tensor.long) (value number))
  (th-long-tensor-remainder ($handle tensor)
                            ($handle src)
                            (tensor-coerce src value))
  tensor)
(defmethod tensor-mod ((tensor tensor.float) (src tensor.float) (value number))
  (th-float-tensor-remainder ($handle tensor)
                             ($handle src)
                             (tensor-coerce src value))
  tensor)
(defmethod tensor-mod ((tensor tensor.double) (src tensor.double) (value number))
  (th-double-tensor-remainder ($handle tensor)
                              ($handle src)
                              (tensor-coerce src value))
  tensor)

(defmethod tensor-fmod ((tensor tensor.byte) (src tensor.byte) (value number))
  (th-byte-tensor-fmod ($handle tensor)
                       ($handle src)
                       (tensor-coerce src value))
  tensor)
(defmethod tensor-fmod ((tensor tensor.char) (src tensor.char) (value number))
  (th-char-tensor-fmod ($handle tensor)
                       ($handle src)
                       (tensor-coerce src value))
  tensor)
(defmethod tensor-fmod ((tensor tensor.short) (src tensor.short) (value number))
  (th-short-tensor-fmod ($handle tensor)
                        ($handle src)
                        (tensor-coerce src value))
  tensor)
(defmethod tensor-fmod ((tensor tensor.int) (src tensor.int) (value number))
  (th-int-tensor-fmod ($handle tensor)
                      ($handle src)
                      (tensor-coerce src value))
  tensor)
(defmethod tensor-fmod ((tensor tensor.long) (src tensor.long) (value number))
  (th-long-tensor-fmod ($handle tensor)
                       ($handle src)
                       (tensor-coerce src value))
  tensor)
(defmethod tensor-fmod ((tensor tensor.float) (src tensor.float) (value number))
  (th-float-tensor-fmod ($handle tensor)
                        ($handle src)
                        (tensor-coerce src value))
  tensor)
(defmethod tensor-fmod ((tensor tensor.double) (src tensor.double) (value number))
  (th-double-tensor-fmod ($handle tensor)
                         ($handle src)
                         (tensor-coerce src value))
  tensor)

(defmethod tensor-clamp ((tensor tensor.byte) (src tensor.byte) (min number) (max number))
  (th-byte-tensor-clamp ($handle tensor)
                        ($handle src)
                        (tensor-coerce src min)
                        (tensor-coerce src max))
  tensor)
(defmethod tensor-clamp ((tensor tensor.char) (src tensor.char) (min number) (max number))
  (th-char-tensor-clamp ($handle tensor)
                        ($handle src)
                        (tensor-coerce src min)
                        (tensor-coerce src max))
  tensor)
(defmethod tensor-clamp ((tensor tensor.short) (src tensor.short) (min number) (max number))
  (th-short-tensor-clamp ($handle tensor)
                         ($handle src)
                         (tensor-coerce src min)
                         (tensor-coerce src max))
  tensor)
(defmethod tensor-clamp ((tensor tensor.int) (src tensor.int) (min number) (max number))
  (th-int-tensor-clamp ($handle tensor)
                       ($handle src)
                       (tensor-coerce src min)
                       (tensor-coerce src max))
  tensor)
(defmethod tensor-clamp ((tensor tensor.long) (src tensor.long) (min number) (max number))
  (th-long-tensor-clamp ($handle tensor)
                        ($handle src)
                        (tensor-coerce src min)
                        (tensor-coerce src max))
  tensor)
(defmethod tensor-clamp ((tensor tensor.float) (src tensor.float) (min number) (max number))
  (th-float-tensor-clamp ($handle tensor)
                         ($handle src)
                         (tensor-coerce src min)
                         (tensor-coerce src max))
  tensor)
(defmethod tensor-clamp ((tensor tensor.double) (src tensor.double) (min number) (max number))
  (th-double-tensor-clamp ($handle tensor)
                          ($handle src)
                          (tensor-coerce src min)
                          (tensor-coerce src max))
  tensor)

(defmethod tensor-lshift ((tensor tensor.byte) (src tensor.byte) (value number))
  (th-byte-tensor-lshift ($handle tensor)
                         ($handle src)
                         (tensor-coerce src value))
  tensor)
(defmethod tensor-lshift ((tensor tensor.char) (src tensor.char) (value number))
  (th-char-tensor-lshift ($handle tensor)
                         ($handle src)
                         (tensor-coerce src value))
  tensor)
(defmethod tensor-lshift ((tensor tensor.short) (src tensor.short) (value number))
  (th-short-tensor-lshift ($handle tensor)
                          ($handle src)
                          (tensor-coerce src value))
  tensor)
(defmethod tensor-lshift ((tensor tensor.int) (src tensor.int) (value number))
  (th-int-tensor-lshift ($handle tensor)
                        ($handle src)
                        (tensor-coerce src value))
  tensor)
(defmethod tensor-lshift ((tensor tensor.long) (src tensor.long) (value number))
  (th-long-tensor-lshift ($handle tensor)
                         ($handle src)
                         (tensor-coerce src value))
  tensor)
(defmethod tensor-lshift ((tensor tensor.float) (src tensor.float) (value number))
  (th-float-tensor-lshift ($handle tensor)
                          ($handle src)
                          (tensor-coerce src value))
  tensor)
(defmethod tensor-lshift ((tensor tensor.double) (src tensor.double) (value number))
  (th-double-tensor-lshift ($handle tensor)
                           ($handle src)
                           (tensor-coerce src value))
  tensor)

(defmethod tensor-rshift ((tensor tensor.byte) (src tensor.byte) (value number))
  (th-byte-tensor-rshift ($handle tensor)
                         ($handle src)
                         (tensor-coerce src value))
  tensor)
(defmethod tensor-rshift ((tensor tensor.char) (src tensor.char) (value number))
  (th-char-tensor-rshift ($handle (or tensor))
                         ($handle src)
                         (tensor-coerce src value))
  tensor)
(defmethod tensor-rshift ((tensor tensor.short) (src tensor.short) (value number))
  (th-short-tensor-rshift ($handle tensor)
                          ($handle src)
                          (tensor-coerce src value))
  tensor)
(defmethod tensor-rshift ((tensor tensor.int) (src tensor.int) (value number))
  (th-int-tensor-rshift ($handle tensor)
                        ($handle src)
                        (tensor-coerce src value))
  tensor)
(defmethod tensor-rshift ((tensor tensor.long) (src tensor.long) (value number))
  (th-long-tensor-rshift ($handle tensor)
                         ($handle src)
                         (tensor-coerce src value))
  tensor)
(defmethod tensor-rshift ((tensor tensor.float) (src tensor.float) (value number))
  (th-float-tensor-rshift ($handle tensor)
                          ($handle src)
                          (tensor-coerce src value))
  tensor)
(defmethod tensor-rshift ((tensor tensor.double) (src tensor.double) (value number))
  (th-double-tensor-rshift ($handle tensor)
                           ($handle src)
                           (tensor-coerce src value))
  tensor)

(defmethod tensor-bitand ((tensor tensor.byte) (src tensor.byte) (value number))
  (th-byte-tensor-bitand ($handle tensor)
                         ($handle src)
                         (tensor-coerce src value))
  tensor)
(defmethod tensor-bitand ((tensor tensor.char) (src tensor.char) (value number))
  (th-char-tensor-bitand ($handle tensor)
                         ($handle src)
                         (tensor-coerce src value))
  tensor)
(defmethod tensor-bitand ((tensor tensor.short) (src tensor.short) (value number))
  (th-short-tensor-bitand ($handle tensor)
                          ($handle src)
                          (tensor-coerce src value))
  tensor)
(defmethod tensor-bitand ((tensor tensor.int) (src tensor.int) (value number))
  (th-int-tensor-bitand ($handle tensor)
                        ($handle src)
                        (tensor-coerce src value))
  tensor)
(defmethod tensor-bitand ((tensor tensor.long) (src tensor.long) (value number))
  (th-long-tensor-bitand ($handle tensor)
                         ($handle src)
                         (tensor-coerce src value))
  tensor)
(defmethod tensor-bitand ((tensor tensor.float) (src tensor.float) (value number))
  (th-float-tensor-bitand ($handle tensor)
                          ($handle src)
                          (tensor-coerce src value))
  tensor)
(defmethod tensor-bitand ((tensor tensor.double) (src tensor.double) (value number))
  (th-double-tensor-bitand ($handle tensor)
                           ($handle src)
                           (tensor-coerce src value))
  tensor)

(defmethod tensor-bitor ((tensor tensor.byte) (src tensor.byte) (value number))
  (th-byte-tensor-bitor ($handle tensor)
                        ($handle src)
                        (tensor-coerce src value))
  tensor)
(defmethod tensor-bitor ((tensor tensor.char) (src tensor.char) (value number))
  (th-char-tensor-bitor ($handle tensor)
                        ($handle src)
                        (tensor-coerce src value))
  tensor)
(defmethod tensor-bitor ((tensor tensor.short) (src tensor.short) (value number))
  (th-short-tensor-bitor ($handle tensor)
                         ($handle src)
                         (tensor-coerce src value))
  tensor)
(defmethod tensor-bitor ((tensor tensor.int) (src tensor.int) (value number))
  (th-int-tensor-bitor ($handle tensor)
                       ($handle src)
                       (tensor-coerce src value))
  tensor)
(defmethod tensor-bitor ((tensor tensor.long) (src tensor.long) (value number))
  (th-long-tensor-bitor ($handle tensor)
                        ($handle src)
                        (tensor-coerce src value))
  tensor)
(defmethod tensor-bitor ((tensor tensor.float) (src tensor.float) (value number))
  (th-float-tensor-bitor ($handle tensor)
                         ($handle src)
                         (tensor-coerce src value))
  tensor)
(defmethod tensor-bitor ((tensor tensor.double) (src tensor.double) (value number))
  (th-double-tensor-bitor ($handle tensor)
                          ($handle src)
                          (tensor-coerce src value))
  tensor)

(defmethod tensor-bitxor ((tensor tensor.byte) (src tensor.byte) (value number))
  (th-byte-tensor-bitxor ($handle tensor)
                         ($handle src)
                         (tensor-coerce src value))
  tensor)
(defmethod tensor-bitxor ((tensor tensor.char) (src tensor.char) (value number))
  (th-char-tensor-bitxor ($handle tensor)
                         ($handle src)
                         (tensor-coerce src value))
  tensor)
(defmethod tensor-bitxor ((tensor tensor.short) (src tensor.short) (value number))
  (th-short-tensor-bitxor ($handle tensor)
                          ($handle src)
                          (tensor-coerce src value))
  tensor)
(defmethod tensor-bitxor ((tensor tensor.int) (src tensor.int) (value number))
  (let ((tensor (or tensor (int-tensor))))
    (th-int-tensor-bitxor ($handle tensor)
                          ($handle src)
                          (tensor-coerce src value))
    tensor))
(defmethod tensor-bitxor ((tensor tensor.long) (src tensor.long) (value number))
  (th-long-tensor-bitxor ($handle tensor)
                         ($handle src)
                         (tensor-coerce src value))
  tensor)
(defmethod tensor-bitxor ((tensor tensor.float) (src tensor.float) (value number))
  (th-float-tensor-bitxor ($handle tensor)
                          ($handle src)
                          (tensor-coerce src value))
  tensor)
(defmethod tensor-bitxor ((tensor tensor.double) (src tensor.double) (value number))
  (th-double-tensor-bitxor ($handle tensor)
                           ($handle src)
                           (tensor-coerce src value))
  tensor)

(defmethod tensor-cadd ((tensor tensor.byte) (src1 tensor.byte)
                        (value number) (src2 tensor.byte))
  (th-byte-tensor-cadd ($handle tensor) ($handle src1)
                       (tensor-coerce tensor value) ($handle src2))
  tensor)
(defmethod tensor-cadd ((tensor tensor.char) (src1 tensor.char)
                        (value number) (src2 tensor.char))
  (th-char-tensor-cadd ($handle tensor) ($handle src1)
                       (tensor-coerce tensor value) ($handle src2))
  tensor)
(defmethod tensor-cadd ((tensor tensor.short) (src1 tensor.short)
                        (value number) (src2 tensor.short))
  (th-short-tensor-cadd ($handle tensor) ($handle src1)
                        (tensor-coerce tensor value) ($handle src2))
  tensor)
(defmethod tensor-cadd ((tensor tensor.int) (src1 tensor.int)
                        (value number) (src2 tensor.int))
  (th-int-tensor-cadd ($handle tensor) ($handle src1)
                      (tensor-coerce tensor value) ($handle src2))
  tensor)
(defmethod tensor-cadd ((tensor tensor.long) (src1 tensor.long)
                        (value number) (src2 tensor.long))
  (th-long-tensor-cadd ($handle tensor) ($handle src1)
                       (tensor-coerce tensor value) ($handle src2))
  tensor)
(defmethod tensor-cadd ((tensor tensor.float) (src1 tensor.float)
                        (value number) (src2 tensor.float))
  (th-float-tensor-cadd ($handle tensor) ($handle src1)
                        (tensor-coerce tensor value) ($handle src2))
  tensor)
(defmethod tensor-cadd ((tensor tensor.double) (src1 tensor.double)
                        (value number) (src2 tensor.double))
  (th-double-tensor-cadd ($handle tensor) ($handle src1)
                         (tensor-coerce tensor value) ($handle src2))
  tensor)

(defmethod tensor-csub ((tensor tensor.byte) (src1 tensor.byte)
                        (value number) (src2 tensor.byte))
  (th-byte-tensor-csub ($handle tensor) ($handle src1)
                       (tensor-coerce tensor value) ($handle src2))
  tensor)
(defmethod tensor-csub ((tensor tensor.char) (src1 tensor.char)
                        (value number) (src2 tensor.char))
  (th-char-tensor-csub ($handle tensor) ($handle src1)
                       (tensor-coerce tensor value) ($handle src2))
  tensor)
(defmethod tensor-csub ((tensor tensor.short) (src1 tensor.short)
                        (value number) (src2 tensor.short))
  (th-short-tensor-csub ($handle tensor) ($handle src1)
                        (tensor-coerce tensor value) ($handle src2))
  tensor)
(defmethod tensor-csub ((tensor tensor.int) (src1 tensor.int)
                        (value number) (src2 tensor.int))
  (th-int-tensor-csub ($handle tensor) ($handle src1)
                      (tensor-coerce tensor value) ($handle src2))
  tensor)
(defmethod tensor-csub ((tensor tensor.long) (src1 tensor.long)
                        (value number) (src2 tensor.long))
  (th-long-tensor-csub ($handle tensor) ($handle src1)
                       (tensor-coerce tensor value) ($handle src2))
  tensor)
(defmethod tensor-csub ((tensor tensor.float) (src1 tensor.float)
                        (value number) (src2 tensor.float))
  (th-float-tensor-csub ($handle tensor) ($handle src1)
                        (tensor-coerce tensor value) ($handle src2))
  tensor)
(defmethod tensor-csub ((tensor tensor.double) (src1 tensor.double)
                        (value number) (src2 tensor.double))
  (th-double-tensor-csub ($handle tensor) ($handle src1)
                         (tensor-coerce tensor value) ($handle src2))
  tensor)

(defmethod tensor-cmul ((tensor tensor.byte) (src1 tensor.byte) (src2 tensor.byte))
  (th-byte-tensor-cmul ($handle tensor) ($handle src1)
                       ($handle src2))
  tensor)
(defmethod tensor-cmul ((tensor tensor.char) (src1 tensor.char) (src2 tensor.char))
  (th-char-tensor-cmul ($handle tensor) ($handle src1)
                       ($handle src2))
  tensor)
(defmethod tensor-cmul ((tensor tensor.short) (src1 tensor.short) (src2 tensor.short))
  (th-short-tensor-cmul ($handle tensor) ($handle src1)
                        ($handle src2))
  tensor)
(defmethod tensor-cmul ((tensor tensor.int) (src1 tensor.int) (src2 tensor.int))
  (th-int-tensor-cmul ($handle tensor) ($handle src1)
                      ($handle src2))
  tensor)
(defmethod tensor-cmul ((tensor tensor.long) (src1 tensor.long) (src2 tensor.long))
  (th-long-tensor-cmul ($handle tensor) ($handle src1)
                       ($handle src2))
  tensor)
(defmethod tensor-cmul ((tensor tensor.float) (src1 tensor.float) (src2 tensor.float))
  (th-float-tensor-cmul ($handle tensor) ($handle src1)
                        ($handle src2))
  tensor)
(defmethod tensor-cmul ((tensor tensor.double) (src1 tensor.double) (src2 tensor.double))
  (th-double-tensor-cmul ($handle tensor) ($handle src1)
                         ($handle src2))
  tensor)

(defmethod tensor-cpow ((tensor tensor.byte) (src1 tensor.byte) (src2 tensor.byte))
  (th-byte-tensor-cpow ($handle tensor) ($handle src1)
                       ($handle src2))
  tensor)
(defmethod tensor-cpow ((tensor tensor.char) (src1 tensor.char) (src2 tensor.char))
  (th-char-tensor-cpow ($handle tensor) ($handle src1)
                       ($handle src2))
  tensor)
(defmethod tensor-cpow ((tensor tensor.short) (src1 tensor.short) (src2 tensor.short))
  (th-short-tensor-cpow ($handle tensor) ($handle src1)
                        ($handle src2))
  tensor)
(defmethod tensor-cpow ((tensor tensor.int) (src1 tensor.int) (src2 tensor.int))
  (th-int-tensor-cpow ($handle tensor) ($handle src1)
                      ($handle src2))
  tensor)
(defmethod tensor-cpow ((tensor tensor.long) (src1 tensor.long) (src2 tensor.long))
  (th-long-tensor-cpow ($handle tensor) ($handle src1)
                       ($handle src2))
  tensor)
(defmethod tensor-cpow ((tensor tensor.float) (src1 tensor.float) (src2 tensor.float))
  (th-float-tensor-cpow ($handle tensor) ($handle src1)
                        ($handle src2))
  tensor)
(defmethod tensor-cpow ((tensor tensor.double) (src1 tensor.double) (src2 tensor.double))
  (th-double-tensor-cpow ($handle tensor) ($handle src1)
                         ($handle src2))
  tensor)

(defmethod tensor-cdiv ((tensor tensor.byte) (src1 tensor.byte) (src2 tensor.byte))
  (th-byte-tensor-cdiv ($handle tensor) ($handle src1)
                       ($handle src2))
  tensor)
(defmethod tensor-cdiv ((tensor tensor.char) (src1 tensor.char) (src2 tensor.char))
  (th-char-tensor-cdiv ($handle tensor) ($handle src1)
                       ($handle src2))
  tensor)
(defmethod tensor-cdiv ((tensor tensor.short) (src1 tensor.short) (src2 tensor.short))
  (th-short-tensor-cdiv ($handle tensor) ($handle src1)
                        ($handle src2))
  tensor)
(defmethod tensor-cdiv ((tensor tensor.int) (src1 tensor.int) (src2 tensor.int))
  (th-int-tensor-cdiv ($handle tensor) ($handle src1)
                      ($handle src2))
  tensor)
(defmethod tensor-cdiv ((tensor tensor.long) (src1 tensor.long) (src2 tensor.long))
  (th-long-tensor-cdiv ($handle tensor) ($handle src1)
                       ($handle src2))
  tensor)
(defmethod tensor-cdiv ((tensor tensor.float) (src1 tensor.float) (src2 tensor.float))
  (th-float-tensor-cdiv ($handle tensor) ($handle src1)
                        ($handle src2))
  tensor)
(defmethod tensor-cdiv ((tensor tensor.double) (src1 tensor.double) (src2 tensor.double))
  (th-double-tensor-cdiv ($handle tensor) ($handle src1)
                         ($handle src2))
  tensor)

(defmethod tensor-clshift ((tensor tensor.byte) (src1 tensor.byte) (src2 tensor.byte))
  (th-byte-tensor-clshift ($handle tensor) ($handle src1)
                          ($handle src2))
  tensor)
(defmethod tensor-clshift ((tensor tensor.char) (src1 tensor.char) (src2 tensor.char))
  (th-char-tensor-clshift ($handle tensor) ($handle src1)
                          ($handle src2))
  tensor)
(defmethod tensor-clshift ((tensor tensor.short) (src1 tensor.short) (src2 tensor.short))
  (th-short-tensor-clshift ($handle tensor) ($handle src1)
                           ($handle src2))
  tensor)
(defmethod tensor-clshift ((tensor tensor.int) (src1 tensor.int) (src2 tensor.int))
  (th-int-tensor-clshift ($handle tensor) ($handle src1)
                         ($handle src2))
  tensor)
(defmethod tensor-clshift ((tensor tensor.long) (src1 tensor.long) (src2 tensor.long))
  (th-long-tensor-clshift ($handle tensor) ($handle src1)
                          ($handle src2))
  tensor)
(defmethod tensor-clshift ((tensor tensor.float) (src1 tensor.float) (src2 tensor.float))
  (th-float-tensor-clshift ($handle tensor) ($handle src1)
                           ($handle src2))
  tensor)
(defmethod tensor-clshift ((tensor tensor.double) (src1 tensor.double) (src2 tensor.double))
  (th-double-tensor-clshift ($handle tensor) ($handle src1)
                            ($handle src2))
  tensor)

(defmethod tensor-crshift ((tensor tensor.byte) (src1 tensor.byte) (src2 tensor.byte))
  (th-byte-tensor-crshift ($handle tensor) ($handle src1)
                          ($handle src2))
  tensor)
(defmethod tensor-crshift ((tensor tensor.char) (src1 tensor.char) (src2 tensor.char))
  (th-char-tensor-crshift ($handle tensor) ($handle src1)
                          ($handle src2))
  tensor)
(defmethod tensor-crshift ((tensor tensor.short) (src1 tensor.short) (src2 tensor.short))
  (th-short-tensor-crshift ($handle tensor) ($handle src1)
                           ($handle src2))
  tensor)
(defmethod tensor-crshift ((tensor tensor.int) (src1 tensor.int) (src2 tensor.int))
  (th-int-tensor-crshift ($handle tensor) ($handle src1)
                         ($handle src2))
  tensor)
(defmethod tensor-crshift ((tensor tensor.long) (src1 tensor.long) (src2 tensor.long))
  (th-long-tensor-crshift ($handle tensor) ($handle src1)
                          ($handle src2))
  tensor)
(defmethod tensor-crshift ((tensor tensor.float) (src1 tensor.float) (src2 tensor.float))
  (th-float-tensor-crshift ($handle tensor) ($handle src1)
                           ($handle src2))
  tensor)
(defmethod tensor-crshift ((tensor tensor.double) (src1 tensor.double) (src2 tensor.double))
  (th-double-tensor-crshift ($handle tensor) ($handle src1)
                            ($handle src2))
  tensor)

(defmethod tensor-cmod ((tensor tensor.byte) (src1 tensor.byte) (src2 tensor.byte))
  (th-byte-tensor-cremainder ($handle tensor) ($handle src1)
                             ($handle src2))
  tensor)
(defmethod tensor-cmod ((tensor tensor.char) (src1 tensor.char) (src2 tensor.char))
  (th-char-tensor-cremainder ($handle tensor) ($handle src1)
                             ($handle src2))
  tensor)
(defmethod tensor-cmod ((tensor tensor.short) (src1 tensor.short) (src2 tensor.short))
  (th-short-tensor-cremainder ($handle tensor) ($handle src1)
                              ($handle src2))
  tensor)
(defmethod tensor-cmod ((tensor tensor.int) (src1 tensor.int) (src2 tensor.int))
  (th-int-tensor-cremainder ($handle tensor) ($handle src1)
                            ($handle src2))
  tensor)
(defmethod tensor-cmod ((tensor tensor.long) (src1 tensor.long) (src2 tensor.long))
  (th-long-tensor-cremainder ($handle tensor) ($handle src1)
                             ($handle src2))
  tensor)
(defmethod tensor-cmod ((tensor tensor.float) (src1 tensor.float) (src2 tensor.float))
  (th-float-tensor-cremainder ($handle tensor) ($handle src1)
                              ($handle src2))
  tensor)
(defmethod tensor-cmod ((tensor tensor.double) (src1 tensor.double) (src2 tensor.double))
  (th-double-tensor-cremainder ($handle tensor) ($handle src1)
                               ($handle src2))
  tensor)

(defmethod tensor-cfmod ((tensor tensor.byte) (src1 tensor.byte) (src2 tensor.byte))
  (th-byte-tensor-cfmod ($handle tensor) ($handle src1)
                        ($handle src2))
  tensor)
(defmethod tensor-cfmod ((tensor tensor.char) (src1 tensor.char) (src2 tensor.char))
  (th-char-tensor-cfmod ($handle tensor) ($handle src1)
                        ($handle src2))
  tensor)
(defmethod tensor-cfmod ((tensor tensor.short) (src1 tensor.short) (src2 tensor.short))
  (th-short-tensor-cfmod ($handle tensor) ($handle src1)
                         ($handle src2))
  tensor)
(defmethod tensor-cfmod ((tensor tensor.int) (src1 tensor.int) (src2 tensor.int))
  (th-int-tensor-cfmod ($handle tensor) ($handle src1)
                       ($handle src2))
  tensor)
(defmethod tensor-cfmod ((tensor tensor.long) (src1 tensor.long) (src2 tensor.long))
  (th-long-tensor-cfmod ($handle tensor) ($handle src1)
                        ($handle src2))
  tensor)
(defmethod tensor-cfmod ((tensor tensor.float) (src1 tensor.float) (src2 tensor.float))
  (th-float-tensor-cfmod ($handle tensor) ($handle src1)
                         ($handle src2))
  tensor)
(defmethod tensor-cfmod ((tensor tensor.double) (src1 tensor.double) (src2 tensor.double))
  (th-double-tensor-cfmod ($handle tensor) ($handle src1)
                          ($handle src2))
  tensor)

(defmethod tensor-cbitand ((tensor tensor.byte) (src1 tensor.byte) (src2 tensor.byte))
  (th-byte-tensor-cbitand ($handle tensor) ($handle src1)
                          ($handle src2))
  tensor)
(defmethod tensor-cbitand ((tensor tensor.char) (src1 tensor.char) (src2 tensor.char))
  (th-char-tensor-cbitand ($handle tensor) ($handle src1)
                          ($handle src2))
  tensor)
(defmethod tensor-cbitand ((tensor tensor.short) (src1 tensor.short) (src2 tensor.short))
  (th-short-tensor-cbitand ($handle tensor) ($handle src1)
                           ($handle src2))
  tensor)
(defmethod tensor-cbitand ((tensor tensor.int) (src1 tensor.int) (src2 tensor.int))
  (th-int-tensor-cbitand ($handle tensor) ($handle src1)
                         ($handle src2))
  tensor)
(defmethod tensor-cbitand ((tensor tensor.long) (src1 tensor.long) (src2 tensor.long))
  (th-long-tensor-cbitand ($handle tensor) ($handle src1)
                          ($handle src2))
  tensor)
(defmethod tensor-cbitand ((tensor tensor.float) (src1 tensor.float) (src2 tensor.float))
  (th-float-tensor-cbitand ($handle tensor) ($handle src1)
                           ($handle src2))
  tensor)
(defmethod tensor-cbitand ((tensor tensor.double) (src1 tensor.double) (src2 tensor.double))
  (th-double-tensor-cbitand ($handle tensor) ($handle src1)
                            ($handle src2))
  tensor)

(defmethod tensor-cbitor ((tensor tensor.byte) (src1 tensor.byte) (src2 tensor.byte))
  (th-byte-tensor-cbitor ($handle tensor) ($handle src1)
                         ($handle src2))
  tensor)
(defmethod tensor-cbitor ((tensor tensor.char) (src1 tensor.char) (src2 tensor.char))
  (th-char-tensor-cbitor ($handle tensor) ($handle src1)
                         ($handle src2))
  tensor)
(defmethod tensor-cbitor ((tensor tensor.short) (src1 tensor.short) (src2 tensor.short))
  (th-short-tensor-cbitor ($handle tensor) ($handle src1)
                          ($handle src2))
  tensor)
(defmethod tensor-cbitor ((tensor tensor.int) (src1 tensor.int) (src2 tensor.int))
  (th-int-tensor-cbitor ($handle tensor) ($handle src1)
                        ($handle src2))
  tensor)
(defmethod tensor-cbitor ((tensor tensor.long) (src1 tensor.long) (src2 tensor.long))
  (th-long-tensor-cbitor ($handle tensor) ($handle src1)
                         ($handle src2))
  tensor)
(defmethod tensor-cbitor ((tensor tensor.float) (src1 tensor.float) (src2 tensor.float))
  (th-float-tensor-cbitor ($handle tensor) ($handle src1)
                          ($handle src2))
  tensor)
(defmethod tensor-cbitor ((tensor tensor.double) (src1 tensor.double) (src2 tensor.double))
  (th-double-tensor-cbitor ($handle tensor) ($handle src1)
                           ($handle src2))
  tensor)

(defmethod tensor-cbitxor ((tensor tensor.byte) (src1 tensor.byte) (src2 tensor.byte))
  (th-byte-tensor-cbitxor ($handle tensor) ($handle src1)
                          ($handle src2))
  tensor)
(defmethod tensor-cbitxor ((tensor tensor.char) (src1 tensor.char) (src2 tensor.char))
  (th-char-tensor-cbitxor ($handle tensor) ($handle src1)
                          ($handle src2))
  tensor)
(defmethod tensor-cbitxor ((tensor tensor.short) (src1 tensor.short) (src2 tensor.short))
  (th-short-tensor-cbitxor ($handle tensor) ($handle src1)
                           ($handle src2))
  tensor)
(defmethod tensor-cbitxor ((tensor tensor.int) (src1 tensor.int) (src2 tensor.int))
  (th-int-tensor-cbitxor ($handle tensor) ($handle src1)
                         ($handle src2))
  tensor)
(defmethod tensor-cbitxor ((tensor tensor.long) (src1 tensor.long) (src2 tensor.long))
  (th-long-tensor-cbitxor ($handle tensor) ($handle src1)
                          ($handle src2))
  tensor)
(defmethod tensor-cbitxor ((tensor tensor.float) (src1 tensor.float) (src2 tensor.float))
  (th-float-tensor-cbitxor ($handle tensor) ($handle src1)
                           ($handle src2))
  tensor)
(defmethod tensor-cbitxor ((tensor tensor.double) (src1 tensor.double) (src2 tensor.double))
  (th-double-tensor-cbitxor ($handle tensor) ($handle src1)
                            ($handle src2))
  tensor)

(defmethod tensor-add-cmul ((tensor tensor.byte) (src1 tensor.byte) (value number)
                            (src2 tensor.byte) (src3 tensor.byte))
  (th-byte-tensor-add-cmul ($handle tensor)
                           ($handle src1)
                           (tensor-coerce src1 value)
                           ($handle src2)
                           ($handle src3))
  tensor)
(defmethod tensor-add-cmul ((tensor tensor.char) (src1 tensor.char) (value number)
                            (src2 tensor.char) (src3 tensor.char))
  (th-char-tensor-add-cmul ($handle tensor)
                           ($handle src1)
                           (tensor-coerce src1 value)
                           ($handle src2)
                           ($handle src3))
  tensor)
(defmethod tensor-add-cmul ((tensor tensor.short) (src1 tensor.short) (value number)
                            (src2 tensor.short) (src3 tensor.short))
  (th-short-tensor-add-cmul ($handle tensor)
                            ($handle src1)
                            (tensor-coerce src1 value)
                            ($handle src2)
                            ($handle src3))
  tensor)
(defmethod tensor-add-cmul ((tensor tensor.int) (src1 tensor.int) (value number)
                            (src2 tensor.int) (src3 tensor.int))
  (th-int-tensor-add-cmul ($handle tensor)
                          ($handle src1)
                          (tensor-coerce src1 value)
                          ($handle src2)
                          ($handle src3))
  tensor)
(defmethod tensor-add-cmul ((tensor tensor.long) (src1 tensor.long) (value number)
                            (src2 tensor.long) (src3 tensor.long))
  (th-long-tensor-add-cmul ($handle tensor)
                           ($handle src1)
                           (tensor-coerce src1 value)
                           ($handle src2)
                           ($handle src3))
  tensor)
(defmethod tensor-add-cmul ((tensor tensor.float) (src1 tensor.float) (value number)
                            (src2 tensor.float) (src3 tensor.float))
  (th-float-tensor-add-cmul ($handle tensor)
                            ($handle src1)
                            (tensor-coerce src1 value)
                            ($handle src2)
                            ($handle src3))
  tensor)
(defmethod tensor-add-cmul ((tensor tensor.double) (src1 tensor.double) (value number)
                            (src2 tensor.double) (src3 tensor.double))
  (th-double-tensor-add-cmul ($handle tensor)
                             ($handle src1)
                             (tensor-coerce src1 value)
                             ($handle src2)
                             ($handle src3))
  tensor)

(defmethod tensor-add-cdiv ((tensor tensor.byte) (src1 tensor.byte) (value number)
                            (src2 tensor.byte) (src3 tensor.byte))
  (th-byte-tensor-add-cdiv ($handle tensor)
                           ($handle src1)
                           (tensor-coerce src1 value)
                           ($handle src2)
                           ($handle src3))
  tensor)
(defmethod tensor-add-cdiv ((tensor tensor.char) (src1 tensor.char) (value number)
                            (src2 tensor.char) (src3 tensor.char))
  (th-char-tensor-add-cdiv ($handle tensor)
                           ($handle src1)
                           (tensor-coerce src1 value)
                           ($handle src2)
                           ($handle src3))
  tensor)
(defmethod tensor-add-cdiv ((tensor tensor.short) (src1 tensor.short) (value number)
                            (src2 tensor.short) (src3 tensor.short))
  (th-short-tensor-add-cdiv ($handle tensor)
                            ($handle src1)
                            (tensor-coerce src1 value)
                            ($handle src2)
                            ($handle src3))
  tensor)
(defmethod tensor-add-cdiv ((tensor tensor.int) (src1 tensor.int) (value number)
                            (src2 tensor.int) (src3 tensor.int))
  (th-int-tensor-add-cdiv ($handle tensor)
                          ($handle src1)
                          (tensor-coerce src1 value)
                          ($handle src2)
                          ($handle src3))
  tensor)
(defmethod tensor-add-cdiv ((tensor tensor.long) (src1 tensor.long) (value number)
                            (src2 tensor.long) (src3 tensor.long))
  (th-long-tensor-add-cdiv ($handle tensor)
                           ($handle src1)
                           (tensor-coerce src1 value)
                           ($handle src2)
                           ($handle src3))
  tensor)
(defmethod tensor-add-cdiv ((tensor tensor.float) (src1 tensor.float) (value number)
                            (src2 tensor.float) (src3 tensor.float))
  (th-float-tensor-add-cdiv ($handle tensor)
                            ($handle src1)
                            (tensor-coerce src1 value)
                            ($handle src2)
                            ($handle src3))
  tensor)
(defmethod tensor-add-cdiv ((tensor tensor.double) (src1 tensor.double) (value number)
                            (src2 tensor.double) (src3 tensor.double))
  (th-double-tensor-add-cdiv ($handle tensor)
                             ($handle src1)
                             (tensor-coerce src1 value)
                             ($handle src2)
                             ($handle src3))
  tensor)

(defmethod tensor-add-mv ((tensor tensor.byte) (beta number) (y tensor.byte)
                          (alpha number) (A tensor.byte) (x tensor.byte))
  (th-byte-tensor-add-mv ($handle tensor)
                         (tensor-coerce y beta)
                         ($handle y)
                         (tensor-coerce y alpha)
                         ($handle A)
                         ($handle x))
  tensor)
(defmethod tensor-add-mv ((tensor tensor.char) (beta number) (y tensor.char)
                          (alpha number) (A tensor.char) (x tensor.char))
  (th-char-tensor-add-mv ($handle tensor)
                         (tensor-coerce y beta)
                         ($handle y)
                         (tensor-coerce y alpha)
                         ($handle A)
                         ($handle x))
  tensor)
(defmethod tensor-add-mv ((tensor tensor.short) (beta number) (y tensor.short)
                          (alpha number) (A tensor.short) (x tensor.short))
  (th-short-tensor-add-mv ($handle tensor)
                          (tensor-coerce y beta)
                          ($handle y)
                          (tensor-coerce y alpha)
                          ($handle A)
                          ($handle x))
  tensor)
(defmethod tensor-add-mv ((tensor tensor.int) (beta number) (y tensor.int)
                          (alpha number) (A tensor.int) (x tensor.int))
  (th-int-tensor-add-mv ($handle tensor)
                        (tensor-coerce y beta)
                        ($handle y)
                        (tensor-coerce y alpha)
                        ($handle A)
                        ($handle x))
  tensor)
(defmethod tensor-add-mv ((tensor tensor.long) (beta number) (y tensor.long)
                          (alpha number) (A tensor.long) (x tensor.long))
  (th-long-tensor-add-mv ($handle tensor)
                         (tensor-coerce y beta)
                         ($handle y)
                         (tensor-coerce y alpha)
                         ($handle A)
                         ($handle x))
  tensor)
(defmethod tensor-add-mv ((tensor tensor.float) (beta number) (y tensor.float)
                          (alpha number) (A tensor.float) (x tensor.float))
  (th-float-tensor-add-mv ($handle tensor)
                          (tensor-coerce y beta)
                          ($handle y)
                          (tensor-coerce y alpha)
                          ($handle A)
                          ($handle x))
  tensor)
(defmethod tensor-add-mv ((tensor tensor.double) (beta number) (y tensor.double)
                          (alpha number) (A tensor.double) (x tensor.double))
  (th-double-tensor-add-mv ($handle tensor)
                           (tensor-coerce y beta)
                           ($handle y)
                           (tensor-coerce y alpha)
                           ($handle A)
                           ($handle x))
  tensor)

(defmethod tensor-add-mm ((tensor tensor.byte) (beta number) (C tensor.byte)
                          (alpha number) (A tensor.byte) (B tensor.byte))
  (th-byte-tensor-add-mm ($handle tensor)
                         (tensor-coerce C beta)
                         ($handle C)
                         (tensor-coerce C alpha)
                         ($handle A)
                         ($handle B))
  tensor)
(defmethod tensor-add-mm ((tensor tensor.char) (beta number) (C tensor.char)
                          (alpha number) (A tensor.char) (B tensor.char))
  (th-char-tensor-add-mm ($handle tensor)
                         (tensor-coerce C beta)
                         ($handle C)
                         (tensor-coerce C alpha)
                         ($handle A)
                         ($handle B))
  tensor)
(defmethod tensor-add-mm ((tensor tensor.short) (beta number) (C tensor.short)
                          (alpha number) (A tensor.short) (B tensor.short))
  (th-short-tensor-add-mm ($handle tensor)
                          (tensor-coerce C beta)
                          ($handle C)
                          (tensor-coerce C alpha)
                          ($handle A)
                          ($handle B))
  tensor)
(defmethod tensor-add-mm ((tensor tensor.int) (beta number) (C tensor.int)
                          (alpha number) (A tensor.int) (B tensor.int))
  (th-int-tensor-add-mm ($handle tensor)
                        (tensor-coerce C beta)
                        ($handle C)
                        (tensor-coerce C alpha)
                        ($handle A)
                        ($handle B))
  tensor)
(defmethod tensor-add-mm ((tensor tensor.long) (beta number) (C tensor.long)
                          (alpha number) (A tensor.long) (B tensor.long))
  (th-long-tensor-add-mm ($handle tensor)
                         (tensor-coerce C beta)
                         ($handle C)
                         (tensor-coerce C alpha)
                         ($handle A)
                         ($handle B))
  tensor)
(defmethod tensor-add-mm ((tensor tensor.float) (beta number) (C tensor.float)
                          (alpha number) (A tensor.float) (B tensor.float))
  (th-float-tensor-add-mm ($handle tensor)
                          (tensor-coerce C beta)
                          ($handle C)
                          (tensor-coerce C alpha)
                          ($handle A)
                          ($handle B))
  tensor)
(defmethod tensor-add-mm ((tensor tensor.double) (beta number) (C tensor.double)
                          (alpha number) (A tensor.double) (B tensor.double))
  (th-double-tensor-add-mm ($handle tensor)
                           (tensor-coerce C beta)
                           ($handle C)
                           (tensor-coerce C alpha)
                           ($handle A)
                           ($handle B))
  tensor)

(defmethod tensor-add-r ((tensor tensor.byte) (beta number) (A tensor.byte)
                         (alpha number) (x tensor.byte) (y tensor.byte))
  (th-byte-tensor-add-r ($handle tensor)
                        (tensor-coerce A beta)
                        ($handle A)
                        (tensor-coerce A alpha)
                        ($handle x)
                        ($handle y))
  tensor)
(defmethod tensor-add-r ((tensor tensor.char) (beta number) (A tensor.char)
                         (alpha number) (x tensor.char) (y tensor.char))
  (th-char-tensor-add-r ($handle tensor)
                        (tensor-coerce A beta)
                        ($handle A)
                        (tensor-coerce A alpha)
                        ($handle x)
                        ($handle y))
  tensor)

(defmethod tensor-add-r ((tensor tensor.short) (beta number) (A tensor.short)
                         (alpha number) (x tensor.short) (y tensor.short))
  (th-short-tensor-add-r ($handle tensor)
                         (tensor-coerce A beta)
                         ($handle A)
                         (tensor-coerce A alpha)
                         ($handle x)
                         ($handle y))
  tensor)
(defmethod tensor-add-r ((tensor tensor.int) (beta number) (A tensor.int)
                         (alpha number) (x tensor.int) (y tensor.int))
  (th-int-tensor-add-r ($handle tensor)
                       (tensor-coerce A beta)
                       ($handle A)
                       (tensor-coerce A alpha)
                       ($handle x)
                       ($handle y))
  tensor)
(defmethod tensor-add-r ((tensor tensor.long) (beta number) (A tensor.long)
                         (alpha number) (x tensor.long) (y tensor.long))
  (th-long-tensor-add-r ($handle tensor)
                        (tensor-coerce A beta)
                        ($handle A)
                        (tensor-coerce A alpha)
                        ($handle x)
                        ($handle y))
  tensor)
(defmethod tensor-add-r ((tensor tensor.float) (beta number) (A tensor.float)
                         (alpha number) (x tensor.float) (y tensor.float))
  (th-float-tensor-add-r ($handle tensor)
                         (tensor-coerce A beta)
                         ($handle A)
                         (tensor-coerce A alpha)
                         ($handle x)
                         ($handle y))
  tensor)
(defmethod tensor-add-r ((tensor tensor.double) (beta number) (A tensor.double)
                         (alpha number) (x tensor.double) (y tensor.double))
  (th-double-tensor-add-r ($handle tensor)
                          (tensor-coerce A beta )
                          ($handle A)
                          (tensor-coerce A alpha)
                          ($handle x)
                          ($handle y))
  tensor)

(defmethod tensor-add-bmm ((tensor tensor.byte) (beta number) (C tensor.byte)
                           (alpha number) (A tensor.byte) (B tensor.byte))
  (th-byte-tensor-add-bmm ($handle tensor)
                          (tensor-coerce C beta)
                          ($handle C)
                          (tensor-coerce C alpha)
                          ($handle A)
                          ($handle B))
  tensor)
(defmethod tensor-add-bmm ((tensor tensor.char) (beta number) (C tensor.char)
                           (alpha number) (A tensor.char) (B tensor.char))
  (th-char-tensor-add-bmm ($handle tensor)
                          (tensor-coerce C beta)
                          ($handle C)
                          (tensor-coerce C alpha)
                          ($handle A)
                          ($handle B))
  tensor)
(defmethod tensor-add-bmm ((tensor tensor.short) (beta number) (C tensor.short)
                           (alpha number) (A tensor.short) (B tensor.short))
  (th-short-tensor-add-bmm ($handle tensor)
                           (tensor-coerce C beta)
                           ($handle C)
                           (tensor-coerce C alpha)
                           ($handle A)
                           ($handle B))
  tensor)
(defmethod tensor-add-bmm ((tensor tensor.int) (beta number) (C tensor.int)
                           (alpha number) (A tensor.int) (B tensor.int))
  (th-int-tensor-add-bmm ($handle tensor)
                         (tensor-coerce C beta)
                         ($handle C)
                         (tensor-coerce C alpha)
                         ($handle A)
                         ($handle B))
  tensor)
(defmethod tensor-add-bmm ((tensor tensor.long) (beta number) (C tensor.long)
                           (alpha number) (A tensor.long) (B tensor.long))
  (th-long-tensor-add-bmm ($handle tensor)
                          (tensor-coerce C beta)
                          ($handle C)
                          (tensor-coerce C alpha)
                          ($handle A)
                          ($handle B))
  tensor)
(defmethod tensor-add-bmm ((tensor tensor.float) (beta number) (C tensor.float)
                           (alpha number) (A tensor.float) (B tensor.float))
  (th-float-tensor-add-bmm ($handle tensor)
                           (tensor-coerce C beta)
                           ($handle C)
                           (tensor-coerce C alpha)
                           ($handle A)
                           ($handle B))
  tensor)
(defmethod tensor-add-bmm ((tensor tensor.double) (beta number) (C tensor.double)
                           (alpha number) (A tensor.double) (B tensor.double))
  (th-double-tensor-add-bmm ($handle tensor)
                            (tensor-coerce C beta)
                            ($handle C)
                            (tensor-coerce C alpha)
                            ($handle A)
                            ($handle B))
  tensor)

(defmethod tensor-badd-bmm ((tensor tensor.byte) (beta number) (C tensor.byte)
                            (alpha number) (A tensor.byte) (B tensor.byte))
  (th-byte-tensor-badd-bmm ($handle tensor)
                           (tensor-coerce C beta)
                           ($handle C)
                           (tensor-coerce C alpha)
                           ($handle A)
                           ($handle B))
  tensor)
(defmethod tensor-badd-bmm ((tensor tensor.char) (beta number) (C tensor.char)
                            (alpha number) (A tensor.char) (B tensor.char))
  (th-char-tensor-badd-bmm ($handle tensor)
                           (tensor-coerce C beta)
                           ($handle C)
                           (tensor-coerce C alpha)
                           ($handle A)
                           ($handle B))
  tensor)
(defmethod tensor-badd-bmm ((tensor tensor.short) (beta number) (C tensor.short)
                            (alpha number) (A tensor.short) (B tensor.short))
  (th-short-tensor-badd-bmm ($handle tensor)
                            (tensor-coerce C beta)
                            ($handle C)
                            (tensor-coerce C alpha)
                            ($handle A)
                            ($handle B))
  tensor)
(defmethod tensor-badd-bmm ((tensor tensor.int) (beta number) (C tensor.int)
                            (alpha number) (A tensor.int) (B tensor.int))
  (th-int-tensor-badd-bmm ($handle tensor)
                          (tensor-coerce C beta)
                          ($handle C)
                          (tensor-coerce C alpha)
                          ($handle A)
                          ($handle B))
  tensor)
(defmethod tensor-badd-bmm ((tensor tensor.long) (beta number) (C tensor.long)
                            (alpha number) (A tensor.long) (B tensor.long))
  (th-long-tensor-badd-bmm ($handle tensor)
                           (tensor-coerce C beta)
                           ($handle C)
                           (tensor-coerce C alpha)
                           ($handle A)
                           ($handle B))
  tensor)
(defmethod tensor-badd-bmm ((tensor tensor.float) (beta number) (C tensor.float)
                            (alpha number) (A tensor.float) (B tensor.float))
  (th-float-tensor-badd-bmm ($handle tensor)
                            (tensor-coerce C beta)
                            ($handle C)
                            (tensor-coerce C alpha)
                            ($handle A)
                            ($handle B))
  tensor)
(defmethod tensor-badd-bmm ((tensor tensor.double) (beta number) (C tensor.double)
                            (alpha number) (A tensor.double) (B tensor.double))
  (th-double-tensor-badd-bmm ($handle tensor)
                             (tensor-coerce C beta)
                             ($handle C)
                             (tensor-coerce C alpha)
                             ($handle A)
                             ($handle B))
  tensor)

(defmethod tensor-match ((tensor tensor.byte) (m1 tensor.byte) (m2 tensor.byte) gain)
  (th-byte-tensor-match ($handle tensor)
                        ($handle m1) ($handle m2)
                        (tensor-coerce tensor gain))
  tensor)
(defmethod tensor-match ((tensor tensor.char) (m1 tensor.char) (m2 tensor.char) gain)
  (th-char-tensor-match ($handle tensor)
                        ($handle m1) ($handle m2)
                        (tensor-coerce tensor gain))
  tensor)
(defmethod tensor-match ((tensor tensor.short) (m1 tensor.short) (m2 tensor.short) gain)
  (th-short-tensor-match ($handle tensor)
                         ($handle m1) ($handle m2)
                         (tensor-coerce tensor gain))
  tensor)
(defmethod tensor-match ((tensor tensor.int) (m1 tensor.int) (m2 tensor.int) gain)
  (th-int-tensor-match ($handle tensor)
                       ($handle m1) ($handle m2)
                       (tensor-coerce tensor gain))
  tensor)
(defmethod tensor-match ((tensor tensor.long) (m1 tensor.long) (m2 tensor.long) gain)
  (th-long-tensor-match ($handle tensor)
                        ($handle m1) ($handle m2)
                        (tensor-coerce tensor gain))
  tensor)
(defmethod tensor-match ((tensor tensor.float) (m1 tensor.float) (m2 tensor.float) gain)
  (th-float-tensor-match ($handle tensor)
                         ($handle m1) ($handle m2)
                         (tensor-coerce tensor gain))
  tensor)
(defmethod tensor-match ((tensor tensor.double) (m1 tensor.double) (m2 tensor.double) gain)
  (th-double-tensor-match ($handle tensor)
                          ($handle m1) ($handle m2)
                          (tensor-coerce tensor gain))
  tensor)

(defmethod tensor-max ((vals tensor.byte) (indices tensor.long) (src tensor.byte) dimension kd)
  (th-byte-tensor-max ($handle vals)
                      ($handle indices)
                      ($handle src)
                      dimension
                      (if kd 1 0))
  vals)
(defmethod tensor-max ((vals tensor.char) (indices tensor.long) (src tensor.char) dimension kd)
  (th-char-tensor-max ($handle vals)
                      ($handle indices)
                      ($handle src)
                      dimension
                      (if kd 1 0))
  vals)
(defmethod tensor-max ((vals tensor.short) (indices tensor.long) (src tensor.short) dimension kd)
  (th-short-tensor-max ($handle vals)
                       ($handle indices)
                       ($handle src)
                       dimension
                       (if kd 1 0))
  vals)
(defmethod tensor-max ((vals tensor.int) (indices tensor.long) (src tensor.int) dimension kd)
  (th-int-tensor-max ($handle vals)
                     ($handle indices)
                     ($handle src)
                     dimension
                     (if kd 1 0))
  vals)
(defmethod tensor-max ((vals tensor.long) (indices tensor.long) (src tensor.long) dimension kd)
  (th-long-tensor-max ($handle vals)
                      ($handle indices)
                      ($handle src)
                      dimension
                      (if kd 1 0))
  vals)
(defmethod tensor-max ((vals tensor.float) (indices tensor.long) (src tensor.float) dimension kd)
  (th-float-tensor-max ($handle vals)
                       ($handle indices)
                       ($handle src)
                       dimension
                       (if kd 1 0))
  vals)
(defmethod tensor-max ((vals tensor.double) (indices tensor.long) (src tensor.double) dimension kd)
  (th-double-tensor-max ($handle vals)
                        ($handle indices)
                        ($handle src)
                        dimension
                        (if kd 1 0))
  vals)

(defmethod tensor-min ((vals tensor.byte) (indices tensor.long) (src tensor.byte) dimension kd)
  (th-byte-tensor-min ($handle vals)
                      ($handle indices)
                      ($handle src)
                      dimension
                      (if kd 1 0))
  vals)
(defmethod tensor-min ((vals tensor.char) (indices tensor.long) (src tensor.char) dimension kd)
  (th-char-tensor-min ($handle vals)
                      ($handle indices)
                      ($handle src)
                      dimension
                      (if kd 1 0))
  vals)
(defmethod tensor-min ((vals tensor.short) (indices tensor.long) (src tensor.short) dimension kd)
  (th-short-tensor-min ($handle vals)
                       ($handle indices)
                       ($handle src)
                       dimension
                       (if kd 1 0))
  vals)
(defmethod tensor-min ((vals tensor.int) (indices tensor.long) (src tensor.int) dimension kd)
  (th-int-tensor-min ($handle vals)
                     ($handle indices)
                     ($handle src)
                     dimension
                     (if kd 1 0))
  vals)
(defmethod tensor-min ((vals tensor.long) (indices tensor.long) (src tensor.long) dimension kd)
  (th-long-tensor-min ($handle vals)
                      ($handle indices)
                      ($handle src)
                      dimension
                      (if kd 1 0))
  vals)
(defmethod tensor-min ((vals tensor.float) (indices tensor.long) (src tensor.float) dimension kd)
  (th-float-tensor-min ($handle vals)
                       ($handle indices)
                       ($handle src)
                       dimension
                       (if kd 1 0))
  vals)
(defmethod tensor-min ((vals tensor.double) (indices tensor.long) (src tensor.double) dimension kd)
  (th-double-tensor-min ($handle vals)
                        ($handle indices)
                        ($handle src)
                        dimension
                        (if kd 1 0))
  vals)

(defmethod tensor-kth-value ((vals tensor.byte) (indices tensor.long) (src tensor.byte)
                             k dimension keepdim)
  (th-byte-tensor-kth-value ($handle vals)
                            ($handle indices)
                            ($handle src)
                            k dimension (if keepdim 1 0))
  vals)
(defmethod tensor-kth-value ((vals tensor.byte) (indices list) (src tensor.byte)
                             k dimension keepdim)
  (let ((idx (long-tensor-with indices)))
    (th-byte-tensor-kth-value ($handle vals)
                              ($handle idx)
                              ($handle src)
                              k dimension (if keepdim 1 0)))
  vals)
(defmethod tensor-kth-value ((vals tensor.char) (indices tensor.long) (src tensor.char)
                             k dimension keepdim)
  (th-char-tensor-kth-value ($handle vals)
                            ($handle indices)
                            ($handle src)
                            k dimension (if keepdim 1 0))
  vals)
(defmethod tensor-kth-value ((vals tensor.char) (indices list) (src tensor.char)
                             k dimension keepdim)
  (let ((idx (long-tensor-with indices)))
    (th-char-tensor-kth-value ($handle vals)
                              ($handle idx)
                              ($handle src)
                              k dimension (if keepdim 1 0)))
  vals)
(defmethod tensor-kth-value ((vals tensor.short) (indices tensor.long) (src tensor.short)
                             k dimension keepdim)
  (th-short-tensor-kth-value ($handle vals)
                             ($handle indices)
                             ($handle src)
                             k dimension (if keepdim 1 0))
  vals)
(defmethod tensor-kth-value ((vals tensor.short) (indices list) (src tensor.short)
                             k dimension keepdim)
  (let ((idx (long-tensor-with indices)))
    (th-short-tensor-kth-value ($handle vals)
                               ($handle idx)
                               ($handle src)
                               k dimension (if keepdim 1 0)))
  vals)
(defmethod tensor-kth-value ((vals tensor.int) (indices tensor.long) (src tensor.int)
                             k dimension keepdim)
  (th-int-tensor-kth-value ($handle vals)
                           ($handle indices)
                           ($handle src)
                           k dimension (if keepdim 1 0))
  vals)
(defmethod tensor-kth-value ((vals tensor.int) (indices list) (src tensor.int)
                             k dimension keepdim)
  (let ((idx (long-tensor-with indices)))
    (th-int-tensor-kth-value ($handle vals)
                             ($handle idx)
                             ($handle src)
                             k dimension (if keepdim 1 0)))
  vals)
(defmethod tensor-kth-value ((vals tensor.long) (indices tensor.long) (src tensor.long)
                             k dimension keepdim)
  (th-long-tensor-kth-value ($handle vals)
                            ($handle indices)
                            ($handle src)
                            k dimension (if keepdim 1 0))
  vals)
(defmethod tensor-kth-value ((vals tensor.long) (indices list) (src tensor.long)
                             k dimension keepdim)
  (let ((idx (long-tensor-with indices)))
    (th-long-tensor-kth-value ($handle vals)
                              ($handle idx)
                              ($handle src)
                              k dimension (if keepdim 1 0)))
  vals)
(defmethod tensor-kth-value ((vals tensor.float) (indices tensor.long) (src tensor.float)
                             k dimension keepdim)
  (th-float-tensor-kth-value ($handle vals)
                             ($handle indices)
                             ($handle src)
                             k dimension (if keepdim 1 0))
  vals)
(defmethod tensor-kth-value ((vals tensor.float) (indices list) (src tensor.float)
                             k dimension keepdim)
  (let ((idx (long-tensor-with indices)))
    (th-float-tensor-kth-value ($handle vals)
                               ($handle idx)
                               ($handle src)
                               k dimension (if keepdim 1 0)))
  vals)
(defmethod tensor-kth-value ((vals tensor.double) (indices tensor.long) (src tensor.double)
                             k dimension keepdim)
  (th-double-tensor-kth-value ($handle vals)
                              ($handle indices)
                              ($handle src)
                              k dimension (if keepdim 1 0))
  vals)
(defmethod tensor-kth-value ((vals tensor.double) (indices list) (src tensor.double)
                             k dimension keepdim)
  (let ((idx (long-tensor-with indices)))
    (th-double-tensor-kth-value ($handle vals)
                                ($handle idx)
                                ($handle src)
                                k dimension (if keepdim 1 0)))
  vals)

(defmethod tensor-mode ((vals tensor.byte) (indices tensor.long) (src tensor.byte)
                        dimension keepdim)
  (th-byte-tensor-mode ($handle vals)
                       ($handle indices)
                       ($handle src)
                       dimension (if keepdim 1 0))
  vals)
(defmethod tensor-mode ((vals tensor.byte) (indices list) (src tensor.byte)
                        dimension keepdim)
  (let ((idx (long-tensor-with indices)))
    (th-byte-tensor-mode ($handle vals)
                         ($handle idx)
                         ($handle src)
                         dimension (if keepdim 1 0)))
  vals)
(defmethod tensor-mode ((vals tensor.char) (indices tensor.long) (src tensor.char)
                        dimension keepdim)
  (th-char-tensor-mode ($handle vals)
                       ($handle indices)
                       ($handle src)
                       dimension (if keepdim 1 0))
  vals)
(defmethod tensor-mode ((vals tensor.char) (indices list) (src tensor.char)
                        dimension keepdim)
  (let ((idx (long-tensor-with indices)))
    (th-char-tensor-mode ($handle vals)
                         ($handle idx)
                         ($handle src)
                         dimension (if keepdim 1 0)))
  vals)
(defmethod tensor-mode ((vals tensor.short) (indices tensor.long) (src tensor.short)
                        dimension keepdim)
  (th-short-tensor-mode ($handle vals)
                        ($handle indices)
                        ($handle src)
                        dimension (if keepdim 1 0))
  vals)
(defmethod tensor-mode ((vals tensor.short) (indices list) (src tensor.short)
                        dimension keepdim)
  (let ((idx (long-tensor-with indices)))
    (th-short-tensor-mode ($handle vals)
                          ($handle idx)
                          ($handle src)
                          dimension (if keepdim 1 0)))
  vals)
(defmethod tensor-mode ((vals tensor.int) (indices tensor.long) (src tensor.int)
                        dimension keepdim)
  (th-int-tensor-mode ($handle vals)
                      ($handle indices)
                      ($handle src)
                      dimension (if keepdim 1 0))
  vals)
(defmethod tensor-mode ((vals tensor.int) (indices list) (src tensor.int)
                        dimension keepdim)
  (let ((idx (long-tensor-with indices)))
    (th-int-tensor-mode ($handle vals)
                        ($handle idx)
                        ($handle src)
                        dimension (if keepdim 1 0)))
  vals)
(defmethod tensor-mode ((vals tensor.long) (indices tensor.long) (src tensor.long)
                        dimension keepdim)
  (th-long-tensor-mode ($handle vals)
                       ($handle indices)
                       ($handle src)
                       dimension (if keepdim 1 0))
  vals)
(defmethod tensor-mode ((vals tensor.long) (indices list) (src tensor.long)
                        dimension keepdim)
  (let ((idx (long-tensor-with indices)))
    (th-long-tensor-mode ($handle vals)
                         ($handle idx)
                         ($handle src)
                         dimension (if keepdim 1 0)))
  vals)
(defmethod tensor-mode ((vals tensor.float) (indices tensor.long) (src tensor.float)
                        dimension keepdim)
  (th-float-tensor-mode ($handle vals)
                        ($handle indices)
                        ($handle src)
                        dimension (if keepdim 1 0))
  vals)
(defmethod tensor-mode ((vals tensor.float) (indices list) (src tensor.float)
                        dimension keepdim)
  (let ((idx (long-tensor-with indices)))
    (th-float-tensor-mode ($handle vals)
                          ($handle idx)
                          ($handle src)
                          dimension (if keepdim 1 0)))
  vals)
(defmethod tensor-mode ((vals tensor.double) (indices tensor.long) (src tensor.double)
                        dimension keepdim)
  (th-double-tensor-mode ($handle vals)
                         ($handle indices)
                         ($handle src)
                         dimension (if keepdim 1 0))
  vals)
(defmethod tensor-mode ((vals tensor.double) (indices list) (src tensor.double)
                        dimension keepdim)
  (let ((idx (long-tensor-with indices)))
    (th-double-tensor-mode ($handle vals)
                           ($handle idx)
                           ($handle src)
                           dimension (if keepdim 1 0)))
  vals)

(defmethod tensor-median ((vals tensor.byte) (indices tensor.long) (src tensor.byte)
                          dimension keepdim)
  (th-byte-tensor-median ($handle vals)
                         ($handle indices)
                         ($handle src)
                         dimension (if keepdim 1 0))
  vals)
(defmethod tensor-median ((vals tensor.byte) (indices list) (src tensor.byte)
                          dimension keepdim)
  (let ((idx (long-tensor-with indices)))
    (th-byte-tensor-median ($handle vals)
                           ($handle idx)
                           ($handle src)
                           dimension (if keepdim 1 0)))
  vals)
(defmethod tensor-median ((vals tensor.char) (indices tensor.long) (src tensor.char)
                          dimension keepdim)
  (th-char-tensor-median ($handle vals)
                         ($handle indices)
                         ($handle src)
                         dimension (if keepdim 1 0))
  vals)
(defmethod tensor-median ((vals tensor.char) (indices list) (src tensor.char)
                          dimension keepdim)
  (let ((idx (long-tensor-with indices)))
    (th-char-tensor-median ($handle vals)
                           ($handle idx)
                           ($handle src)
                           dimension (if keepdim 1 0)))
  vals)
(defmethod tensor-median ((vals tensor.short) (indices tensor.long) (src tensor.short)
                          dimension keepdim)
  (th-short-tensor-median ($handle vals)
                          ($handle indices)
                          ($handle src)
                          dimension (if keepdim 1 0))
  vals)
(defmethod tensor-median ((vals tensor.short) (indices list) (src tensor.short)
                          dimension keepdim)
  (let ((idx (long-tensor-with indices)))
    (th-short-tensor-median ($handle vals)
                            ($handle idx)
                            ($handle src)
                            dimension (if keepdim 1 0)))
  vals)
(defmethod tensor-median ((vals tensor.int) (indices tensor.long) (src tensor.int)
                          dimension keepdim)
  (th-int-tensor-median ($handle vals)
                        ($handle indices)
                        ($handle src)
                        dimension (if keepdim 1 0))
  vals)
(defmethod tensor-median ((vals tensor.int) (indices list) (src tensor.int)
                          dimension keepdim)
  (let ((idx (long-tensor-with indices)))
    (th-int-tensor-median ($handle vals)
                          ($handle idx)
                          ($handle src)
                          dimension (if keepdim 1 0)))
  vals)
(defmethod tensor-median ((vals tensor.long) (indices tensor.long) (src tensor.long)
                          dimension keepdim)
  (th-long-tensor-median ($handle vals)
                         ($handle indices)
                         ($handle src)
                         dimension (if keepdim 1 0))
  vals)
(defmethod tensor-median ((vals tensor.long) (indices list) (src tensor.long)
                          dimension keepdim)
  (let ((idx (long-tensor-with indices)))
    (th-long-tensor-median ($handle vals)
                           ($handle idx)
                           ($handle src)
                           dimension (if keepdim 1 0)))
  vals)
(defmethod tensor-median ((vals tensor.float) (indices tensor.long) (src tensor.float)
                          dimension keepdim)
  (th-float-tensor-median ($handle vals)
                          ($handle indices)
                          ($handle src)
                          dimension (if keepdim 1 0))
  vals)
(defmethod tensor-median ((vals tensor.float) (indices list) (src tensor.float)
                          dimension keepdim)
  (let ((idx (long-tensor-with indices)))
    (th-float-tensor-median ($handle vals)
                            ($handle idx)
                            ($handle src)
                            dimension (if keepdim 1 0)))
  vals)
(defmethod tensor-median ((vals tensor.double) (indices tensor.long) (src tensor.double)
                          dimension keepdim)
  (th-double-tensor-median ($handle vals)
                           ($handle indices)
                           ($handle src)
                           dimension (if keepdim 1 0))
  vals)
(defmethod tensor-median ((vals tensor.double) (indices list) (src tensor.double)
                          dimension keepdim)
  (let ((idx (long-tensor-with indices)))
    (th-double-tensor-median ($handle vals)
                             ($handle idx)
                             ($handle src)
                             dimension (if keepdim 1 0)))
  vals)

(defmethod tensor-sum ((tensor tensor.byte) (src tensor.byte) dimension keepdim)
  (th-byte-tensor-sum ($handle tensor)
                      ($handle src)
                      dimension (if keepdim 1 0))
  tensor)
(defmethod tensor-sum ((tensor tensor.char) (src tensor.char) dimension keepdim)
  (th-char-tensor-sum ($handle tensor)
                      ($handle src)
                      dimension (if keepdim 1 0))
  tensor)
(defmethod tensor-sum ((tensor tensor.short) (src tensor.short) dimension keepdim)
  (th-short-tensor-sum ($handle tensor)
                       ($handle src)
                       dimension (if keepdim 1 0))
  tensor)
(defmethod tensor-sum ((tensor tensor.int) (src tensor.int) dimension keepdim)
  (th-int-tensor-sum ($handle tensor)
                     ($handle src)
                     dimension (if keepdim 1 0))
  tensor)
(defmethod tensor-sum ((tensor tensor.long) (src tensor.long) dimension keepdim)
  (th-long-tensor-sum ($handle tensor)
                      ($handle src)
                      dimension (if keepdim 1 0))
  tensor)
(defmethod tensor-sum ((tensor tensor.float) (src tensor.float) dimension keepdim)
  (th-float-tensor-sum ($handle tensor)
                       ($handle src)
                       dimension (if keepdim 1 0))
  tensor)
(defmethod tensor-sum ((tensor tensor.double) (src tensor.double) dimension keepdim)
  (th-double-tensor-sum ($handle tensor)
                        ($handle src)
                        dimension (if keepdim 1 0))
  tensor)

(defmethod tensor-prd ((tensor tensor.byte) (src tensor.byte) dimension keepdim)
  (th-byte-tensor-prod ($handle tensor)
                       ($handle src)
                       dimension (if keepdim 1 0))
  tensor)
(defmethod tensor-prd ((tensor tensor.char) (src tensor.char) dimension keepdim)
  (th-char-tensor-prod ($handle tensor)
                       ($handle src)
                       dimension (if keepdim 1 0))
  tensor)
(defmethod tensor-prd ((tensor tensor.short) (src tensor.short) dimension keepdim)
  (th-short-tensor-prod ($handle tensor)
                        ($handle src)
                        dimension (if keepdim 1 0))
  tensor)
(defmethod tensor-prd ((tensor tensor.int) (src tensor.int) dimension keepdim)
  (th-int-tensor-prod ($handle tensor)
                      ($handle src)
                      dimension (if keepdim 1 0))
  tensor)
(defmethod tensor-prd ((tensor tensor.long) (src tensor.long) dimension keepdim)
  (th-long-tensor-prod ($handle tensor)
                       ($handle src)
                       dimension (if keepdim 1 0))
  tensor)
(defmethod tensor-prd ((tensor tensor.float) (src tensor.float) dimension keepdim)
  (th-float-tensor-prod ($handle tensor)
                        ($handle src)
                        dimension (if keepdim 1 0))
  tensor)
(defmethod tensor-prd ((tensor tensor.double) (src tensor.double) dimension keepdim)
  (th-double-tensor-prod ($handle tensor)
                         ($handle src)
                         dimension (if keepdim 1 0))
  tensor)

(defmethod tensor-cum-sum ((tensor tensor.byte) (src tensor.byte) dimension)
  (th-byte-tensor-cum-sum ($handle tensor)
                          ($handle src)
                          dimension)
  tensor)
(defmethod tensor-cum-sum ((tensor tensor.char) (src tensor.char) dimension)
  (th-char-tensor-cum-sum ($handle tensor)
                          ($handle src)
                          dimension)
  tensor)
(defmethod tensor-cum-sum ((tensor tensor.short) (src tensor.short) dimension)
  (th-short-tensor-cum-sum ($handle tensor)
                           ($handle src)
                           dimension)
  tensor)
(defmethod tensor-cum-sum ((tensor tensor.int) (src tensor.int) dimension)
  (th-int-tensor-cum-sum ($handle tensor)
                         ($handle src)
                         dimension)
  tensor)
(defmethod tensor-cum-sum ((tensor tensor.long) (src tensor.long) dimension)
  (th-long-tensor-cum-sum ($handle tensor)
                          ($handle src)
                          dimension)
  tensor)
(defmethod tensor-cum-sum ((tensor tensor.float) (src tensor.float) dimension)
  (th-float-tensor-cum-sum ($handle tensor)
                           ($handle src)
                           dimension)
  tensor)
(defmethod tensor-cum-sum ((tensor tensor.double) (src tensor.double) dimension)
  (th-double-tensor-cum-sum ($handle tensor)
                            ($handle src)
                            dimension)
  tensor)

(defmethod tensor-cum-prd ((tensor tensor.byte) (src tensor.byte) dimension)
  (th-byte-tensor-cum-prod ($handle tensor)
                           ($handle src)
                           dimension)
  tensor)
(defmethod tensor-cum-prd ((tensor tensor.char) (src tensor.char) dimension)
  (th-char-tensor-cum-prod ($handle tensor)
                           ($handle src)
                           dimension)
  tensor)
(defmethod tensor-cum-prd ((tensor tensor.short) (src tensor.short) dimension)
  (th-short-tensor-cum-prod ($handle tensor)
                            ($handle src)
                            dimension)
  tensor)
(defmethod tensor-cum-prd ((tensor tensor.int) (src tensor.int) dimension)
  (th-int-tensor-cum-prod ($handle tensor)
                          ($handle src)
                          dimension)
  tensor)
(defmethod tensor-cum-prd ((tensor tensor.long) (src tensor.long) dimension)
  (th-long-tensor-cum-prod ($handle tensor)
                           ($handle src)
                           dimension)
  tensor)
(defmethod tensor-cum-prd ((tensor tensor.float) (src tensor.float) dimension)
  (th-float-tensor-cum-prod ($handle tensor)
                            ($handle src)
                            dimension)
  tensor)
(defmethod tensor-cum-prd ((tensor tensor.double) (src tensor.double) dimension)
  (th-double-tensor-cum-prod ($handle tensor)
                             ($handle src)
                             dimension)
  tensor)

(defmethod tensor-sign ((tensor tensor.byte) (src tensor.byte))
  (th-byte-tensor-sign ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-sign ((tensor tensor.char) (src tensor.char))
  (th-char-tensor-sign ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-sign ((tensor tensor.short) (src tensor.short))
  (th-short-tensor-sign ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-sign ((tensor tensor.int) (src tensor.int))
  (th-int-tensor-sign ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-sign ((tensor tensor.long) (src tensor.long))
  (th-long-tensor-sign ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-sign ((tensor tensor.float) (src tensor.float))
  (th-float-tensor-sign ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-sign ((tensor tensor.double) (src tensor.double))
  (th-double-tensor-sign ($handle tensor) ($handle src))
  tensor)

(defmethod tensor-trace ((tensor tensor.byte))
  (th-byte-tensor-trace ($handle tensor)))
(defmethod tensor-trace ((tensor tensor.char))
  (th-char-tensor-trace ($handle tensor)))
(defmethod tensor-trace ((tensor tensor.short))
  (th-short-tensor-trace ($handle tensor)))
(defmethod tensor-trace ((tensor tensor.int))
  (th-int-tensor-trace ($handle tensor)))
(defmethod tensor-trace ((tensor tensor.long))
  (th-long-tensor-trace ($handle tensor)))
(defmethod tensor-trace ((tensor tensor.float))
  (th-float-tensor-trace ($handle tensor)))
(defmethod tensor-trace ((tensor tensor.double))
  (th-double-tensor-trace ($handle tensor)))

(defmethod tensor-cross ((tensor tensor.byte) (A tensor.byte) (B tensor.byte) dimension)
  (th-byte-tensor-cross ($handle tensor)
                        ($handle A)
                        ($handle B)
                        dimension)
  tensor)
(defmethod tensor-cross ((tensor tensor.char) (A tensor.char) (B tensor.char) dimension)
  (th-char-tensor-cross ($handle tensor)
                        ($handle A)
                        ($handle B)
                        dimension)
  tensor)
(defmethod tensor-cross ((tensor tensor.short) (A tensor.short) (B tensor.short) dimension)
  (th-short-tensor-cross ($handle tensor)
                         ($handle A)
                         ($handle B)
                         dimension)
  tensor)
(defmethod tensor-cross ((tensor tensor.int) (A tensor.int) (B tensor.int) dimension)
  (th-int-tensor-cross ($handle tensor)
                       ($handle A)
                       ($handle B)
                       dimension)
  tensor)
(defmethod tensor-cross ((tensor tensor.long) (A tensor.long) (B tensor.long) dimension)
  (th-long-tensor-cross ($handle tensor)
                        ($handle A)
                        ($handle B)
                        dimension)
  tensor)
(defmethod tensor-cross ((tensor tensor.float) (A tensor.float) (B tensor.float) dimension)
  (th-float-tensor-cross ($handle tensor)
                         ($handle A)
                         ($handle B)
                         dimension)
  tensor)
(defmethod tensor-cross ((tensor tensor.double) (A tensor.double) (B tensor.double) dimension)
  (th-double-tensor-cross ($handle tensor)
                          ($handle A)
                          ($handle B)
                          dimension)
  tensor)

(defmethod tensor-cmax ((tensor tensor.byte) (src1 tensor.byte) (src2 tensor.byte))
  (th-byte-tensor-cmax ($handle tensor) ($handle src1) ($handle src2))
  tensor)
(defmethod tensor-cmax ((tensor tensor.byte) (src1 tensor.byte) (src2 number))
  (th-byte-tensor-cmax-value ($handle tensor) ($handle src1)
                             (tensor-coerce tensor src2))
  tensor)
(defmethod tensor-cmax ((tensor tensor.char) (src1 tensor.char) (src2 tensor.char))
  (th-char-tensor-cmax ($handle tensor) ($handle src1) ($handle src2))
  tensor)
(defmethod tensor-cmax ((tensor tensor.char) (src1 tensor.char) (src2 number))
  (th-char-tensor-cmax-value ($handle tensor) ($handle src1)
                             (tensor-coerce tensor src2))
  tensor)
(defmethod tensor-cmax ((tensor tensor.short) (src1 tensor.short) (src2 tensor.short))
  (th-short-tensor-cmax ($handle tensor) ($handle src1) ($handle src2))
  tensor)
(defmethod tensor-cmax ((tensor tensor.short) (src1 tensor.short) (src2 number))
  (th-short-tensor-cmax-value ($handle tensor) ($handle src1)
                              (tensor-coerce tensor src2))
  tensor)
(defmethod tensor-cmax ((tensor tensor.int) (src1 tensor.int) (src2 tensor.int))
  (th-int-tensor-cmax ($handle tensor) ($handle src1) ($handle src2))
  tensor)
(defmethod tensor-cmax ((tensor tensor.int) (src1 tensor.int) (src2 number))
  (th-int-tensor-cmax-value ($handle tensor) ($handle src1)
                            (tensor-coerce tensor src2))
  tensor)
(defmethod tensor-cmax ((tensor tensor.long) (src1 tensor.long) (src2 tensor.long))
  (th-long-tensor-cmax ($handle tensor) ($handle src1) ($handle src2))
  tensor)
(defmethod tensor-cmax ((tensor tensor.long) (src1 tensor.long) (src2 number))
  (th-long-tensor-cmax-value ($handle tensor) ($handle src1)
                             (tensor-coerce tensor src2))
  tensor)
(defmethod tensor-cmax ((tensor tensor.float) (src1 tensor.float) (src2 tensor.float))
  (th-float-tensor-cmax ($handle tensor) ($handle src1) ($handle src2))
  tensor)
(defmethod tensor-cmax ((tensor tensor.float) (src1 tensor.float) (src2 number))
  (th-float-tensor-cmax-value ($handle tensor) ($handle src1)
                              (tensor-coerce tensor src2))
  tensor)
(defmethod tensor-cmax ((tensor tensor.double) (src1 tensor.double) (src2 tensor.double))
  (th-double-tensor-cmax ($handle tensor) ($handle src1) ($handle src2))
  tensor)
(defmethod tensor-cmax ((tensor tensor.double) (src1 tensor.double) (src2 number))
  (th-double-tensor-cmax-value ($handle tensor) ($handle src1)
                               (tensor-coerce tensor src2))
  tensor)

(defmethod tensor-cmin ((tensor tensor.byte) (src1 tensor.byte) (src2 tensor.byte))
  (th-byte-tensor-cmin ($handle tensor) ($handle src1) ($handle src2))
  tensor)
(defmethod tensor-cmin ((tensor tensor.byte) (src1 tensor.byte) (src2 number))
  (th-byte-tensor-cmin-value ($handle tensor) ($handle src1)
                             (tensor-coerce tensor src2))
  tensor)
(defmethod tensor-cmin ((tensor tensor.char) (src1 tensor.char) (src2 tensor.char))
  (th-char-tensor-cmin ($handle tensor) ($handle src1) ($handle src2))
  tensor)
(defmethod tensor-cmin ((tensor tensor.char) (src1 tensor.char) (src2 number))
  (th-char-tensor-cmin-value ($handle tensor) ($handle src1)
                             (tensor-coerce tensor src2))
  tensor)
(defmethod tensor-cmin ((tensor tensor.short) (src1 tensor.short) (src2 tensor.short))
  (th-short-tensor-cmin ($handle tensor) ($handle src1) ($handle src2))
  tensor)
(defmethod tensor-cmin ((tensor tensor.short) (src1 tensor.short) (src2 number))
  (th-short-tensor-cmin-value ($handle tensor) ($handle src1)
                              (tensor-coerce tensor src2))
  tensor)
(defmethod tensor-cmin ((tensor tensor.int) (src1 tensor.int) (src2 tensor.int))
  (th-int-tensor-cmin ($handle tensor) ($handle src1) ($handle src2))
  tensor)
(defmethod tensor-cmin ((tensor tensor.int) (src1 tensor.int) (src2 number))
  (th-int-tensor-cmin-value ($handle tensor) ($handle src1)
                            (tensor-coerce tensor src2))
  tensor)
(defmethod tensor-cmin ((tensor tensor.long) (src1 tensor.long) (src2 tensor.long))
  (th-long-tensor-cmin ($handle tensor) ($handle src1) ($handle src2))
  tensor)
(defmethod tensor-cmin ((tensor tensor.long) (src1 tensor.long) (src2 number))
  (th-long-tensor-cmin-value ($handle tensor) ($handle src1)
                             (tensor-coerce tensor src2))
  tensor)
(defmethod tensor-cmin ((tensor tensor.float) (src1 tensor.float) (src2 tensor.float))
  (th-float-tensor-cmin ($handle tensor) ($handle src1) ($handle src2))
  tensor)
(defmethod tensor-cmin ((tensor tensor.float) (src1 tensor.float) (src2 number))
  (th-float-tensor-cmin-value ($handle tensor) ($handle src1)
                              (tensor-coerce tensor src2))
  tensor)
(defmethod tensor-cmin ((tensor tensor.double) (src1 tensor.double) (src2 tensor.double))
  (th-double-tensor-cmin ($handle tensor) ($handle src1) ($handle src2))
  tensor)
(defmethod tensor-cmin ((tensor tensor.double) (src1 tensor.double) (src2 number))
  (th-double-tensor-cmin-value ($handle tensor) ($handle src1)
                               (tensor-coerce tensor src2))
  tensor)

(defmethod tensor-zeros ((tensor tensor.byte) (size storage.long))
  (th-byte-tensor-zeros ($handle tensor) ($handle size))
  tensor)
(defmethod tensor-zeros ((tensor tensor.byte) (size list))
  (when size
    (let ((s (long-storage-with size)))
      (th-byte-tensor-zeros ($handle tensor) ($handle s))
      tensor)))
(defmethod tensor-zeros ((tensor tensor.byte) (src tensor.byte))
  (th-byte-tensor-zero-like ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-zeros ((tensor tensor.char) (size storage.long))
  (th-char-tensor-zeros ($handle tensor) ($handle size))
  tensor)
(defmethod tensor-zeros ((tensor tensor.char) (size list))
  (when size
    (let ((s (long-storage-with size)))
      (th-char-tensor-zeros ($handle tensor) ($handle s))
      tensor)))
(defmethod tensor-zeros ((tensor tensor.char) (src tensor.char))
  (th-char-tensor-zero-like ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-zeros ((tensor tensor.short) (size storage.long))
  (th-short-tensor-zeros ($handle tensor) ($handle size))
  tensor)
(defmethod tensor-zeros ((tensor tensor.short) (size list))
  (when size
    (let ((s (long-storage-with size)))
      (th-short-tensor-zeros ($handle tensor) ($handle s))
      tensor)))
(defmethod tensor-zeros ((tensor tensor.short) (src tensor.short))
  (th-short-tensor-zero-like ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-zeros ((tensor tensor.int) (size storage.long))
  (th-int-tensor-zeros ($handle tensor) ($handle size))
  tensor)
(defmethod tensor-zeros ((tensor tensor.int) (size list))
  (when size
    (let ((s (long-storage-with size)))
      (th-int-tensor-zeros ($handle tensor) ($handle s))
      tensor)))
(defmethod tensor-zeros ((tensor tensor.int) (src tensor.int))
  (th-int-tensor-zero-like ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-zeros ((tensor tensor.long) (size storage.long))
  (th-long-tensor-zeros ($handle tensor) ($handle size))
  tensor)
(defmethod tensor-zeros ((tensor tensor.long) (size list))
  (when size
    (let ((s (long-storage-with size)))
      (th-long-tensor-zeros ($handle tensor) ($handle s))
      tensor)))
(defmethod tensor-zeros ((tensor tensor.long) (src tensor.long))
  (th-long-tensor-zero-like ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-zeros ((tensor tensor.float) (size storage.long))
  (th-float-tensor-zeros ($handle tensor) ($handle size))
  tensor)
(defmethod tensor-zeros ((tensor tensor.float) (size list))
  (when size
    (let ((s (long-storage-with size)))
      (th-float-tensor-zeros ($handle tensor) ($handle s))
      tensor)))
(defmethod tensor-zeros ((tensor tensor.float) (src tensor.float))
  (th-float-tensor-zero-like ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-zeros ((tensor tensor.double) (size storage.long))
  (th-double-tensor-zeros ($handle tensor) ($handle size))
  tensor)
(defmethod tensor-zeros ((tensor tensor.double) (size list))
  (when size
    (let ((s (long-storage-with size)))
      (th-double-tensor-zeros ($handle tensor) ($handle s))
      tensor)))
(defmethod tensor-zeros ((tensor tensor.double) (src tensor.double))
  (th-double-tensor-zero-like ($handle tensor) ($handle src))
  tensor)

(defmethod tensor-ones ((tensor tensor.byte) (size storage.long))
  (th-byte-tensor-ones ($handle tensor) ($handle size))
  tensor)
(defmethod tensor-ones ((tensor tensor.byte) (size list))
  (when size
    (let ((s (long-storage-with size)))
      (th-byte-tensor-ones ($handle tensor) ($handle s))
      tensor)))
(defmethod tensor-ones ((tensor tensor.byte) (src tensor.byte))
  (th-byte-tensor-one-like ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-ones ((tensor tensor.char) (size storage.long))
  (th-char-tensor-ones ($handle tensor) ($handle size))
  tensor)
(defmethod tensor-ones ((tensor tensor.char) (size list))
  (when size
    (let ((s (long-storage-with size)))
      (th-char-tensor-ones ($handle tensor) ($handle s))
      tensor)))
(defmethod tensor-ones ((tensor tensor.char) (src tensor.char))
  (th-char-tensor-one-like ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-ones ((tensor tensor.short) (size storage.long))
  (th-short-tensor-ones ($handle tensor) ($handle size))
  tensor)
(defmethod tensor-ones ((tensor tensor.short) (size list))
  (when size
    (let ((s (long-storage-with size)))
      (th-short-tensor-ones ($handle tensor) ($handle s))
      tensor)))
(defmethod tensor-ones ((tensor tensor.short) (src tensor.short))
  (th-short-tensor-one-like ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-ones ((tensor tensor.int) (size storage.long))
  (th-int-tensor-ones ($handle tensor) ($handle size))
  tensor)
(defmethod tensor-ones ((tensor tensor.int) (size list))
  (when size
    (let ((s (long-storage-with size)))
      (th-int-tensor-ones ($handle tensor) ($handle s))
      tensor)))
(defmethod tensor-ones ((tensor tensor.int) (src tensor.int))
  (th-int-tensor-one-like ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-ones ((tensor tensor.long) (size storage.long))
  (th-long-tensor-ones ($handle tensor) ($handle size))
  tensor)
(defmethod tensor-ones ((tensor tensor.long) (size list))
  (when size
    (let ((s (long-storage-with size)))
      (th-long-tensor-ones ($handle tensor) ($handle s))
      tensor)))
(defmethod tensor-ones ((tensor tensor.long) (src tensor.long))
  (th-long-tensor-one-like ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-ones ((tensor tensor.float) (size storage.long))
  (th-float-tensor-ones ($handle tensor) ($handle size))
  tensor)
(defmethod tensor-ones ((tensor tensor.float) (size list))
  (when size
    (let ((s (long-storage-with size)))
      (th-float-tensor-ones ($handle tensor) ($handle s))
      tensor)))
(defmethod tensor-ones ((tensor tensor.float) (src tensor.float))
  (th-float-tensor-one-like ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-ones ((tensor tensor.double) (size storage.long))
  (th-double-tensor-ones ($handle tensor) ($handle size))
  tensor)
(defmethod tensor-ones ((tensor tensor.double) (size list))
  (when size
    (let ((s (long-storage-with size)))
      (th-double-tensor-ones ($handle tensor) ($handle s))
      tensor)))
(defmethod tensor-ones ((tensor tensor.double) (src tensor.double))
  (th-double-tensor-one-like ($handle tensor) ($handle src))
  tensor)

(defmethod tensor-diag ((tensor tensor.byte) (src tensor.byte) k)
  (th-byte-tensor-diag ($handle tensor) ($handle src) k)
  tensor)
(defmethod tensor-diag ((tensor tensor.char) (src tensor.char) k)
  (th-char-tensor-diag ($handle tensor) ($handle src) k)
  tensor)
(defmethod tensor-diag ((tensor tensor.short) (src tensor.short) k)
  (th-short-tensor-diag ($handle tensor) ($handle src) k)
  tensor)
(defmethod tensor-diag ((tensor tensor.int) (src tensor.int) k)
  (th-int-tensor-diag ($handle tensor) ($handle src) k)
  tensor)
(defmethod tensor-diag ((tensor tensor.long) (src tensor.long) k)
  (th-long-tensor-diag ($handle tensor) ($handle src) k)
  tensor)
(defmethod tensor-diag ((tensor tensor.float) (src tensor.float) k)
  (th-float-tensor-diag ($handle tensor) ($handle src) k)
  tensor)
(defmethod tensor-diag ((tensor tensor.double) (src tensor.double) k)
  (th-double-tensor-diag ($handle tensor) ($handle src) k)
  tensor)

(defmethod tensor-eye ((tensor tensor.byte) nrow ncol)
  (th-byte-tensor-eye ($handle tensor) nrow ncol)
  tensor)
(defmethod tensor-eye ((tensor tensor.char) nrow ncol)
  (th-char-tensor-eye ($handle tensor) nrow ncol)
  tensor)
(defmethod tensor-eye ((tensor tensor.short) nrow ncol)
  (th-short-tensor-eye ($handle tensor) nrow ncol)
  tensor)
(defmethod tensor-eye ((tensor tensor.int) nrow ncol)
  (th-int-tensor-eye ($handle tensor) nrow ncol)
  tensor)
(defmethod tensor-eye ((tensor tensor.long) nrow ncol)
  (th-long-tensor-eye ($handle tensor) nrow ncol)
  tensor)
(defmethod tensor-eye ((tensor tensor.float) nrow ncol)
  (th-float-tensor-eye ($handle tensor) nrow ncol)
  tensor)
(defmethod tensor-eye ((tensor tensor.double) nrow ncol)
  (th-double-tensor-eye ($handle tensor) nrow ncol)
  tensor)

(defun byte-eye (nrow ncol) (tensor-eye (byte-tensor) nrow ncol))
(defun char-eye (nrow ncol) (tensor-eye (char-tensor) nrow ncol))
(defun short-eye (nrow ncol) (tensor-eye (short-tensor) nrow ncol))
(defun int-eye (nrow ncol) (tensor-eye (int-tensor) nrow ncol))
(defun long-eye (nrow ncol) (tensor-eye (long-tensor) nrow ncol))
(defun float-eye (nrow ncol) (tensor-eye (float-tensor) nrow ncol))
(defun double-eye (nrow ncol) (tensor-eye (double-tensor) nrow ncol))

(defmethod tensor-arange ((tensor tensor.byte) xmin xmax step)
  (th-byte-tensor-arange ($handle tensor)
                         (tensor-acoerce tensor xmin)
                         (tensor-acoerce tensor xmax)
                         (tensor-acoerce tensor step))
  tensor)
(defmethod tensor-arange ((tensor tensor.char) xmin xmax step)
  (th-char-tensor-arange ($handle tensor)
                         (tensor-acoerce tensor xmin)
                         (tensor-acoerce tensor xmax)
                         (tensor-acoerce tensor step))
  tensor)
(defmethod tensor-arange ((tensor tensor.short) xmin xmax step)
  (th-short-tensor-arange ($handle tensor)
                          (tensor-acoerce tensor xmin)
                          (tensor-acoerce tensor xmax)
                          (tensor-acoerce tensor step))
  tensor)
(defmethod tensor-arange ((tensor tensor.int) xmin xmax step)
  (th-int-tensor-arange ($handle tensor)
                        (tensor-acoerce tensor xmin)
                        (tensor-acoerce tensor xmax)
                        (tensor-acoerce tensor step))
  tensor)
(defmethod tensor-arange ((tensor tensor.long) xmin xmax step)
  (th-long-tensor-arange ($handle tensor)
                         (tensor-acoerce tensor xmin)
                         (tensor-acoerce tensor xmax)
                         (tensor-acoerce tensor step))
  tensor)
(defmethod tensor-arange ((tensor tensor.float) xmin xmax step)
  (th-float-tensor-arange ($handle tensor)
                          (tensor-acoerce tensor xmin)
                          (tensor-acoerce tensor xmax)
                          (tensor-acoerce tensor step))
  tensor)
(defmethod tensor-arange ((tensor tensor.double) xmin xmax step)
  (th-double-tensor-arange ($handle tensor)
                           (tensor-acoerce tensor xmin)
                           (tensor-acoerce tensor xmax)
                           (tensor-acoerce tensor step))
  tensor)

(defun tensor.byte-arange (xmin xmax &optional (step 1))
  (tensor-arange (byte-tensor) xmin xmax step))
(defun tensor.char-arange (xmin xmax &optional (step 1))
  (tensor-arange (char-tensor) xmin xmax step))
(defun tensor.short-arange (xmin xmax &optional (step 1))
  (tensor-arange (short-tensor) xmin xmax step))
(defun tensor.int-arange (xmin xmax &optional (step 1))
  (tensor-arange (int-tensor) xmin xmax step))
(defun tensor.long-arange (xmin xmax &optional (step 1))
  (tensor-arange (long-tensor) xmin xmax step))
(defun tensor.float-arange (xmin xmax &optional (step 1))
  (tensor-arange (float-tensor) xmin xmax step))
(defun tensor.double-arange (xmin xmax &optional (step 1))
  (tensor-arange (double-tensor) xmin xmax step))

(defmethod tensor-range ((tensor tensor.byte) xmin xmax step)
  (th-byte-tensor-range ($handle tensor)
                        (tensor-acoerce tensor xmin)
                        (tensor-acoerce tensor xmax)
                        (tensor-acoerce tensor step))
  tensor)
(defmethod tensor-range ((tensor tensor.char) xmin xmax step)
  (th-char-tensor-range ($handle tensor)
                        (tensor-acoerce tensor xmin)
                        (tensor-acoerce tensor xmax)
                        (tensor-acoerce tensor step))
  tensor)
(defmethod tensor-range ((tensor tensor.short) xmin xmax step)
  (th-short-tensor-range ($handle tensor)
                         (tensor-acoerce tensor xmin)
                         (tensor-acoerce tensor xmax)
                         (tensor-acoerce tensor step))
  tensor)
(defmethod tensor-range ((tensor tensor.int) xmin xmax step)
  (th-int-tensor-range ($handle tensor)
                       (tensor-acoerce tensor xmin)
                       (tensor-acoerce tensor xmax)
                       (tensor-acoerce tensor step))
  tensor)
(defmethod tensor-range ((tensor tensor.long) xmin xmax step)
  (th-long-tensor-range ($handle tensor)
                        (tensor-acoerce tensor xmin)
                        (tensor-acoerce tensor xmax)
                        (tensor-acoerce tensor step))
  tensor)
(defmethod tensor-range ((tensor tensor.float) xmin xmax step)
  (th-float-tensor-range ($handle tensor)
                         (tensor-acoerce tensor xmin)
                         (tensor-acoerce tensor xmax)
                         (tensor-acoerce tensor step))
  tensor)
(defmethod tensor-range ((tensor tensor.double) xmin xmax step)
  (th-double-tensor-range ($handle tensor)
                          (tensor-acoerce tensor xmin)
                          (tensor-acoerce tensor xmax)
                          (tensor-acoerce tensor step))
  tensor)

(defun tensor.byte-range (xmin xmax &optional (step 1))
  (tensor-range (byte-tensor) xmin xmax step))
(defun tensor.char-range (xmin xmax &optional (step 1))
  (tensor-range (char-tensor) xmin xmax step))
(defun tensor.short-range (xmin xmax &optional (step 1))
  (tensor-range (short-tensor) xmin xmax step))
(defun tensor.int-range (xmin xmax &optional (step 1))
  (tensor-range (int-tensor) xmin xmax step))
(defun tensor.long-range (xmin xmax &optional (step 1))
  (tensor-range (long-tensor) xmin xmax step))
(defun tensor.float-range (xmin xmax &optional (step 1))
  (tensor-range (float-tensor) xmin xmax step))
(defun tensor.double-range (xmin xmax &optional (step 1))
  (tensor-range (double-tensor) xmin xmax step))

(defmethod tensor-rand-perm ((tensor tensor.byte) n &optional generator)
  (th-byte-tensor-rand-perm ($handle tensor) ($handle (or generator
                                                                         *generator*))
                            n)
  tensor)
(defmethod tensor-rand-perm ((tensor tensor.char) n &optional generator)
  (th-char-tensor-rand-perm ($handle tensor) ($handle (or generator
                                                                         *generator*))
                            n)
  tensor)
(defmethod tensor-rand-perm ((tensor tensor.short) n &optional generator)
  (th-short-tensor-rand-perm ($handle tensor) ($handle (or generator
                                                                          *generator*))
                             n)
  tensor)
(defmethod tensor-rand-perm ((tensor tensor.int) n &optional generator)
  (th-int-tensor-rand-perm ($handle tensor) ($handle (or generator
                                                                        *generator*))
                           n)
  tensor)
(defmethod tensor-rand-perm ((tensor tensor.long) n &optional generator)
  (th-long-tensor-rand-perm ($handle tensor) ($handle (or generator
                                                          *generator*))
                            n)
  tensor)
(defmethod tensor-rand-perm ((tensor tensor.float) n &optional generator)
  (th-float-tensor-rand-perm ($handle tensor) ($handle (or generator
                                                           *generator*))
                             n)
  tensor)
(defmethod tensor-rand-perm ((tensor tensor.double) n &optional generator)
  (th-double-tensor-rand-perm ($handle tensor) ($handle (or generator
                                                            *generator*))
                              n)
  tensor)

(defun tensor.byte-rand-perm (n &optional generator)
  (tensor-rand-perm (byte-tensor) n generator))
(defun tensor.char-rand-perm (n &optional generator)
  (tensor-rand-perm (char-tensor) n generator))
(defun tensor.short-rand-perm (n &optional generator)
  (tensor-rand-perm (short-tensor) n generator))
(defun tensor.int-rand-perm (n &optional generator)
  (tensor-rand-perm (int-tensor) n generator))
(defun tensor.long-rand-perm (n &optional generator)
  (tensor-rand-perm (long-tensor) n generator))
(defun tensor.float-rand-perm (n &optional generator)
  (tensor-rand-perm (float-tensor) n generator))
(defun tensor.double-rand-perm (n &optional generator)
  (tensor-rand-perm (double-tensor) n generator))

(defmethod tensor-reshape ((tensor tensor.byte) (src tensor.byte) (size storage.long))
  (th-byte-tensor-reshape ($handle tensor)
                          ($handle src)
                          ($handle size))
  tensor)
(defmethod tensor-reshape ((tensor tensor.byte) (src tensor.byte) (size list))
  (when size
    (let ((s (long-storage-with size)))
      (th-byte-tensor-reshape ($handle tensor)
                              ($handle src)
                              ($handle s))))
  tensor)
(defmethod tensor-reshape ((tensor tensor.char) (src tensor.char) (size storage.long))
  (th-char-tensor-reshape ($handle tensor)
                          ($handle src)
                          ($handle size))
  tensor)
(defmethod tensor-reshape ((tensor tensor.char) (src tensor.char) (size list))
  (when size
    (let ((s (long-storage-with size)))
      (th-char-tensor-reshape ($handle tensor)
                              ($handle src)
                              ($handle s))))
  tensor)
(defmethod tensor-reshape ((tensor tensor.short) (src tensor.short) (size storage.long))
  (th-short-tensor-reshape ($handle tensor)
                           ($handle src)
                           ($handle size))
  tensor)
(defmethod tensor-reshape ((tensor tensor.short) (src tensor.short) (size list))
  (when size
    (let ((s (long-storage-with size)))
      (th-short-tensor-reshape ($handle tensor)
                               ($handle src)
                               ($handle s))))
  tensor)
(defmethod tensor-reshape ((tensor tensor.int) (src tensor.int) (size storage.long))
  (th-int-tensor-reshape ($handle tensor)
                         ($handle src)
                         ($handle size))
  tensor)
(defmethod tensor-reshape ((tensor tensor.int) (src tensor.int) (size list))
  (when size
    (let ((s (long-storage-with size)))
      (th-int-tensor-reshape ($handle tensor)
                             ($handle src)
                             ($handle s))))
  tensor)
(defmethod tensor-reshape ((tensor tensor.long) (src tensor.long) (size storage.long))
  (th-long-tensor-reshape ($handle tensor)
                          ($handle src)
                          ($handle size))
  tensor)
(defmethod tensor-reshape ((tensor tensor.long) (src tensor.long) (size list))
  (when size
    (let ((s (long-storage-with size)))
      (th-long-tensor-reshape ($handle tensor)
                              ($handle src)
                              ($handle s))))
  tensor)
(defmethod tensor-reshape ((tensor tensor.long) (src tensor.float) (size storage.long))
  (th-float-tensor-reshape ($handle tensor)
                           ($handle src)
                           ($handle size))
  tensor)
(defmethod tensor-reshape ((tensor tensor.float) (src tensor.float) (size list))
  (when size
    (let ((s (long-storage-with size)))
      (th-float-tensor-reshape ($handle tensor)
                               ($handle src)
                               ($handle s))))
  tensor)
(defmethod tensor-reshape ((tensor tensor.double) (src tensor.double) (size storage.long))
  (th-double-tensor-reshape ($handle tensor)
                            ($handle src)
                            ($handle size))
  tensor)
(defmethod tensor-reshape ((tensor tensor.double) (src tensor.double) (size list))
  (when size
    (let ((s (long-storage-with size)))
      (th-double-tensor-reshape ($handle tensor)
                                ($handle src)
                                ($handle s))))
  tensor)

(defmethod tensor-sort ((tensor tensor.byte) (indices tensor.long) (src tensor.byte)
                        dimension descending)
  (th-byte-tensor-sort ($handle tensor)
                       ($handle indices)
                       ($handle src)
                       dimension
                       (if descending 1 0))
  tensor)
(defmethod tensor-sort ((tensor tensor.byte) (indices list) (src tensor.byte)
                        dimension descending)
  (when indices
    (let ((idx (long-tensor-with indices)))
      (th-byte-tensor-sort ($handle tensor)
                           ($handle idx)
                           ($handle src)
                           dimension
                           (if descending 1 0))))
  tensor)
(defmethod tensor-sort ((tensor tensor.char) (indices tensor.long) (src tensor.char)
                        dimension descending)
  (th-char-tensor-sort ($handle tensor)
                       ($handle indices)
                       ($handle src)
                       dimension
                       (if descending 1 0))
  tensor)
(defmethod tensor-sort ((tensor tensor.char) (indices list) (src tensor.char)
                        dimension descending)
  (when indices
    (let ((idx (long-tensor-with indices)))
      (th-char-tensor-sort ($handle tensor)
                           ($handle idx)
                           ($handle src)
                           dimension
                           (if descending 1 0))))
  tensor)
(defmethod tensor-sort ((tensor tensor.short) (indices tensor.long) (src tensor.short)
                        dimension descending)
  (th-short-tensor-sort ($handle tensor)
                        ($handle indices)
                        ($handle src)
                        dimension
                        (if descending 1 0))
  tensor)
(defmethod tensor-sort ((tensor tensor.short) (indices list) (src tensor.short)
                        dimension descending)
  (when indices
    (let ((idx (long-tensor-with indices)))
      (th-short-tensor-sort ($handle tensor)
                            ($handle idx)
                            ($handle src)
                            dimension
                            (if descending 1 0))))
  tensor)
(defmethod tensor-sort ((tensor tensor.int) (indices tensor.long) (src tensor.int)
                        dimension descending)
  (th-int-tensor-sort ($handle tensor)
                      ($handle indices)
                      ($handle src)
                      dimension
                      (if descending 1 0))
  tensor)
(defmethod tensor-sort ((tensor tensor.int) (indices list) (src tensor.int)
                        dimension descending)
  (when indices
    (let ((idx (long-tensor-with indices)))
      (th-int-tensor-sort ($handle tensor)
                          ($handle idx)
                          ($handle src)
                          dimension
                          (if descending 1 0))))
  tensor)
(defmethod tensor-sort ((tensor tensor.long) (indices tensor.long) (src tensor.long)
                        dimension descending)
  (th-long-tensor-sort ($handle tensor)
                       ($handle indices)
                       ($handle src)
                       dimension
                       (if descending 1 0))
  tensor)
(defmethod tensor-sort ((tensor tensor.long) (indices list) (src tensor.long)
                        dimension descending)
  (when indices
    (let ((idx (long-tensor-with indices)))
      (th-long-tensor-sort ($handle tensor)
                           ($handle idx)
                           ($handle src)
                           dimension
                           (if descending 1 0))))
  tensor)
(defmethod tensor-sort ((tensor tensor.float) (indices tensor.long) (src tensor.float)
                        dimension descending)
  (th-float-tensor-sort ($handle tensor)
                        ($handle indices)
                        ($handle src)
                        dimension
                        (if descending 1 0))
  tensor)
(defmethod tensor-sort ((tensor tensor.float) (indices list) (src tensor.float)
                        dimension descending)
  (when indices
    (let ((idx (long-tensor-with indices)))
      (th-float-tensor-sort ($handle tensor)
                            ($handle idx)
                            ($handle src)
                            dimension
                            (if descending 1 0))))
  tensor)
(defmethod tensor-sort ((tensor tensor.double) (indices tensor.long) (src tensor.double)
                        dimension descending)
  (th-double-tensor-sort ($handle tensor)
                         ($handle indices)
                         ($handle src)
                         dimension
                         (if descending 1 0))
  tensor)
(defmethod tensor-sort ((tensor tensor.double) (indices list) (src tensor.double)
                        dimension descending)
  (when indices
    (let ((idx (long-tensor-with indices)))
      (th-double-tensor-sort ($handle tensor)
                             ($handle idx)
                             ($handle src)
                             dimension
                             (if descending 1 0))))
  tensor)

(defmethod tensor-top-k ((tensor tensor.byte) (indices tensor.long) (src tensor.byte)
                         k dim descending sorted)
  (th-byte-tensor-topk ($handle tensor) ($handle indices)
                       ($handle src)
                       k dim (if descending 1 0) (if sorted 1 0))
  tensor)
(defmethod tensor-top-k ((tensor tensor.char) (indices tensor.long) (src tensor.char)
                         k dim descending sorted)
  (th-char-tensor-topk ($handle tensor) ($handle indices)
                       ($handle src)
                       k dim (if descending 1 0) (if sorted 1 0))
  tensor)
(defmethod tensor-top-k ((tensor tensor.short) (indices tensor.long) (src tensor.short)
                         k dim descending sorted)
  (th-short-tensor-topk ($handle tensor) ($handle indices)
                        ($handle src)
                        k dim (if descending 1 0) (if sorted 1 0))
  tensor)
(defmethod tensor-top-k ((tensor tensor.int) (indices tensor.long) (src tensor.int)
                         k dim descending sorted)
  (th-int-tensor-topk ($handle tensor) ($handle indices)
                      ($handle src)
                      k dim (if descending 1 0) (if sorted 1 0))
  tensor)
(defmethod tensor-top-k ((tensor tensor.long) (indices tensor.long) (src tensor.long)
                         k dim descending sorted)
  (th-long-tensor-topk ($handle tensor) ($handle indices)
                       ($handle src)
                       k dim (if descending 1 0) (if sorted 1 0))
  tensor)
(defmethod tensor-top-k ((tensor tensor.float) (indices tensor.long) (src tensor.float)
                         k dim descending sorted)
  (th-float-tensor-topk ($handle tensor) ($handle indices)
                        ($handle src)
                        k dim (if descending 1 0) (if sorted 1 0))
  tensor)
(defmethod tensor-top-k ((tensor tensor.double) (indices tensor.long) (src tensor.double)
                         k dim descending sorted)
  (th-double-tensor-topk ($handle tensor) ($handle indices)
                         ($handle src)
                         k dim (if descending 1 0) (if sorted 1 0))
  tensor)

(defmethod tensor-tri-l ((tensor tensor.byte) (src tensor.byte) k)
  (th-byte-tensor-tril ($handle tensor) ($handle src) k)
  tensor)
(defmethod tensor-tri-l ((tensor tensor.char) (src tensor.char) k)
  (th-char-tensor-tril ($handle tensor) ($handle src) k)
  tensor)
(defmethod tensor-tri-l ((tensor tensor.short) (src tensor.short) k)
  (th-short-tensor-tril ($handle tensor) ($handle src) k)
  tensor)
(defmethod tensor-tri-l ((tensor tensor.int) (src tensor.int) k)
  (th-int-tensor-tril ($handle tensor) ($handle src) k)
  tensor)
(defmethod tensor-tri-l ((tensor tensor.long) (src tensor.long) k)
  (th-long-tensor-tril ($handle tensor) ($handle src) k)
  tensor)
(defmethod tensor-tri-l ((tensor tensor.float) (src tensor.float) k)
  (th-float-tensor-tril ($handle tensor) ($handle src) k)
  tensor)
(defmethod tensor-tri-l ((tensor tensor.double) (src tensor.double) k)
  (th-double-tensor-tril ($handle tensor) ($handle src) k)
  tensor)

(defmethod tensor-tri-u ((tensor tensor.byte) (src tensor.byte) k)
  (th-byte-tensor-triu ($handle tensor) ($handle src) k)
  tensor)
(defmethod tensor-tri-u ((tensor tensor.char) (src tensor.char) k)
  (th-char-tensor-triu ($handle tensor) ($handle src) k)
  tensor)
(defmethod tensor-tri-u ((tensor tensor.short) (src tensor.short) k)
  (th-short-tensor-triu ($handle tensor) ($handle src) k)
  tensor)
(defmethod tensor-tri-u ((tensor tensor.int) (src tensor.int) k)
  (th-int-tensor-triu ($handle tensor) ($handle src) k)
  tensor)
(defmethod tensor-tri-u ((tensor tensor.long) (src tensor.long) k)
  (th-long-tensor-triu ($handle tensor) ($handle src) k)
  tensor)
(defmethod tensor-tri-u ((tensor tensor.float) (src tensor.float) k)
  (th-float-tensor-triu ($handle tensor) ($handle src) k)
  tensor)
(defmethod tensor-tri-u ((tensor tensor.double) (src tensor.double) k)
  (th-double-tensor-triu ($handle tensor) ($handle src) k)
  tensor)

(defmethod tensor-cat ((tensor tensor.byte) dimension &rest srcs)
  (cond ((null srcs) tensor)
        ((eq 1 ($count srcs)) (tensor-set tensor (tensor-clone ($0 srcs))))
        ((eq 2 ($count srcs)) (progn
                                (th-byte-tensor-cat ($handle tensor)
                                                    ($handle ($0 srcs))
                                                    ($handle ($1 srcs))
                                                    dimension)
                                tensor))
        (t (tensor-set tensor (reduce (lambda (r e)
                                        (tensor-cat (byte-tensor) dimension r e))
                                      srcs)))))
(defmethod tensor-cat ((tensor tensor.char) dimension &rest srcs)
  (cond ((null srcs) tensor)
        ((eq 1 ($count srcs)) (tensor-set tensor (tensor-clone ($0 srcs))))
        ((eq 2 ($count srcs)) (progn
                                (th-char-tensor-cat ($handle tensor)
                                                    ($handle ($0 srcs))
                                                    ($handle ($1 srcs))
                                                    dimension)
                                tensor))
        (t (tensor-set tensor (reduce (lambda (r e)
                                        (tensor-cat (char-tensor) dimension r e))
                                      srcs)))))
(defmethod tensor-cat ((tensor tensor.short) dimension &rest srcs)
  (cond ((null srcs) tensor)
        ((eq 1 ($count srcs)) (tensor-set tensor (tensor-clone ($0 srcs))))
        ((eq 2 ($count srcs)) (progn
                                (th-short-tensor-cat ($handle tensor)
                                                     ($handle ($0 srcs))
                                                     ($handle ($1 srcs))
                                                     dimension)
                                tensor))
        (t (tensor-set tensor (reduce (lambda (r e)
                                        (tensor-cat (short-tensor) dimension r e))
                                      srcs)))))
(defmethod tensor-cat ((tensor tensor.int) dimension &rest srcs)
  (cond ((null srcs) tensor)
        ((eq 1 ($count srcs)) (tensor-set tensor (tensor-clone ($0 srcs))))
        ((eq 2 ($count srcs)) (progn
                                (th-int-tensor-cat ($handle tensor)
                                                   ($handle ($0 srcs))
                                                   ($handle ($1 srcs))
                                                   dimension)
                                tensor))
        (t (tensor-set tensor (reduce (lambda (r e)
                                        (tensor-cat (int-tensor) dimension r e))
                                      srcs)))))
(defmethod tensor-cat ((tensor tensor.long) dimension &rest srcs)
  (cond ((null srcs) tensor)
        ((eq 1 ($count srcs)) (tensor-set tensor (tensor-clone ($0 srcs))))
        ((eq 2 ($count srcs)) (progn
                                (th-long-tensor-cat ($handle tensor)
                                                    ($handle ($0 srcs))
                                                    ($handle ($1 srcs))
                                                    dimension)
                                tensor))
        (t (tensor-set tensor (reduce (lambda (r e)
                                        (tensor-cat (long-tensor) dimension r e))
                                      srcs)))))
(defmethod tensor-cat ((tensor tensor.float) dimension &rest srcs)
  (cond ((null srcs) tensor)
        ((eq 1 ($count srcs)) (tensor-set tensor (tensor-clone ($0 srcs))))
        ((eq 2 ($count srcs)) (progn
                                (th-float-tensor-cat ($handle tensor)
                                                     ($handle ($0 srcs))
                                                     ($handle ($1 srcs))
                                                     dimension)
                                tensor))
        (t (tensor-set tensor (reduce (lambda (r e)
                                        (tensor-cat (float-tensor) dimension r e))
                                      srcs)))))
(defmethod tensor-cat ((tensor tensor.double) dimension &rest srcs)
  (cond ((null srcs) tensor)
        ((eq 1 ($count srcs)) (tensor-set tensor (tensor-clone ($0 srcs))))
        ((eq 2 ($count srcs)) (progn
                                (th-double-tensor-cat ($handle tensor)
                                                      ($handle ($0 srcs))
                                                      ($handle ($1 srcs))
                                                      dimension)
                                tensor))
        (t (tensor-set tensor (reduce (lambda (r e)
                                        (tensor-cat (double-tensor) dimension r e))
                                      srcs)))))

(defmethod tensor-equal ((tensora tensor.byte) (tensorb tensor.byte))
  (eq 1 (th-byte-tensor-equal ($handle tensora) ($handle tensorb))))
(defmethod tensor-equal ((tensora tensor.char) (tensorb tensor.char))
  (eq 1 (th-char-tensor-equal ($handle tensora) ($handle tensorb))))
(defmethod tensor-equal ((tensora tensor.short) (tensorb tensor.short))
  (eq 1 (th-short-tensor-equal ($handle tensora) ($handle tensorb))))
(defmethod tensor-equal ((tensora tensor.int) (tensorb tensor.int))
  (eq 1 (th-int-tensor-equal ($handle tensora) ($handle tensorb))))
(defmethod tensor-equal ((tensora tensor.long) (tensorb tensor.long))
  (eq 1 (th-long-tensor-equal ($handle tensora) ($handle tensorb))))
(defmethod tensor-equal ((tensora tensor.float) (tensorb tensor.float))
  (eq 1 (th-float-tensor-equal ($handle tensora) ($handle tensorb))))
(defmethod tensor-equal ((tensora tensor.double) (tensorb tensor.double))
  (eq 1 (th-double-tensor-equal ($handle tensora) ($handle tensorb))))

(defmethod tensor-compare (operation (tensor tensor.byte) (src1 tensor.byte) (src2 number))
  (cond ((eq operation :lt) (progn (th-byte-tensor-lt-value ($handle tensor)
                                                            ($handle src1)
                                                            (tensor-coerce src1 src2))
                                   tensor))
        ((eq operation :le) (progn (th-byte-tensor-le-value ($handle tensor)
                                                            ($handle src1)
                                                            (tensor-coerce src1 src2))
                                   tensor))
        ((eq operation :gt) (progn (th-byte-tensor-gt-value ($handle tensor)
                                                            ($handle src1)
                                                            (tensor-coerce src1 src2))
                                   tensor))
        ((eq operation :ge) (progn (th-byte-tensor-ge-value ($handle tensor)
                                                            ($handle src1)
                                                            (tensor-coerce src1 src2))
                                   tensor))
        ((eq operation :ne) (progn (th-byte-tensor-ne-value ($handle tensor)
                                                            ($handle src1)
                                                            (tensor-coerce src1 src2))
                                   tensor))
        ((eq operation :eq) (progn (th-byte-tensor-eq-value ($handle tensor)
                                                            ($handle src1)
                                                            (tensor-coerce src1 src2))
                                   tensor))))
(defmethod tensor-compare (operation (tensor tensor.byte) (src1 tensor.byte) (src2 tensor.byte))
  (cond ((eq operation :lt) (progn (th-byte-tensor-lt-tensor ($handle tensor)
                                                             ($handle src1)
                                                             ($handle src2))
                                   tensor))
        ((eq operation :le) (progn (th-byte-tensor-le-tensor ($handle tensor)
                                                             ($handle src1)
                                                             ($handle src2))
                                   tensor))
        ((eq operation :gt) (progn (th-byte-tensor-gt-tensor ($handle tensor)
                                                             ($handle src1)
                                                             ($handle src2))
                                   tensor))
        ((eq operation :ge) (progn (th-byte-tensor-ge-tensor ($handle tensor)
                                                             ($handle src1)
                                                             ($handle src2))
                                   tensor))
        ((eq operation :ne) (progn (th-byte-tensor-ne-tensor ($handle tensor)
                                                             ($handle src1)
                                                             ($handle src2))
                                   tensor))
        ((eq operation :eq) (progn (th-byte-tensor-eq-tensor ($handle tensor)
                                                             ($handle src1)
                                                             ($handle src2))
                                   tensor))))
(defmethod tensor-compare (operation (tensor tensor.byte) (src1 tensor.char) (src2 number))
  (cond ((eq operation :lt) (progn (th-char-tensor-lt-value ($handle tensor)
                                                            ($handle src1)
                                                            (tensor-coerce src1 src2))
                                   tensor))
        ((eq operation :le) (progn (th-char-tensor-le-value ($handle tensor)
                                                            ($handle src1)
                                                            (tensor-coerce src1 src2))
                                   tensor))
        ((eq operation :gt) (progn (th-char-tensor-gt-value ($handle tensor)
                                                            ($handle src1)
                                                            (tensor-coerce src1 src2))
                                   tensor))
        ((eq operation :ge) (progn (th-char-tensor-ge-value ($handle tensor)
                                                            ($handle src1)
                                                            (tensor-coerce src1 src2))
                                   tensor))
        ((eq operation :ne) (progn (th-char-tensor-ne-value ($handle tensor)
                                                            ($handle src1)
                                                            (tensor-coerce src1 src2))
                                   tensor))
        ((eq operation :eq) (progn (th-char-tensor-eq-value ($handle tensor)
                                                            ($handle src1)
                                                            (tensor-coerce src1 src2))
                                   tensor))))
(defmethod tensor-compare (operation (tensor tensor.byte) (src1 tensor.char) (src2 tensor.char))
  (cond ((eq operation :lt) (progn (th-char-tensor-lt-tensor ($handle tensor)
                                                             ($handle src1)
                                                             ($handle src2))
                                   tensor))
        ((eq operation :le) (progn (th-char-tensor-le-tensor ($handle tensor)
                                                             ($handle src1)
                                                             ($handle src2))
                                   tensor))
        ((eq operation :gt) (progn (th-char-tensor-gt-tensor ($handle tensor)
                                                             ($handle src1)
                                                             ($handle src2))
                                   tensor))
        ((eq operation :ge) (progn (th-char-tensor-ge-tensor ($handle tensor)
                                                             ($handle src1)
                                                             ($handle src2))
                                   tensor))
        ((eq operation :ne) (progn (th-char-tensor-ne-tensor ($handle tensor)
                                                             ($handle src1)
                                                             ($handle src2))
                                   tensor))
        ((eq operation :eq) (progn (th-char-tensor-eq-tensor ($handle tensor)
                                                             ($handle src1)
                                                             ($handle src2))
                                   tensor))))
(defmethod tensor-compare (operation (tensor tensor.byte) (src1 tensor.short) (src2 number))
  (cond ((eq operation :lt) (progn (th-short-tensor-lt-value ($handle tensor)
                                                             ($handle src1)
                                                             (tensor-coerce src1 src2))
                                   tensor))
        ((eq operation :le) (progn (th-short-tensor-le-value ($handle tensor)
                                                             ($handle src1)
                                                             (tensor-coerce src1 src2))
                                   tensor))
        ((eq operation :gt) (progn (th-short-tensor-gt-value ($handle tensor)
                                                             ($handle src1)
                                                             (tensor-coerce src1 src2))
                                   tensor))
        ((eq operation :ge) (progn (th-short-tensor-ge-value ($handle tensor)
                                                             ($handle src1)
                                                             (tensor-coerce src1 src2))
                                   tensor))
        ((eq operation :ne) (progn (th-short-tensor-ne-value ($handle tensor)
                                                             ($handle src1)
                                                             (tensor-coerce src1 src2))
                                   tensor))
        ((eq operation :eq) (progn (th-short-tensor-eq-value ($handle tensor)
                                                             ($handle src1)
                                                             (tensor-coerce src1 src2))
                                   tensor))))
(defmethod tensor-compare (operation (tensor tensor.byte) (src1 tensor.short) (src2 tensor.short))
  (cond ((eq operation :lt) (progn (th-short-tensor-lt-tensor ($handle tensor)
                                                              ($handle src1)
                                                              ($handle src2))
                                   tensor))
        ((eq operation :le) (progn (th-short-tensor-le-tensor ($handle tensor)
                                                              ($handle src1)
                                                              ($handle src2))
                                   tensor))
        ((eq operation :gt) (progn (th-short-tensor-gt-tensor ($handle tensor)
                                                              ($handle src1)
                                                              ($handle src2))
                                   tensor))
        ((eq operation :ge) (progn (th-short-tensor-ge-tensor ($handle tensor)
                                                              ($handle src1)
                                                              ($handle src2))
                                   tensor))
        ((eq operation :ne) (progn (th-short-tensor-ne-tensor ($handle tensor)
                                                              ($handle src1)
                                                              ($handle src2))
                                   tensor))
        ((eq operation :eq) (progn (th-short-tensor-eq-tensor ($handle tensor)
                                                              ($handle src1)
                                                              ($handle src2))
                                   tensor))))
(defmethod tensor-compare (operation (tensor tensor.byte) (src1 tensor.int) (src2 number))
  (cond ((eq operation :lt) (progn (th-int-tensor-lt-value ($handle tensor)
                                                           ($handle src1)
                                                           (tensor-coerce src1 src2))
                                   tensor))
        ((eq operation :le) (progn (th-int-tensor-le-value ($handle tensor)
                                                           ($handle src1)
                                                           (tensor-coerce src1 src2))
                                   tensor))
        ((eq operation :gt) (progn (th-int-tensor-gt-value ($handle tensor)
                                                           ($handle src1)
                                                           (tensor-coerce src1 src2))
                                   tensor))
        ((eq operation :ge) (progn (th-int-tensor-ge-value ($handle tensor)
                                                           ($handle src1)
                                                           (tensor-coerce src1 src2))
                                   tensor))
        ((eq operation :ne) (progn (th-int-tensor-ne-value ($handle tensor)
                                                           ($handle src1)
                                                           (tensor-coerce src1 src2))
                                   tensor))
        ((eq operation :eq) (progn (th-int-tensor-eq-value ($handle tensor)
                                                           ($handle src1)
                                                           (tensor-coerce src1 src2))
                                   tensor))))
(defmethod tensor-compare (operation (tensor tensor.byte) (src1 tensor.int) (src2 tensor.int))
  (cond ((eq operation :lt) (progn (th-int-tensor-lt-tensor ($handle tensor)
                                                            ($handle src1)
                                                            ($handle src2))
                                   tensor))
        ((eq operation :le) (progn (th-int-tensor-le-tensor ($handle tensor)
                                                            ($handle src1)
                                                            ($handle src2))
                                   tensor))
        ((eq operation :gt) (progn (th-int-tensor-gt-tensor ($handle tensor)
                                                            ($handle src1)
                                                            ($handle src2))
                                   tensor))
        ((eq operation :ge) (progn (th-int-tensor-ge-tensor ($handle tensor)
                                                            ($handle src1)
                                                            ($handle src2))
                                   tensor))
        ((eq operation :ne) (progn (th-int-tensor-ne-tensor ($handle tensor)
                                                            ($handle src1)
                                                            ($handle src2))
                                   tensor))
        ((eq operation :eq) (progn (th-int-tensor-eq-tensor ($handle tensor)
                                                            ($handle src1)
                                                            ($handle src2))
                                   tensor))))
(defmethod tensor-compare (operation (tensor tensor.byte) (src1 tensor.long) (src2 number))
  (cond ((eq operation :lt) (progn (th-long-tensor-lt-value ($handle tensor)
                                                            ($handle src1)
                                                            (tensor-coerce src1 src2))
                                   tensor))
        ((eq operation :le) (progn (th-long-tensor-le-value ($handle tensor)
                                                            ($handle src1)
                                                            (tensor-coerce src1 src2))
                                   tensor))
        ((eq operation :gt) (progn (th-long-tensor-gt-value ($handle tensor)
                                                            ($handle src1)
                                                            (tensor-coerce src1 src2))
                                   tensor))
        ((eq operation :ge) (progn (th-long-tensor-ge-value ($handle tensor)
                                                            ($handle src1)
                                                            (tensor-coerce src1 src2))
                                   tensor))
        ((eq operation :ne) (progn (th-long-tensor-ne-value ($handle tensor)
                                                            ($handle src1)
                                                            (tensor-coerce src1 src2))
                                   tensor))
        ((eq operation :eq) (progn (th-long-tensor-eq-value ($handle tensor)
                                                            ($handle src1)
                                                            (tensor-coerce src1 src2))
                                   tensor))))
(defmethod tensor-compare (operation (tensor tensor.byte) (src1 tensor.long) (src2 tensor.long))
  (cond ((eq operation :lt) (progn (th-long-tensor-lt-tensor ($handle tensor)
                                                             ($handle src1)
                                                             ($handle src2))
                                   tensor))
        ((eq operation :le) (progn (th-long-tensor-le-tensor ($handle tensor)
                                                             ($handle src1)
                                                             ($handle src2))
                                   tensor))
        ((eq operation :gt) (progn (th-long-tensor-gt-tensor ($handle tensor)
                                                             ($handle src1)
                                                             ($handle src2))
                                   tensor))
        ((eq operation :ge) (progn (th-long-tensor-ge-tensor ($handle tensor)
                                                             ($handle src1)
                                                             ($handle src2))
                                   tensor))
        ((eq operation :ne) (progn (th-long-tensor-ne-tensor ($handle tensor)
                                                             ($handle src1)
                                                             ($handle src2))
                                   tensor))
        ((eq operation :eq) (progn (th-long-tensor-eq-tensor ($handle tensor)
                                                             ($handle src1)
                                                             ($handle src2))
                                   tensor))))
(defmethod tensor-compare (operation (tensor tensor.byte) (src1 tensor.float) (src2 number))
  (cond ((eq operation :lt) (progn (th-float-tensor-lt-value ($handle tensor)
                                                             ($handle src1)
                                                             (tensor-coerce src1 src2))
                                   tensor))
        ((eq operation :le) (progn (th-float-tensor-le-value ($handle tensor)
                                                             ($handle src1)
                                                             (tensor-coerce src1 src2))
                                   tensor))
        ((eq operation :gt) (progn (th-float-tensor-gt-value ($handle tensor)
                                                             ($handle src1)
                                                             (tensor-coerce src1 src2))
                                   tensor))
        ((eq operation :ge) (progn (th-float-tensor-ge-value ($handle tensor)
                                                             ($handle src1)
                                                             (tensor-coerce src1 src2))
                                   tensor))
        ((eq operation :ne) (progn (th-float-tensor-ne-value ($handle tensor)
                                                             ($handle src1)
                                                             (tensor-coerce src1 src2))
                                   tensor))
        ((eq operation :eq) (progn (th-float-tensor-eq-value ($handle tensor)
                                                             ($handle src1)
                                                             (tensor-coerce src1 src2))
                                   tensor))))
(defmethod tensor-compare (operation (tensor tensor.byte) (src1 tensor.float) (src2 tensor.float))
  (cond ((eq operation :lt) (progn (th-float-tensor-lt-tensor ($handle tensor)
                                                              ($handle src1)
                                                              ($handle src2))
                                   tensor))
        ((eq operation :le) (progn (th-float-tensor-le-tensor ($handle tensor)
                                                              ($handle src1)
                                                              ($handle src2))
                                   tensor))
        ((eq operation :gt) (progn (th-float-tensor-gt-tensor ($handle tensor)
                                                              ($handle src1)
                                                              ($handle src2))
                                   tensor))
        ((eq operation :ge) (progn (th-float-tensor-ge-tensor ($handle tensor)
                                                              ($handle src1)
                                                              ($handle src2))
                                   tensor))
        ((eq operation :ne) (progn (th-float-tensor-ne-tensor ($handle tensor)
                                                              ($handle src1)
                                                              ($handle src2))
                                   tensor))
        ((eq operation :eq) (progn (th-float-tensor-eq-tensor ($handle tensor)
                                                              ($handle src1)
                                                              ($handle src2))
                                   tensor))))
(defmethod tensor-compare (operation (tensor tensor.byte) (src1 tensor.double) (src2 number))
  (cond ((eq operation :lt) (progn (th-double-tensor-lt-value ($handle tensor)
                                                              ($handle src1)
                                                              (tensor-coerce src1 src2))
                                   tensor))
        ((eq operation :le) (progn (th-double-tensor-le-value ($handle tensor)
                                                              ($handle src1)
                                                              (tensor-coerce src1 src2))
                                   tensor))
        ((eq operation :gt) (progn (th-double-tensor-gt-value ($handle tensor)
                                                              ($handle src1)
                                                              (tensor-coerce src1 src2))
                                   tensor))
        ((eq operation :ge) (progn (th-double-tensor-ge-value ($handle tensor)
                                                              ($handle src1)
                                                              (tensor-coerce src1 src2))
                                   tensor))
        ((eq operation :ne) (progn (th-double-tensor-ne-value ($handle tensor)
                                                              ($handle src1)
                                                              (tensor-coerce src1 src2))
                                   tensor))
        ((eq operation :eq) (progn (th-double-tensor-eq-value ($handle tensor)
                                                              ($handle src1)
                                                              (tensor-coerce src1 src2))
                                   tensor))))
(defmethod tensor-compare (operation (tensor tensor.byte) (src1 tensor.double) (src2 tensor.double))
  (cond ((eq operation :lt) (progn (th-double-tensor-lt-tensor ($handle tensor)
                                                               ($handle src1)
                                                               ($handle src2))
                                   tensor))
        ((eq operation :le) (progn (th-double-tensor-le-tensor ($handle tensor)
                                                               ($handle src1)
                                                               ($handle src2))
                                   tensor))
        ((eq operation :gt) (progn (th-double-tensor-gt-tensor ($handle tensor)
                                                               ($handle src1)
                                                               ($handle src2))
                                   tensor))
        ((eq operation :ge) (progn (th-double-tensor-ge-tensor ($handle tensor)
                                                               ($handle src1)
                                                               ($handle src2))
                                   tensor))
        ((eq operation :ne) (progn (th-double-tensor-ne-tensor ($handle tensor)
                                                               ($handle src1)
                                                               ($handle src2))
                                   tensor))
        ((eq operation :eq) (progn (th-double-tensor-eq-tensor ($handle tensor)
                                                               ($handle src1)
                                                               ($handle src2))
                                   tensor))))

(defmethod tensor-compare (operation (tensor tensor.char) (src1 tensor.char) (src2 number))
  (cond ((eq operation :lt) (progn (th-char-tensor-lt-value-t ($handle tensor)
                                                              ($handle src1)
                                                              (tensor-coerce src1 src2))
                                   tensor))
        ((eq operation :le) (progn (th-char-tensor-le-value-t ($handle tensor)
                                                              ($handle src1)
                                                              (tensor-coerce src1 src2))
                                   tensor))
        ((eq operation :gt) (progn (th-char-tensor-gt-value-t ($handle tensor)
                                                              ($handle src1)
                                                              (tensor-coerce src1 src2))
                                   tensor))
        ((eq operation :ge) (progn (th-char-tensor-ge-value-t ($handle tensor)
                                                              ($handle src1)
                                                              (tensor-coerce src1 src2))
                                   tensor))
        ((eq operation :ne) (progn (th-char-tensor-ne-value-t ($handle tensor)
                                                              ($handle src1)
                                                              (tensor-coerce src1 src2))
                                   tensor))
        ((eq operation :eq) (progn (th-char-tensor-eq-value-t ($handle tensor)
                                                              ($handle src1)
                                                              (tensor-coerce src1 src2))
                                   tensor))))
(defmethod tensor-compare (operation (tensor tensor.char) (src1 tensor.char) (src2 tensor.char))
  (cond ((eq operation :lt) (progn (th-char-tensor-lt-tensor-t ($handle tensor)
                                                               ($handle src1)
                                                               ($handle src2))
                                   tensor))
        ((eq operation :le) (progn (th-char-tensor-le-tensor-t ($handle tensor)
                                                               ($handle src1)
                                                               ($handle src2))
                                   tensor))
        ((eq operation :gt) (progn (th-char-tensor-gt-tensor-t ($handle tensor)
                                                               ($handle src1)
                                                               ($handle src2))
                                   tensor))
        ((eq operation :ge) (progn (th-char-tensor-ge-tensor-t ($handle tensor)
                                                               ($handle src1)
                                                               ($handle src2))
                                   tensor))
        ((eq operation :ne) (progn (th-char-tensor-ne-tensor-t ($handle tensor)
                                                               ($handle src1)
                                                               ($handle src2))
                                   tensor))
        ((eq operation :eq) (progn (th-char-tensor-eq-tensor-t ($handle tensor)
                                                               ($handle src1)
                                                               ($handle src2))
                                   tensor))))
(defmethod tensor-compare (operation (tensor tensor.short) (src1 tensor.short) (src2 number))
  (cond ((eq operation :lt) (progn (th-short-tensor-lt-value-t ($handle tensor)
                                                               ($handle src1)
                                                               (tensor-coerce src1 src2))
                                   tensor))
        ((eq operation :le) (progn (th-short-tensor-le-value-t ($handle tensor)
                                                               ($handle src1)
                                                               (tensor-coerce src1 src2))
                                   tensor))
        ((eq operation :gt) (progn (th-short-tensor-gt-value-t ($handle tensor)
                                                               ($handle src1)
                                                               (tensor-coerce src1 src2))
                                   tensor))
        ((eq operation :ge) (progn (th-short-tensor-ge-value-t ($handle tensor)
                                                               ($handle src1)
                                                               (tensor-coerce src1 src2))
                                   tensor))
        ((eq operation :ne) (progn (th-short-tensor-ne-value-t ($handle tensor)
                                                               ($handle src1)
                                                               (tensor-coerce src1 src2))
                                   tensor))
        ((eq operation :eq) (progn (th-short-tensor-eq-value-t ($handle tensor)
                                                               ($handle src1)
                                                               (tensor-coerce src1 src2))
                                   tensor))))
(defmethod tensor-compare (operation (tensor tensor.short) (src1 tensor.short) (src2 tensor.short))
  (cond ((eq operation :lt) (progn (th-short-tensor-lt-tensor-t ($handle tensor)
                                                                ($handle src1)
                                                                ($handle src2))
                                   tensor))
        ((eq operation :le) (progn (th-short-tensor-le-tensor-t ($handle tensor)
                                                                ($handle src1)
                                                                ($handle src2))
                                   tensor))
        ((eq operation :gt) (progn (th-short-tensor-gt-tensor-t ($handle tensor)
                                                                ($handle src1)
                                                                ($handle src2))
                                   tensor))
        ((eq operation :ge) (progn (th-short-tensor-ge-tensor-t ($handle tensor)
                                                                ($handle src1)
                                                                ($handle src2))
                                   tensor))
        ((eq operation :ne) (progn (th-short-tensor-ne-tensor-t ($handle tensor)
                                                                ($handle src1)
                                                                ($handle src2))
                                   tensor))
        ((eq operation :eq) (progn (th-short-tensor-eq-tensor-t ($handle tensor)
                                                                ($handle src1)
                                                                ($handle src2))
                                   tensor))))
(defmethod tensor-compare (operation (tensor tensor.int) (src1 tensor.int) (src2 number))
  (cond ((eq operation :lt) (progn (th-int-tensor-lt-value-t ($handle tensor)
                                                             ($handle src1)
                                                             (tensor-coerce src1 src2))
                                   tensor))
        ((eq operation :le) (progn (th-int-tensor-le-value-t ($handle tensor)
                                                             ($handle src1)
                                                             (tensor-coerce src1 src2))
                                   tensor))
        ((eq operation :gt) (progn (th-int-tensor-gt-value-t ($handle tensor)
                                                             ($handle src1)
                                                             (tensor-coerce src1 src2))
                                   tensor))
        ((eq operation :ge) (progn (th-int-tensor-ge-value-t ($handle tensor)
                                                             ($handle src1)
                                                             (tensor-coerce src1 src2))
                                   tensor))
        ((eq operation :ne) (progn (th-int-tensor-ne-value-t ($handle tensor)
                                                             ($handle src1)
                                                             (tensor-coerce src1 src2))
                                   tensor))
        ((eq operation :eq) (progn (th-int-tensor-eq-value-t ($handle tensor)
                                                             ($handle src1)
                                                             (tensor-coerce src1 src2))
                                   tensor))))
(defmethod tensor-compare (operation (tensor tensor.int) (src1 tensor.int) (src2 tensor.int))
  (cond ((eq operation :lt) (progn (th-int-tensor-lt-tensor-t ($handle tensor)
                                                              ($handle src1)
                                                              ($handle src2))
                                   tensor))
        ((eq operation :le) (progn (th-int-tensor-le-tensor-t ($handle tensor)
                                                              ($handle src1)
                                                              ($handle src2))
                                   tensor))
        ((eq operation :gt) (progn (th-int-tensor-gt-tensor-t ($handle tensor)
                                                              ($handle src1)
                                                              ($handle src2))
                                   tensor))
        ((eq operation :ge) (progn (th-int-tensor-ge-tensor-t ($handle tensor)
                                                              ($handle src1)
                                                              ($handle src2))
                                   tensor))
        ((eq operation :ne) (progn (th-int-tensor-ne-tensor-t ($handle tensor)
                                                              ($handle src1)
                                                              ($handle src2))
                                   tensor))
        ((eq operation :eq) (progn (th-int-tensor-eq-tensor-t ($handle tensor)
                                                              ($handle src1)
                                                              ($handle src2))
                                   tensor))))
(defmethod tensor-compare (operation (tensor tensor.long) (src1 tensor.long) (src2 number))
  (cond ((eq operation :lt) (progn (th-long-tensor-lt-value-t ($handle tensor)
                                                              ($handle src1)
                                                              (tensor-coerce src1 src2))
                                   tensor))
        ((eq operation :le) (progn (th-long-tensor-le-value-t ($handle tensor)
                                                              ($handle src1)
                                                              (tensor-coerce src1 src2))
                                   tensor))
        ((eq operation :gt) (progn (th-long-tensor-gt-value-t ($handle tensor)
                                                              ($handle src1)
                                                              (tensor-coerce src1 src2))
                                   tensor))
        ((eq operation :ge) (progn (th-long-tensor-ge-value-t ($handle tensor)
                                                              ($handle src1)
                                                              (tensor-coerce src1 src2))
                                   tensor))
        ((eq operation :ne) (progn (th-long-tensor-ne-value-t ($handle tensor)
                                                              ($handle src1)
                                                              (tensor-coerce src1 src2))
                                   tensor))
        ((eq operation :eq) (progn (th-long-tensor-eq-value-t ($handle tensor)
                                                              ($handle src1)
                                                              (tensor-coerce src1 src2))
                                   tensor))))
(defmethod tensor-compare (operation (tensor tensor.long) (src1 tensor.long) (src2 tensor.long))
  (cond ((eq operation :lt) (progn (th-long-tensor-lt-tensor-t ($handle tensor)
                                                               ($handle src1)
                                                               ($handle src2))
                                   tensor))
        ((eq operation :le) (progn (th-long-tensor-le-tensor-t ($handle tensor)
                                                               ($handle src1)
                                                               ($handle src2))
                                   tensor))
        ((eq operation :gt) (progn (th-long-tensor-gt-tensor-t ($handle tensor)
                                                               ($handle src1)
                                                               ($handle src2))
                                   tensor))
        ((eq operation :ge) (progn (th-long-tensor-ge-tensor-t ($handle tensor)
                                                               ($handle src1)
                                                               ($handle src2))
                                   tensor))
        ((eq operation :ne) (progn (th-long-tensor-ne-tensor-t ($handle tensor)
                                                               ($handle src1)
                                                               ($handle src2))
                                   tensor))
        ((eq operation :eq) (progn (th-long-tensor-eq-tensor-t ($handle tensor)
                                                               ($handle src1)
                                                               ($handle src2))
                                   tensor))))
(defmethod tensor-compare (operation (tensor tensor.float) (src1 tensor.float) (src2 number))
  (cond ((eq operation :lt) (progn (th-float-tensor-lt-value-t ($handle tensor)
                                                               ($handle src1)
                                                               (tensor-coerce src1 src2))
                                   tensor))
        ((eq operation :le) (progn (th-float-tensor-le-value-t ($handle tensor)
                                                               ($handle src1)
                                                               (tensor-coerce src1 src2))
                                   tensor))
        ((eq operation :gt) (progn (th-float-tensor-gt-value-t ($handle tensor)
                                                               ($handle src1)
                                                               (tensor-coerce src1 src2))
                                   tensor))
        ((eq operation :ge) (progn (th-float-tensor-ge-value-t ($handle tensor)
                                                               ($handle src1)
                                                               (tensor-coerce src1 src2))
                                   tensor))
        ((eq operation :ne) (progn (th-float-tensor-ne-value-t ($handle tensor)
                                                               ($handle src1)
                                                               (tensor-coerce src1 src2))
                                   tensor))
        ((eq operation :eq) (progn (th-float-tensor-eq-value-t ($handle tensor)
                                                               ($handle src1)
                                                               (tensor-coerce src1 src2))
                                   tensor))))
(defmethod tensor-compare (operation (tensor tensor.float) (src1 tensor.float) (src2 tensor.float))
  (cond ((eq operation :lt) (progn (th-float-tensor-lt-tensor-t ($handle tensor)
                                                                ($handle src1)
                                                                ($handle src2))
                                   tensor))
        ((eq operation :le) (progn (th-float-tensor-le-tensor-t ($handle tensor)
                                                                ($handle src1)
                                                                ($handle src2))
                                   tensor))
        ((eq operation :gt) (progn (th-float-tensor-gt-tensor-t ($handle tensor)
                                                                ($handle src1)
                                                                ($handle src2))
                                   tensor))
        ((eq operation :ge) (progn (th-float-tensor-ge-tensor-t ($handle tensor)
                                                                ($handle src1)
                                                                ($handle src2))
                                   tensor))
        ((eq operation :ne) (progn (th-float-tensor-ne-tensor-t ($handle tensor)
                                                                ($handle src1)
                                                                ($handle src2))
                                   tensor))
        ((eq operation :eq) (progn (th-float-tensor-eq-tensor-t ($handle tensor)
                                                                ($handle src1)
                                                                ($handle src2))
                                   tensor))))
(defmethod tensor-compare (operation (tensor tensor.double) (src1 tensor.double) (src2 number))
  (cond ((eq operation :lt) (progn (th-double-tensor-lt-value-t ($handle tensor)
                                                                ($handle src1)
                                                                (tensor-coerce src1 src2))
                                   tensor))
        ((eq operation :le) (progn (th-double-tensor-le-value-t ($handle tensor)
                                                                ($handle src1)
                                                                (tensor-coerce src1 src2))
                                   tensor))
        ((eq operation :gt) (progn (th-double-tensor-gt-value-t ($handle tensor)
                                                                ($handle src1)
                                                                (tensor-coerce src1 src2))
                                   tensor))
        ((eq operation :ge) (progn (th-double-tensor-ge-value-t ($handle tensor)
                                                                ($handle src1)
                                                                (tensor-coerce src1 src2))
                                   tensor))
        ((eq operation :ne) (progn (th-double-tensor-ne-value-t ($handle tensor)
                                                                ($handle src1)
                                                                (tensor-coerce src1 src2))
                                   tensor))
        ((eq operation :eq) (progn (th-double-tensor-eq-value-t ($handle tensor)
                                                                ($handle src1)
                                                                (tensor-coerce src1 src2))
                                   tensor))))
(defmethod tensor-compare (operation (tensor tensor.double) (src1 tensor.double)
                           (src2 tensor.double))
  (cond ((eq operation :lt) (progn (th-double-tensor-lt-tensor-t ($handle tensor)
                                                                 ($handle src1)
                                                                 ($handle src2))
                                   tensor))
        ((eq operation :le) (progn (th-double-tensor-le-tensor-t ($handle tensor)
                                                                 ($handle src1)
                                                                 ($handle src2))
                                   tensor))
        ((eq operation :gt) (progn (th-double-tensor-gt-tensor-t ($handle tensor)
                                                                 ($handle src1)
                                                                 ($handle src2))
                                   tensor))
        ((eq operation :ge) (progn (th-double-tensor-ge-tensor-t ($handle tensor)
                                                                 ($handle src1)
                                                                 ($handle src2))
                                   tensor))
        ((eq operation :ne) (progn (th-double-tensor-ne-tensor-t ($handle tensor)
                                                                 ($handle src1)
                                                                 ($handle src2))
                                   tensor))
        ((eq operation :eq) (progn (th-double-tensor-eq-tensor-t ($handle tensor)
                                                                 ($handle src1)
                                                                 ($handle src2))
                                   tensor))))

(defmethod tensor-sigmoid ((tensor tensor.float) (src tensor.float))
  (th-float-tensor-sigmoid ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-sigmoid ((tensor tensor.double) (src tensor.double))
  (th-double-tensor-sigmoid ($handle tensor) ($handle src))
  tensor)

(defmethod tensor-log ((tensor tensor.float) (src tensor.float))
  (th-float-tensor-log ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-log ((tensor tensor.double) (src tensor.double))
  (th-double-tensor-log ($handle tensor) ($handle src))
  tensor)

(defmethod tensor-lgamma ((tensor tensor.float) (src tensor.float))
  (th-float-tensor-lgamma ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-lgamma ((tensor tensor.double) (src tensor.double))
  (th-double-tensor-lgamma ($handle tensor) ($handle src))
  tensor)

(defmethod tensor-log1p ((tensor tensor.float) (src tensor.float))
  (th-float-tensor-log1p ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-log1p ((tensor tensor.double) (src tensor.double))
  (th-double-tensor-log1p ($handle tensor) ($handle src))
  tensor)

(defmethod tensor-exp ((tensor tensor.float) (src tensor.float))
  (th-float-tensor-exp ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-exp ((tensor tensor.double) (src tensor.double))
  (th-double-tensor-exp ($handle tensor) ($handle src))
  tensor)

(defmethod tensor-cos ((tensor tensor.float) (src tensor.float))
  (th-float-tensor-cos ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-cos ((tensor tensor.double) (src tensor.double))
  (th-double-tensor-cos ($handle tensor) ($handle src))
  tensor)

(defmethod tensor-acos ((tensor tensor.float) (src tensor.float))
  (th-float-tensor-acos ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-acos ((tensor tensor.double) (src tensor.double))
  (th-double-tensor-acos ($handle tensor) ($handle src))
  tensor)

(defmethod tensor-cosh ((tensor tensor.float) (src tensor.float))
  (th-float-tensor-cosh ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-cosh ((tensor tensor.double) (src tensor.double))
  (th-double-tensor-cosh ($handle tensor) ($handle src))
  tensor)

(defmethod tensor-sin ((tensor tensor.float) (src tensor.float))
  (th-float-tensor-sin ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-sin ((tensor tensor.double) (src tensor.double))
  (th-double-tensor-sin ($handle tensor) ($handle src))
  tensor)

(defmethod tensor-asin ((tensor tensor.float) (src tensor.float))
  (th-float-tensor-asin ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-asin ((tensor tensor.double) (src tensor.double))
  (th-double-tensor-asin ($handle tensor) ($handle src))
  tensor)

(defmethod tensor-sinh ((tensor tensor.float) (src tensor.float))
  (th-float-tensor-sinh ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-sinh ((tensor tensor.double) (src tensor.double))
  (th-double-tensor-sinh ($handle tensor) ($handle src))
  tensor)

(defmethod tensor-tan ((tensor tensor.float) (src tensor.float))
  (th-float-tensor-tan ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-tan ((tensor tensor.double) (src tensor.double))
  (th-double-tensor-tan ($handle tensor) ($handle src))
  tensor)

(defmethod tensor-atan ((tensor tensor.float) (src tensor.float))
  (th-float-tensor-atan ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-atan ((tensor tensor.double) (src tensor.double))
  (th-double-tensor-atan ($handle tensor) ($handle src))
  tensor)

(defmethod tensor-atan2 ((tensor tensor.float) (tensorx tensor.float) (tensory tensor.float))
  (th-float-tensor-atan2 ($handle tensor) ($handle tensorx) ($handle tensory))
  tensor)
(defmethod tensor-atan2 ((tensor tensor.double) (tensorx tensor.double) (tensory tensor.double))
  (th-double-tensor-atan2 ($handle tensor) ($handle tensorx) ($handle tensory))
  tensor)

(defmethod tensor-tanh ((tensor tensor.float) (src tensor.float))
  (th-float-tensor-tanh ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-tanh ((tensor tensor.double) (src tensor.double))
  (th-double-tensor-tanh ($handle tensor) ($handle src))
  tensor)

(defmethod tensor-pow ((tensor tensor.float) (src tensor.float) (exponent number))
  (th-float-tensor-pow ($handle tensor) ($handle src) (tensor-coerce tensor exponent))
  tensor)
(defmethod tensor-pow ((tensor tensor.double) (src tensor.double) (exponent number))
  (th-double-tensor-pow ($handle tensor) ($handle src) (tensor-coerce tensor exponent))
  tensor)
(defmethod tensor-pow ((tensor tensor.float) (src number) (exponent tensor.float))
  (th-float-tensor-tpow ($handle tensor)
                        (tensor-coerce tensor src) ($handle exponent))
  tensor)
(defmethod tensor-pow ((tensor tensor.double) (src number) (exponent tensor.double))
  (th-double-tensor-tpow ($handle tensor)
                         (tensor-coerce tensor src) ($handle exponent))
  tensor)

(defmethod tensor-sqrt ((tensor tensor.float) (src tensor.float))
  (th-float-tensor-sqrt ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-sqrt ((tensor tensor.double) (src tensor.double))
  (th-double-tensor-sqrt ($handle tensor) ($handle src))
  tensor)

(defmethod tensor-rsqrt ((tensor tensor.float) (src tensor.float))
  (th-float-tensor-rsqrt ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-rsqrt ((tensor tensor.double) (src tensor.double))
  (th-double-tensor-rsqrt ($handle tensor) ($handle src))
  tensor)

(defmethod tensor-ceil ((tensor tensor.float) (src tensor.float))
  (th-float-tensor-ceil ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-ceil ((tensor tensor.double) (src tensor.double))
  (th-double-tensor-ceil ($handle tensor) ($handle src))
  tensor)

(defmethod tensor-floor ((tensor tensor.float) (src tensor.float))
  (th-float-tensor-floor ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-floor ((tensor tensor.double) (src tensor.double))
  (th-double-tensor-floor ($handle tensor) ($handle src))
  tensor)

(defmethod tensor-round ((tensor tensor.float) (src tensor.float))
  (th-float-tensor-round ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-round ((tensor tensor.double) (src tensor.double))
  (th-double-tensor-round ($handle tensor) ($handle src))
  tensor)

(defmethod tensor-abs ((tensor tensor.short) (src tensor.short))
  (th-short-tensor-abs ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-abs ((tensor tensor.int) (src tensor.int))
  (th-int-tensor-abs ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-abs ((tensor tensor.long) (src tensor.long))
  (th-long-tensor-abs ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-abs ((tensor tensor.float) (src tensor.float))
  (th-float-tensor-abs ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-abs ((tensor tensor.double) (src tensor.double))
  (th-double-tensor-abs ($handle tensor) ($handle src))
  tensor)

(defmethod tensor-trunc ((tensor tensor.float) (src tensor.float))
  (th-float-tensor-trunc ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-trunc ((tensor tensor.double) (src tensor.double))
  (th-double-tensor-trunc ($handle tensor) ($handle src))
  tensor)

(defmethod tensor-frac ((tensor tensor.float) (src tensor.float))
  (th-float-tensor-frac ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-frac ((tensor tensor.double) (src tensor.double))
  (th-double-tensor-frac ($handle tensor) ($handle src))
  tensor)

(defmethod tensor-lerp ((tensor tensor.float) (a tensor.float) (b tensor.float) weight)
  (th-float-tensor-lerp ($handle tensor)
                        ($handle a)
                        ($handle b)
                        (tensor-coerce a weight))
  tensor)
(defmethod tensor-lerp ((tensor tensor.double) (a tensor.double) (b tensor.double) weight)
  (th-double-tensor-lerp ($handle tensor)
                         ($handle a)
                         ($handle b)
                         (tensor-coerce a weight))
  tensor)

(defmethod tensor-mean ((tensor tensor.float) (src tensor.float) dimension keepdim)
  (th-float-tensor-mean ($handle tensor) ($handle src)
                        dimension (if keepdim 1 0))
  tensor)
(defmethod tensor-mean ((tensor tensor.double) (src tensor.double) dimension keepdim)
  (th-double-tensor-mean ($handle tensor) ($handle src)
                         dimension (if keepdim 1 0))
  tensor)

(defmethod tensor-sd ((tensor tensor.float) (src tensor.float) dimension keepdim
                      &optional biased)
  (th-float-tensor-std ($handle tensor) ($handle src)
                       dimension (if biased 1 0) (if keepdim 1 0))
  tensor)
(defmethod tensor-sd ((tensor tensor.double) (src tensor.double) dimension keepdim
                      &optional biased)
  (th-double-tensor-std ($handle tensor) ($handle src)
                        dimension (if biased 1 0) (if keepdim 1 0))
  tensor)

(defmethod tensor-var ((tensor tensor.float) (src tensor.float) dimension keepdim
                       &optional biased)
  (th-float-tensor-var ($handle tensor) ($handle src)
                       dimension (if biased 1 0) (if keepdim 1 0))
  tensor)
(defmethod tensor-var ((tensor tensor.double) (src tensor.double) dimension keepdim
                       &optional biased)
  (th-double-tensor-var ($handle tensor) ($handle src)
                        dimension (if biased 1 0) (if keepdim 1 0))
  tensor)

(defmethod tensor-norm ((tensor tensor.float) (src tensor.float) value dimension keep-dim)
  (th-float-tensor-norm ($handle tensor)
                        ($handle src)
                        (tensor-coerce tensor value)
                        dimension
                        (if keep-dim 1 0))
  tensor)
(defmethod tensor-norm ((tensor tensor.double) (src tensor.double) value dimension keep-dim)
  (th-double-tensor-norm ($handle tensor)
                         ($handle src)
                         (tensor-coerce tensor value)
                         dimension
                         (if keep-dim 1 0))
  tensor)

(defmethod tensor-renorm ((tensor tensor.float) (src tensor.float) value dimension maxnorm)
  (th-float-tensor-renorm ($handle tensor)
                          ($handle src)
                          (tensor-coerce tensor value)
                          dimension
                          (tensor-coerce tensor maxnorm))
  tensor)
(defmethod tensor-renorm ((tensor tensor.double) (src tensor.double) value dimension maxnorm)
  (th-double-tensor-renorm ($handle tensor)
                           ($handle src)
                           (tensor-coerce tensor value)
                           dimension
                           (tensor-coerce tensor maxnorm))
  tensor)

(defmethod tensor-dist ((tensora tensor.float) (tensorb tensor.float) value)
  (th-float-tensor-dist ($handle tensora)
                        ($handle tensorb)
                        (tensor-coerce tensora value)))
(defmethod tensor-dist ((tensora tensor.double) (tensorb tensor.double) value)
  (th-double-tensor-dist ($handle tensora)
                         ($handle tensorb)
                         (tensor-coerce tensora value)))

(defmethod tensor-histc ((hist tensor.float) (src tensor.float) nbins minvalue maxvalue)
  (th-float-tensor-histc ($handle hist)
                         ($handle src)
                         nbins
                         (tensor-coerce hist minvalue)
                         (tensor-coerce hist maxvalue))
  hist)
(defmethod tensor-histc ((hist tensor.double) (src tensor.double) nbins minvalue maxvalue)
  (th-double-tensor-histc ($handle hist)
                          ($handle src)
                          nbins
                          (tensor-coerce hist minvalue)
                          (tensor-coerce hist maxvalue))
  hist)

(defmethod tensor-bhistc ((hist tensor.float) (src tensor.float) nbins minvalue maxvalue)
  (th-float-tensor-bhistc ($handle hist)
                          ($handle src)
                          nbins
                          (tensor-coerce hist minvalue)
                          (tensor-coerce hist maxvalue))
  hist)
(defmethod tensor-bhistc ((hist tensor.double) (src tensor.double) nbins minvalue maxvalue)
  (th-double-tensor-bhistc ($handle hist)
                           ($handle src)
                           nbins
                           (tensor-coerce hist minvalue)
                           (tensor-coerce hist maxvalue))
  hist)

(defmethod tensor-mean-all ((tensor tensor.float))
  (th-float-tensor-mean-all ($handle tensor)))
(defmethod tensor-mean-all ((tensor tensor.double))
  (th-double-tensor-mean-all ($handle tensor)))

(defmethod tensor-var-all ((tensor tensor.float) &optional biased)
  (th-float-tensor-var-all ($handle tensor) (if biased 1 0)))
(defmethod tensor-var-all ((tensor tensor.double) &optional biased)
  (th-double-tensor-var-all ($handle tensor) (if biased 1 0)))

(defmethod tensor-sd-all ((tensor tensor.float) &optional biased)
  (th-float-tensor-std-all ($handle tensor) (if biased 1 0)))
(defmethod tensor-sd-all ((tensor tensor.double) &optional biased)
  (th-double-tensor-std-all ($handle tensor) (if biased 1 0)))

(defmethod tensor-norm-all ((tensor tensor.float) value)
  (th-float-tensor-norm-all ($handle tensor) (tensor-coerce tensor value)))
(defmethod tensor-norm-all ((tensor tensor.double) value)
  (th-double-tensor-norm-all ($handle tensor) (tensor-coerce tensor value)))

(defmethod tensor-linspace ((tensor tensor.float) a b n)
  (th-float-tensor-linspace ($handle tensor) (tensor-coerce tensor a)
                            (tensor-coerce tensor b) n)
  tensor)
(defmethod tensor-linspace ((tensor tensor.double) a b n)
  (th-double-tensor-linspace ($handle tensor) (tensor-coerce tensor a)
                             (tensor-coerce tensor b) n)
  tensor)

(defmethod tensor-logspace ((tensor tensor.float) a b n)
  (th-float-tensor-logspace ($handle tensor) (tensor-coerce tensor a)
                            (tensor-coerce tensor b) n)
  tensor)
(defmethod tensor-logspace ((tensor tensor.double) a b n)
  (th-double-tensor-logspace ($handle tensor) (tensor-coerce tensor a)
                             (tensor-coerce tensor b) n)
  tensor)

(defmethod tensor-rand ((tensor tensor.float) (size storage.long) &optional generator)
  (th-float-tensor-rand ($handle tensor)
                        ($handle (or generator *generator*))
                        ($handle size))
  tensor)
(defmethod tensor-rand ((tensor tensor.double) (size storage.long) &optional generator)
  (th-double-tensor-rand ($handle tensor)
                         ($handle (or generator *generator*))
                         ($handle size))
  tensor)

(defmethod tensor-rand ((tensor tensor.float) (size list) &optional generator)
  (when size
    (let ((s (long-storage-with size)))
      (th-float-tensor-rand ($handle tensor)
                            ($handle (or generator *generator*))
                            ($handle s))))
  tensor)
(defmethod tensor-rand ((tensor tensor.double) (size list) &optional generator)
  (when size
    (let ((s (long-storage-with size)))
      (th-double-tensor-rand ($handle tensor)
                             ($handle (or generator *generator*))
                             ($handle s))))
  tensor)

(defmethod tensor-randn ((tensor tensor.float) (size storage.long) &optional generator)
  (th-float-tensor-randn ($handle tensor)
                         ($handle (or generator *generator*))
                         ($handle size))
  tensor)
(defmethod tensor-randn ((tensor tensor.double) (size storage.long) &optional generator)
  (th-double-tensor-randn ($handle tensor)
                          ($handle (or generator *generator*))
                          ($handle size))
  tensor)

(defmethod tensor-randn ((tensor tensor.float) (size list) &optional generator)
  (when size
    (let ((s (long-storage-with size)))
      (th-float-tensor-randn ($handle tensor)
                             ($handle (or generator *generator*))
                             ($handle s))))
  tensor)
(defmethod tensor-randn ((tensor tensor.double) (size list) &optional generator)
  (when size
    (let ((s (long-storage-with size)))
      (th-double-tensor-randn ($handle tensor)
                              ($handle (or generator *generator*))
                              ($handle s))))
  tensor)

(defmethod tensor-logical-all ((tensor tensor.byte))
  (eq 1 (th-byte-tensor-logical-all ($handle tensor))))

(defmethod tensor-logical-any ((tensor tensor.byte))
  (eq 1 (th-byte-tensor-logical-any ($handle tensor))))

(defmethod tensor-gesv ((rb tensor.float) (ra tensor.float) (b tensor.float) (a tensor.float))
  (th-float-tensor-gesv ($handle rb)
                        ($handle ra)
                        ($handle b)
                        ($handle a)))
(defmethod tensor-gesv ((rb tensor.double) (ra tensor.double) (b tensor.double) (a tensor.double))
  (th-double-tensor-gesv ($handle rb)
                         ($handle ra)
                         ($handle b)
                         ($handle a)))

(defmethod tensor-trtrs ((rb tensor.float) (ra tensor.float) (b tensor.float) (a tensor.float)
                         uplo trans diag)
  (th-float-tensor-trtrs ($handle rb)
                         ($handle ra)
                         ($handle b)
                         ($handle a)
                         (if uplo "U" "L")
                         (if trans "T" "N")
                         (if diag "U" "N")))
(defmethod tensor-trtrs ((rb tensor.double) (ra tensor.double) (b tensor.double) (a tensor.double)
                         uplo trans diag)
  (th-double-tensor-trtrs ($handle rb)
                          ($handle ra)
                          ($handle b)
                          ($handle a)
                          (if uplo "U" "L")
                          (if trans "T" "N")
                          (if diag "U" "N")))

(defmethod tensor-gels ((rb tensor.float) (ra tensor.float) (b tensor.float) (a tensor.float))
  (th-float-tensor-gels ($handle rb)
                        ($handle ra)
                        ($handle b)
                        ($handle a)))
(defmethod tensor-gels ((rb tensor.double) (ra tensor.double) (b tensor.double) (a tensor.double))
  (th-double-tensor-gels ($handle rb)
                         ($handle ra)
                         ($handle b)
                         ($handle a)))

(defmethod tensor-syev ((re tensor.float) (rv tensor.float) (a tensor.float) jobz uplo)
  (th-float-tensor-syev ($handle re)
                        ($handle rv)
                        ($handle a)
                        (if jobz "V" "N")
                        (if uplo "U" "L")))
(defmethod tensor-syev ((re tensor.double) (rv tensor.double) (a tensor.double) jobz uplo)
  (th-double-tensor-syev ($handle re)
                         ($handle rv)
                         ($handle a)
                         (if jobz "V" "N")
                         (if uplo "U" "L")))

(defmethod tensor-geev ((re tensor.float) (rv tensor.float) (a tensor.float) jobvr)
  (th-float-tensor-geev ($handle re)
                        ($handle rv)
                        ($handle a)
                        (if jobvr "V" "N")))
(defmethod tensor-geev ((re tensor.double) (rv tensor.double) (a tensor.double) jobvr)
  (th-double-tensor-geev ($handle re)
                         ($handle rv)
                         ($handle a)
                         (if jobvr "V" "N")))

(defmethod tensor-gesvd ((ru tensor.float) (rs tensor.float) (rv tensor.float)
                         (a tensor.float) jobu)
  (th-float-tensor-gesvd ($handle ru)
                         ($handle rs)
                         ($handle rv)
                         ($handle a)
                         (if jobu "A" "S")))
(defmethod tensor-gesvd ((ru tensor.double) (rs tensor.double) (rv tensor.double)
                         (a tensor.double) jobu)
  (th-double-tensor-gesvd ($handle ru)
                          ($handle rs)
                          ($handle rv)
                          ($handle a)
                          (if jobu "A" "S")))

(defmethod tensor-gesvd2 ((ru tensor.float) (rs tensor.float) (rv tensor.float)
                          (ra tensor.float) (a tensor.float) jobu)
  (th-float-tensor-gesvd2 ($handle ru)
                          ($handle rs)
                          ($handle rv)
                          ($handle ra)
                          ($handle a)
                          (if jobu "A" "S")))
(defmethod tensor-gesvd2 ((ru tensor.double) (rs tensor.double) (rv tensor.double)
                          (ra tensor.double) (a tensor.double) jobu)
  (th-double-tensor-gesvd2 ($handle ru)
                           ($handle rs)
                           ($handle rv)
                           ($handle ra)
                           ($handle a)
                           (if jobu "A" "S")))

(defmethod tensor-getri ((ra tensor.float) (a tensor.float))
  (th-float-tensor-getri ($handle ra) ($handle a)))
(defmethod tensor-getri ((ra tensor.double) (a tensor.double))
  (th-double-tensor-getri ($handle ra) ($handle a)))

(defmethod tensor-potrf ((ra tensor.float) (a tensor.float) uplo)
  (th-float-tensor-potrf ($handle ra)
                         ($handle a)
                         (if uplo "U" "L")))
(defmethod tensor-potrf ((ra tensor.double) (a tensor.double) uplo)
  (th-double-tensor-potrf ($handle ra)
                          ($handle a)
                          (if uplo "U" "L")))

(defmethod tensor-potrs ((rb tensor.float) (b tensor.float) (a tensor.float) uplo)
  (th-float-tensor-potrs ($handle rb)
                         ($handle b)
                         ($handle a)
                         (if uplo "U" "L")))
(defmethod tensor-potrs ((rb tensor.double) (b tensor.double) (a tensor.double) uplo)
  (th-double-tensor-potrs ($handle rb)
                          ($handle b)
                          ($handle a)
                          (if uplo "U" "L")))

(defmethod tensor-potri ((ra tensor.float) (a tensor.float) uplo)
  (th-float-tensor-potri ($handle ra)
                         ($handle a)
                         (if uplo "U" "L")))
(defmethod tensor-potri ((ra tensor.double) (a tensor.double) uplo)
  (th-double-tensor-potri ($handle ra)
                          ($handle a)
                          (if uplo "U" "L")))

(defmethod tensor-qr ((rq tensor.float) (rr tensor.float) (a tensor.float))
  (th-float-tensor-qr ($handle rq) ($handle rr) ($handle a)))
(defmethod tensor-qr ((rq tensor.double) (rr tensor.double) (a tensor.double))
  (th-double-tensor-qr ($handle rq) ($handle rr) ($handle a)))

(defmethod tensor-geqrf ((ra tensor.float) (rtau tensor.float) (a tensor.float))
  (th-float-tensor-geqrf ($handle ra) ($handle rtau)
                         ($handle a)))
(defmethod tensor-geqrf ((ra tensor.double) (rtau tensor.double) (a tensor.double))
  (th-double-tensor-geqrf ($handle ra) ($handle rtau)
                          ($handle a)))

(defmethod tensor-orgqr ((ra tensor.float) (a tensor.float) (tau tensor.float))
  (th-float-tensor-orgqr ($handle ra) ($handle a) ($handle tau)))
(defmethod tensor-orgqr ((ra tensor.double) (a tensor.double) (tau tensor.double))
  (th-double-tensor-orgqr ($handle ra) ($handle a) ($handle tau)))

(defmethod tensor-ormqr ((ra tensor.float) (a tensor.float) (tau tensor.float)
                         (c tensor.float) left trans)
  (th-float-tensor-ormqr ($handle ra)
                         ($handle a)
                         ($handle tau)
                         ($handle c)
                         (if left "L" "R")
                         (if trans "T" "N")))
(defmethod tensor-ormqr ((ra tensor.double) (a tensor.double) (tau tensor.double)
                         (c tensor.double) left trans)
  (th-double-tensor-ormqr ($handle ra)
                          ($handle a)
                          ($handle tau)
                          ($handle c)
                          (if left "L" "R")
                          (if trans "T" "N")))

(defmethod tensor-pstrf ((ra tensor.float) (rpiv tensor.int) (a tensor.float) uplo tol)
  (th-float-tensor-pstrf ($handle ra)
                         ($handle rpiv)
                         ($handle a)
                         (if uplo "U" "L")
                         (tensor-coerce ra tol)))
(defmethod tensor-pstrf ((ra tensor.double) (rpiv tensor.int) (a tensor.double) uplo tol)
  (th-double-tensor-pstrf ($handle ra)
                          ($handle rpiv)
                          ($handle a)
                          (if uplo "U" "L")
                          (tensor-coerce ra tol)))

(defmethod tensor-btrifact ((ra tensor.float) (rpivots tensor.int) (rinfo tensor.int)
                            (a tensor.float) pivot)
  (th-float-tensor-btrifact ($handle ra)
                            ($handle rpivots)
                            ($handle rinfo)
                            (if pivot 1 0)
                            ($handle a)))
(defmethod tensor-btrifact ((ra tensor.double) (rpivots tensor.int) (rinfo tensor.int)
                            (a tensor.double) pivot)
  (th-double-tensor-btrifact ($handle ra)
                             ($handle rpivots)
                             ($handle rinfo)
                             (if pivot 1 0)
                             ($handle a)))

(defmethod tensor-btrisolve ((rb tensor.float) (b tensor.float) (atf tensor.float)
                             (pivots tensor.int))
  (th-float-tensor-btrisolve ($handle rb)
                             ($handle b)
                             ($handle atf)
                             ($handle pivots)))
(defmethod tensor-btrisolve ((rb tensor.double) (b tensor.double) (atf tensor.double)
                             (pivots tensor.int))
  (th-double-tensor-btrisolve ($handle rb)
                              ($handle b)
                              ($handle atf)
                              ($handle pivots)))

(defmethod tensor-conv-2d-rev-ger ((result tensor.byte) beta alpha (tensor tensor.byte)
                                   (k tensor.byte) srow scol)
  (th-byte-tensor-conv-2d-rev-ger ($handle result)
                                  (tensor-coerce tensor beta)
                                  (tensor-coerce tensor alpha)
                                  ($handle tensor)
                                  ($handle k)
                                  srow scol))
(defmethod tensor-conv-2d-rev-ger ((result tensor.char) beta alpha (tensor tensor.char)
                                   (k tensor.char) srow scol)
  (th-char-tensor-conv-2d-rev-ger ($handle result)
                                  (tensor-coerce tensor beta)
                                  (tensor-coerce tensor alpha)
                                  ($handle tensor)
                                  ($handle k)
                                  srow scol))
(defmethod tensor-conv-2d-rev-ger ((result tensor.short) beta alpha (tensor tensor.short)
                                   (k tensor.short) srow scol)
  (th-short-tensor-conv-2d-rev-ger ($handle result)
                                   (tensor-coerce tensor beta)
                                   (tensor-coerce tensor alpha)
                                   ($handle tensor)
                                   ($handle k)
                                   srow scol))
(defmethod tensor-conv-2d-rev-ger ((result tensor.int) beta alpha (tensor tensor.int)
                                   (k tensor.int) srow scol)
  (th-int-tensor-conv-2d-rev-ger ($handle result)
                                 (tensor-coerce tensor beta)
                                 (tensor-coerce tensor alpha)
                                 ($handle tensor)
                                 ($handle k)
                                 srow scol))
(defmethod tensor-conv-2d-rev-ger ((result tensor.long) beta alpha (tensor tensor.long)
                                   (k tensor.long) srow scol)
  (th-long-tensor-conv-2d-rev-ger ($handle result)
                                  (tensor-coerce tensor beta)
                                  (tensor-coerce tensor alpha)
                                  ($handle tensor)
                                  ($handle k)
                                  srow scol))
(defmethod tensor-conv-2d-rev-ger ((result tensor.float) beta alpha (tensor tensor.float)
                                   (k tensor.float) srow scol)
  (th-float-tensor-conv-2d-rev-ger ($handle result)
                                   (tensor-coerce tensor beta)
                                   (tensor-coerce tensor alpha)
                                   ($handle tensor)
                                   ($handle k)
                                   srow scol))
(defmethod tensor-conv-2d-rev-ger ((result tensor.double) beta alpha (tensor tensor.double)
                                   (k tensor.double) srow scol)
  (th-double-tensor-conv-2d-rev-ger ($handle result)
                                    (tensor-coerce tensor beta)
                                    (tensor-coerce tensor alpha)
                                    ($handle tensor)
                                    ($handle k)
                                    srow scol))

(defmethod tensor-conv-2d-rev-germ ((result tensor.byte) beta alpha (tensor tensor.byte)
                                    (k tensor.byte) srow scol)
  (th-byte-tensor-conv-2d-rev-germ ($handle result)
                                   (tensor-coerce tensor beta)
                                   (tensor-coerce tensor alpha)
                                   ($handle tensor)
                                   ($handle k)
                                   srow scol))
(defmethod tensor-conv-2d-rev-germ ((result tensor.char) beta alpha (tensor tensor.char)
                                    (k tensor.char) srow scol)
  (th-char-tensor-conv-2d-rev-germ ($handle result)
                                   (tensor-coerce tensor beta)
                                   (tensor-coerce tensor alpha)
                                   ($handle tensor)
                                   ($handle k)
                                   srow scol))
(defmethod tensor-conv-2d-rev-germ ((result tensor.short) beta alpha (tensor tensor.short)
                                    (k tensor.short) srow scol)
  (th-short-tensor-conv-2d-rev-germ ($handle result)
                                    (tensor-coerce tensor beta)
                                    (tensor-coerce tensor alpha)
                                    ($handle tensor)
                                    ($handle k)
                                    srow scol))
(defmethod tensor-conv-2d-rev-germ ((result tensor.int) beta alpha (tensor tensor.int)
                                    (k tensor.int) srow scol)
  (th-int-tensor-conv-2d-rev-germ ($handle result)
                                  (tensor-coerce tensor beta)
                                  (tensor-coerce tensor alpha)
                                  ($handle tensor)
                                  ($handle k)
                                  srow scol))
(defmethod tensor-conv-2d-rev-germ ((result tensor.long) beta alpha (tensor tensor.long)
                                    (k tensor.long) srow scol)
  (th-long-tensor-conv-2d-rev-germ ($handle result)
                                   (tensor-coerce tensor beta)
                                   (tensor-coerce tensor alpha)
                                   ($handle tensor)
                                   ($handle k)
                                   srow scol))
(defmethod tensor-conv-2d-rev-germ ((result tensor.float) beta alpha (tensor tensor.float)
                                    (k tensor.float) srow scol)
  (th-float-tensor-conv-2d-rev-germ ($handle result)
                                    (tensor-coerce tensor beta)
                                    (tensor-coerce tensor alpha)
                                    ($handle tensor)
                                    ($handle k)
                                    srow scol))
(defmethod tensor-conv-2d-rev-germ ((result tensor.double) beta alpha (tensor tensor.double)
                                    (k tensor.double) srow scol)
  (th-double-tensor-conv-2d-rev-germ ($handle result)
                                     (tensor-coerce tensor beta)
                                     (tensor-coerce tensor alpha)
                                     ($handle tensor)
                                     ($handle k)
                                     srow scol))

(defmethod tensor-conv-2d-ger ((result tensor.byte) beta alpha (tensor tensor.byte)
                               (k tensor.byte) srow scol vf xc)
  (th-byte-tensor-conv-2d-ger ($handle result)
                              (tensor-coerce tensor beta)
                              (tensor-coerce tensor alpha)
                              ($handle tensor)
                              ($handle k)
                              srow scol vf xc))
(defmethod tensor-conv-2d-ger ((result tensor.char) beta alpha (tensor tensor.char)
                               (k tensor.char) srow scol vf xc)
  (th-char-tensor-conv-2d-ger ($handle result)
                              (tensor-coerce tensor beta)
                              (tensor-coerce tensor alpha)
                              ($handle tensor)
                              ($handle k)
                              srow scol vf xc))
(defmethod tensor-conv-2d-ger ((result tensor.short) beta alpha (tensor tensor.short)
                               (k tensor.short) srow scol vf xc)
  (th-short-tensor-conv-2d-ger ($handle result)
                               (tensor-coerce tensor beta)
                               (tensor-coerce tensor alpha)
                               ($handle tensor)
                               ($handle k)
                               srow scol vf xc))
(defmethod tensor-conv-2d-ger ((result tensor.int) beta alpha (tensor tensor.int)
                               (k tensor.int) srow scol vf xc)
  (th-int-tensor-conv-2d-ger ($handle result)
                             (tensor-coerce tensor beta)
                             (tensor-coerce tensor alpha)
                             ($handle tensor)
                             ($handle k)
                             srow scol vf xc))
(defmethod tensor-conv-2d-ger ((result tensor.long) beta alpha (tensor tensor.long)
                               (k tensor.long) srow scol vf xc)
  (th-long-tensor-conv-2d-ger ($handle result)
                              (tensor-coerce tensor beta)
                              (tensor-coerce tensor alpha)
                              ($handle tensor)
                              ($handle k)
                              srow scol vf xc))
(defmethod tensor-conv-2d-ger ((result tensor.float) beta alpha (tensor tensor.float)
                               (k tensor.float) srow scol vf xc)
  (th-float-tensor-conv-2d-ger ($handle result)
                               (tensor-coerce tensor beta)
                               (tensor-coerce tensor alpha)
                               ($handle tensor)
                               ($handle k)
                               srow scol vf xc))
(defmethod tensor-conv-2d-ger ((result tensor.double) beta alpha (tensor tensor.double)
                               (k tensor.double) srow scol vf xc)
  (th-double-tensor-conv-2d-ger ($handle result)
                                (tensor-coerce tensor beta)
                                (tensor-coerce tensor alpha)
                                ($handle tensor)
                                ($handle k)
                                srow scol vf xc))

(defmethod tensor-conv-2d-mv ((result tensor.byte) beta alpha (tensor tensor.byte)
                              (k tensor.byte) srow scol vf xc)
  (th-byte-tensor-conv-2d-mv ($handle result)
                             (tensor-coerce tensor beta)
                             (tensor-coerce tensor alpha)
                             ($handle tensor)
                             ($handle k)
                             srow scol vf xc))
(defmethod tensor-conv-2d-mv ((result tensor.char) beta alpha (tensor tensor.char)
                              (k tensor.char) srow scol vf xc)
  (th-char-tensor-conv-2d-mv ($handle result)
                             (tensor-coerce tensor beta)
                             (tensor-coerce tensor alpha)
                             ($handle tensor)
                             ($handle k)
                             srow scol vf xc))
(defmethod tensor-conv-2d-mv ((result tensor.short) beta alpha (tensor tensor.short)
                              (k tensor.short) srow scol vf xc)
  (th-short-tensor-conv-2d-mv ($handle result)
                              (tensor-coerce tensor beta)
                              (tensor-coerce tensor alpha)
                              ($handle tensor)
                              ($handle k)
                              srow scol vf xc))
(defmethod tensor-conv-2d-mv ((result tensor.int) beta alpha (tensor tensor.int)
                              (k tensor.int) srow scol vf xc)
  (th-int-tensor-conv-2d-mv ($handle result)
                            (tensor-coerce tensor beta)
                            (tensor-coerce tensor alpha)
                            ($handle tensor)
                            ($handle k)
                            srow scol vf xc))
(defmethod tensor-conv-2d-mv ((result tensor.long) beta alpha (tensor tensor.long)
                              (k tensor.long) srow scol vf xc)
  (th-long-tensor-conv-2d-mv ($handle result)
                             (tensor-coerce tensor beta)
                             (tensor-coerce tensor alpha)
                             ($handle tensor)
                             ($handle k)
                             srow scol vf xc))
(defmethod tensor-conv-2d-mv ((result tensor.float) beta alpha (tensor tensor.float)
                              (k tensor.float) srow scol vf xc)
  (th-float-tensor-conv-2d-mv ($handle result)
                              (tensor-coerce tensor beta)
                              (tensor-coerce tensor alpha)
                              ($handle tensor)
                              ($handle k)
                              srow scol vf xc))
(defmethod tensor-conv-2d-mv ((result tensor.double) beta alpha (tensor tensor.double)
                              (k tensor.double) srow scol vf xc)
  (th-double-tensor-conv-2d-mv ($handle result)
                               (tensor-coerce tensor beta)
                               (tensor-coerce tensor alpha)
                               ($handle tensor)
                               ($handle k)
                               srow scol vf xc))

(defmethod tensor-conv-2d-mm ((result tensor.byte) beta alpha (tensor tensor.byte)
                              (k tensor.byte) srow scol vf xc)
  (th-byte-tensor-conv-2d-mm ($handle result)
                             (tensor-coerce tensor beta)
                             (tensor-coerce tensor alpha)
                             ($handle tensor)
                             ($handle k)
                             srow scol vf xc))
(defmethod tensor-conv-2d-mm ((result tensor.char) beta alpha (tensor tensor.char)
                              (k tensor.char) srow scol vf xc)
  (th-char-tensor-conv-2d-mm ($handle result)
                             (tensor-coerce tensor beta)
                             (tensor-coerce tensor alpha)
                             ($handle tensor)
                             ($handle k)
                             srow scol vf xc))
(defmethod tensor-conv-2d-mm ((result tensor.short) beta alpha (tensor tensor.short)
                              (k tensor.short) srow scol vf xc)
  (th-short-tensor-conv-2d-mm ($handle result)
                              (tensor-coerce tensor beta)
                              (tensor-coerce tensor alpha)
                              ($handle tensor)
                              ($handle k)
                              srow scol vf xc))
(defmethod tensor-conv-2d-mm ((result tensor.int) beta alpha (tensor tensor.int)
                              (k tensor.int) srow scol vf xc)
  (th-int-tensor-conv-2d-mm ($handle result)
                            (tensor-coerce tensor beta)
                            (tensor-coerce tensor alpha)
                            ($handle tensor)
                            ($handle k)
                            srow scol vf xc))
(defmethod tensor-conv-2d-mm ((result tensor.long) beta alpha (tensor tensor.long)
                              (k tensor.long) srow scol vf xc)
  (th-long-tensor-conv-2d-mm ($handle result)
                             (tensor-coerce tensor beta)
                             (tensor-coerce tensor alpha)
                             ($handle tensor)
                             ($handle k)
                             srow scol vf xc))
(defmethod tensor-conv-2d-mm ((result tensor.float) beta alpha (tensor tensor.float)
                              (k tensor.float) srow scol vf xc)
  (th-float-tensor-conv-2d-mm ($handle result)
                              (tensor-coerce tensor beta)
                              (tensor-coerce tensor alpha)
                              ($handle tensor)
                              ($handle k)
                              srow scol vf xc))
(defmethod tensor-conv-2d-mm ((result tensor.double) beta alpha (tensor tensor.double)
                              (k tensor.double) srow scol vf xc)
  (th-double-tensor-conv-2d-mm ($handle result)
                               (tensor-coerce tensor beta)
                               (tensor-coerce tensor alpha)
                               ($handle tensor)
                               ($handle k)
                               srow scol vf xc))

(defmethod tensor-conv-2d-mul ((result tensor.byte) beta alpha (tensor tensor.byte)
                               (k tensor.byte) srow scol vf xc)
  (th-byte-tensor-conv-2d-mul ($handle result)
                              (tensor-coerce tensor beta)
                              (tensor-coerce tensor alpha)
                              ($handle tensor)
                              ($handle k)
                              srow scol vf xc))
(defmethod tensor-conv-2d-mul ((result tensor.char) beta alpha (tensor tensor.char)
                               (k tensor.char) srow scol vf xc)
  (th-char-tensor-conv-2d-mul ($handle result)
                              (tensor-coerce tensor beta)
                              (tensor-coerce tensor alpha)
                              ($handle tensor)
                              ($handle k)
                              srow scol vf xc))
(defmethod tensor-conv-2d-mul ((result tensor.short) beta alpha (tensor tensor.short)
                               (k tensor.short) srow scol vf xc)
  (th-short-tensor-conv-2d-mul ($handle result)
                               (tensor-coerce tensor beta)
                               (tensor-coerce tensor alpha)
                               ($handle tensor)
                               ($handle k)
                               srow scol vf xc))
(defmethod tensor-conv-2d-mul ((result tensor.int) beta alpha (tensor tensor.int)
                               (k tensor.int) srow scol vf xc)
  (th-int-tensor-conv-2d-mul ($handle result)
                             (tensor-coerce tensor beta)
                             (tensor-coerce tensor alpha)
                             ($handle tensor)
                             ($handle k)
                             srow scol vf xc))
(defmethod tensor-conv-2d-mul ((result tensor.long) beta alpha (tensor tensor.long)
                               (k tensor.long) srow scol vf xc)
  (th-long-tensor-conv-2d-mul ($handle result)
                              (tensor-coerce tensor beta)
                              (tensor-coerce tensor alpha)
                              ($handle tensor)
                              ($handle k)
                              srow scol vf xc))
(defmethod tensor-conv-2d-mul ((result tensor.float) beta alpha (tensor tensor.float)
                               (k tensor.float) srow scol vf xc)
  (th-float-tensor-conv-2d-mul ($handle result)
                               (tensor-coerce tensor beta)
                               (tensor-coerce tensor alpha)
                               ($handle tensor)
                               ($handle k)
                               srow scol vf xc))
(defmethod tensor-conv-2d-mul ((result tensor.double) beta alpha (tensor tensor.double)
                               (k tensor.double) srow scol vf xc)
  (th-double-tensor-conv-2d-mul ($handle result)
                                (tensor-coerce tensor beta)
                                (tensor-coerce tensor alpha)
                                ($handle tensor)
                                ($handle k)
                                srow scol vf xc))

(defmethod tensor-conv-2d-cmul ((result tensor.byte) beta alpha (tensor tensor.byte)
                                (k tensor.byte) srow scol vf xc)
  (th-byte-tensor-conv-2d-cmul ($handle result)
                               (tensor-coerce tensor beta)
                               (tensor-coerce tensor alpha)
                               ($handle tensor)
                               ($handle k)
                               srow scol vf xc))
(defmethod tensor-conv-2d-cmul ((result tensor.char) beta alpha (tensor tensor.char)
                                (k tensor.char) srow scol vf xc)
  (th-char-tensor-conv-2d-cmul ($handle result)
                               (tensor-coerce tensor beta)
                               (tensor-coerce tensor alpha)
                               ($handle tensor)
                               ($handle k)
                               srow scol vf xc))
(defmethod tensor-conv-2d-cmul ((result tensor.short) beta alpha (tensor tensor.short)
                                (k tensor.short) srow scol vf xc)
  (th-short-tensor-conv-2d-cmul ($handle result)
                                (tensor-coerce tensor beta)
                                (tensor-coerce tensor alpha)
                                ($handle tensor)
                                ($handle k)
                                srow scol vf xc))
(defmethod tensor-conv-2d-cmul ((result tensor.int) beta alpha (tensor tensor.int)
                                (k tensor.int) srow scol vf xc)
  (th-int-tensor-conv-2d-cmul ($handle result)
                              (tensor-coerce tensor beta)
                              (tensor-coerce tensor alpha)
                              ($handle tensor)
                              ($handle k)
                              srow scol vf xc))
(defmethod tensor-conv-2d-cmul ((result tensor.long) beta alpha (tensor tensor.long)
                                (k tensor.long) srow scol vf xc)
  (th-long-tensor-conv-2d-cmul ($handle result)
                               (tensor-coerce tensor beta)
                               (tensor-coerce tensor alpha)
                               ($handle tensor)
                               ($handle k)
                               srow scol vf xc))
(defmethod tensor-conv-2d-cmul ((result tensor.float) beta alpha (tensor tensor.float)
                                (k tensor.float) srow scol vf xc)
  (th-float-tensor-conv-2d-cmul ($handle result)
                                (tensor-coerce tensor beta)
                                (tensor-coerce tensor alpha)
                                ($handle tensor)
                                ($handle k)
                                srow scol vf xc))
(defmethod tensor-conv-2d-cmul ((result tensor.double) beta alpha (tensor tensor.double)
                                (k tensor.double) srow scol vf xc)
  (th-double-tensor-conv-2d-cmul ($handle result)
                                 (tensor-coerce tensor beta)
                                 (tensor-coerce tensor alpha)
                                 ($handle tensor)
                                 ($handle k)
                                 srow scol vf xc))

(defmethod tensor-conv-3d-rev-ger ((result tensor.byte) beta alpha (tensor tensor.byte)
                                   (k tensor.byte) sdepth srow scol)
  (th-byte-tensor-conv-3d-rev-ger ($handle result)
                                  (tensor-coerce tensor beta)
                                  (tensor-coerce tensor alpha)
                                  ($handle tensor)
                                  ($handle k)
                                  sdepth srow scol))
(defmethod tensor-conv-3d-rev-ger ((result tensor.char) beta alpha (tensor tensor.char)
                                   (k tensor.char) sdepth srow scol)
  (th-char-tensor-conv-3d-rev-ger ($handle result)
                                  (tensor-coerce tensor beta)
                                  (tensor-coerce tensor alpha)
                                  ($handle tensor)
                                  ($handle k)
                                  sdepth srow scol))
(defmethod tensor-conv-3d-rev-ger ((result tensor.short) beta alpha (tensor tensor.short)
                                   (k tensor.short) sdepth srow scol)
  (th-short-tensor-conv-3d-rev-ger ($handle result)
                                   (tensor-coerce tensor beta)
                                   (tensor-coerce tensor alpha)
                                   ($handle tensor)
                                   ($handle k)
                                   sdepth srow scol))
(defmethod tensor-conv-3d-rev-ger ((result tensor.int) beta alpha (tensor tensor.int)
                                   (k tensor.int) sdepth srow scol)
  (th-int-tensor-conv-3d-rev-ger ($handle result)
                                 (tensor-coerce tensor beta)
                                 (tensor-coerce tensor alpha)
                                 ($handle tensor)
                                 ($handle k)
                                 sdepth srow scol))
(defmethod tensor-conv-3d-rev-ger ((result tensor.long) beta alpha (tensor tensor.long)
                                   (k tensor.long) sdepth srow scol)
  (th-long-tensor-conv-3d-rev-ger ($handle result)
                                  (tensor-coerce tensor beta)
                                  (tensor-coerce tensor alpha)
                                  ($handle tensor)
                                  ($handle k)
                                  sdepth srow scol))
(defmethod tensor-conv-3d-rev-ger ((result tensor.float) beta alpha (tensor tensor.float)
                                   (k tensor.float) sdepth srow scol)
  (th-float-tensor-conv-3d-rev-ger ($handle result)
                                   (tensor-coerce tensor beta)
                                   (tensor-coerce tensor alpha)
                                   ($handle tensor)
                                   ($handle k)
                                   sdepth srow scol))
(defmethod tensor-conv-3d-rev-ger ((result tensor.double) beta alpha (tensor tensor.double)
                                   (k tensor.double) sdepth srow scol)
  (th-double-tensor-conv-3d-rev-ger ($handle result)
                                    (tensor-coerce tensor beta)
                                    (tensor-coerce tensor alpha)
                                    ($handle tensor)
                                    ($handle k)
                                    sdepth srow scol))

(defmethod tensor-conv-3d-ger ((result tensor.byte) beta alpha (tensor tensor.byte)
                               (k tensor.byte) sdepth srow scol vf xc)
  (th-byte-tensor-conv-3d-ger ($handle result)
                              (tensor-coerce tensor beta)
                              (tensor-coerce tensor alpha)
                              ($handle tensor)
                              ($handle k)
                              sdepth srow scol vf xc))
(defmethod tensor-conv-3d-ger ((result tensor.char) beta alpha (tensor tensor.char)
                               (k tensor.char) sdepth srow scol vf xc)
  (th-char-tensor-conv-3d-ger ($handle result)
                              (tensor-coerce tensor beta)
                              (tensor-coerce tensor alpha)
                              ($handle tensor)
                              ($handle k)
                              sdepth srow scol vf xc))
(defmethod tensor-conv-3d-ger ((result tensor.short) beta alpha (tensor tensor.short)
                               (k tensor.short) sdepth srow scol vf xc)
  (th-short-tensor-conv-3d-ger ($handle result)
                               (tensor-coerce tensor beta)
                               (tensor-coerce tensor alpha)
                               ($handle tensor)
                               ($handle k)
                               sdepth srow scol vf xc))
(defmethod tensor-conv-3d-ger ((result tensor.int) beta alpha (tensor tensor.int)
                               (k tensor.int) sdepth srow scol vf xc)
  (th-int-tensor-conv-3d-ger ($handle result)
                             (tensor-coerce tensor beta)
                             (tensor-coerce tensor alpha)
                             ($handle tensor)
                             ($handle k)
                             sdepth srow scol vf xc))
(defmethod tensor-conv-3d-ger ((result tensor.long) beta alpha (tensor tensor.long)
                               (k tensor.long) sdepth srow scol vf xc)
  (th-long-tensor-conv-3d-ger ($handle result)
                              (tensor-coerce tensor beta)
                              (tensor-coerce tensor alpha)
                              ($handle tensor)
                              ($handle k)
                              sdepth srow scol vf xc))
(defmethod tensor-conv-3d-ger ((result tensor.float) beta alpha (tensor tensor.float)
                               (k tensor.float) sdepth srow scol vf xc)
  (th-float-tensor-conv-3d-ger ($handle result)
                               (tensor-coerce tensor beta)
                               (tensor-coerce tensor alpha)
                               ($handle tensor)
                               ($handle k)
                               sdepth srow scol vf xc))
(defmethod tensor-conv-3d-ger ((result tensor.double) beta alpha (tensor tensor.double)
                               (k tensor.double) sdepth srow scol vf xc)
  (th-double-tensor-conv-3d-ger ($handle result)
                                (tensor-coerce tensor beta)
                                (tensor-coerce tensor alpha)
                                ($handle tensor)
                                ($handle k)
                                sdepth srow scol vf xc))

(defmethod tensor-conv-3d-mv ((result tensor.byte) beta alpha (tensor tensor.byte)
                              (k tensor.byte) sdepth srow scol vf xc)
  (th-byte-tensor-conv-3d-mv ($handle result)
                             (tensor-coerce tensor beta)
                             (tensor-coerce tensor alpha)
                             ($handle tensor)
                             ($handle k)
                             sdepth srow scol vf xc))
(defmethod tensor-conv-3d-mv ((result tensor.char) beta alpha (tensor tensor.char)
                              (k tensor.char) sdepth srow scol vf xc)
  (th-char-tensor-conv-3d-mv ($handle result)
                             (tensor-coerce tensor beta)
                             (tensor-coerce tensor alpha)
                             ($handle tensor)
                             ($handle k)
                             sdepth srow scol vf xc))
(defmethod tensor-conv-3d-mv ((result tensor.short) beta alpha (tensor tensor.short)
                              (k tensor.short) sdepth srow scol vf xc)
  (th-short-tensor-conv-3d-mv ($handle result)
                              (tensor-coerce tensor beta)
                              (tensor-coerce tensor alpha)
                              ($handle tensor)
                              ($handle k)
                              sdepth srow scol vf xc))
(defmethod tensor-conv-3d-mv ((result tensor.int) beta alpha (tensor tensor.int)
                              (k tensor.int) sdepth srow scol vf xc)
  (th-int-tensor-conv-3d-mv ($handle result)
                            (tensor-coerce tensor beta)
                            (tensor-coerce tensor alpha)
                            ($handle tensor)
                            ($handle k)
                            sdepth srow scol vf xc))
(defmethod tensor-conv-3d-mv ((result tensor.long) beta alpha (tensor tensor.long)
                              (k tensor.long) sdepth srow scol vf xc)
  (th-long-tensor-conv-3d-mv ($handle result)
                             (tensor-coerce tensor beta)
                             (tensor-coerce tensor alpha)
                             ($handle tensor)
                             ($handle k)
                             sdepth srow scol vf xc))
(defmethod tensor-conv-3d-mv ((result tensor.float) beta alpha (tensor tensor.float)
                              (k tensor.float) sdepth srow scol vf xc)
  (th-float-tensor-conv-3d-mv ($handle result)
                              (tensor-coerce tensor beta)
                              (tensor-coerce tensor alpha)
                              ($handle tensor)
                              ($handle k)
                              sdepth srow scol vf xc))
(defmethod tensor-conv-3d-mv ((result tensor.double) beta alpha (tensor tensor.double)
                              (k tensor.double) sdepth srow scol vf xc)
  (th-double-tensor-conv-3d-mv ($handle result)
                               (tensor-coerce tensor beta)
                               (tensor-coerce tensor alpha)
                               ($handle tensor)
                               ($handle k)
                               sdepth srow scol vf xc))

(defmethod tensor-conv-3d-mul ((result tensor.byte) beta alpha (tensor tensor.byte)
                               (k tensor.byte) sdepth srow scol vf xc)
  (th-byte-tensor-conv-3d-mul ($handle result)
                              (tensor-coerce tensor beta)
                              (tensor-coerce tensor alpha)
                              ($handle tensor)
                              ($handle k)
                              sdepth srow scol vf xc))
(defmethod tensor-conv-3d-mul ((result tensor.char) beta alpha (tensor tensor.char)
                               (k tensor.char) sdepth srow scol vf xc)
  (th-char-tensor-conv-3d-mul ($handle result)
                              (tensor-coerce tensor beta)
                              (tensor-coerce tensor alpha)
                              ($handle tensor)
                              ($handle k)
                              sdepth srow scol vf xc))
(defmethod tensor-conv-3d-mul ((result tensor.short) beta alpha (tensor tensor.short)
                               (k tensor.short) sdepth srow scol vf xc)
  (th-short-tensor-conv-3d-mul ($handle result)
                               (tensor-coerce tensor beta)
                               (tensor-coerce tensor alpha)
                               ($handle tensor)
                               ($handle k)
                               sdepth srow scol vf xc))
(defmethod tensor-conv-3d-mul ((result tensor.int) beta alpha (tensor tensor.int)
                               (k tensor.int) sdepth srow scol vf xc)
  (th-int-tensor-conv-3d-mul ($handle result)
                             (tensor-coerce tensor beta)
                             (tensor-coerce tensor alpha)
                             ($handle tensor)
                             ($handle k)
                             sdepth srow scol vf xc))
(defmethod tensor-conv-3d-mul ((result tensor.long) beta alpha (tensor tensor.long)
                               (k tensor.long) sdepth srow scol vf xc)
  (th-long-tensor-conv-3d-mul ($handle result)
                              (tensor-coerce tensor beta)
                              (tensor-coerce tensor alpha)
                              ($handle tensor)
                              ($handle k)
                              sdepth srow scol vf xc))
(defmethod tensor-conv-3d-mul ((result tensor.float) beta alpha (tensor tensor.float)
                               (k tensor.float) sdepth srow scol vf xc)
  (th-float-tensor-conv-3d-mul ($handle result)
                               (tensor-coerce tensor beta)
                               (tensor-coerce tensor alpha)
                               ($handle tensor)
                               ($handle k)
                               sdepth srow scol vf xc))
(defmethod tensor-conv-3d-mul ((result tensor.double) beta alpha (tensor tensor.double)
                               (k tensor.double) sdepth srow scol vf xc)
  (th-double-tensor-conv-3d-mul ($handle result)
                                (tensor-coerce tensor beta)
                                (tensor-coerce tensor alpha)
                                ($handle tensor)
                                ($handle k)
                                sdepth srow scol vf xc))

(defmethod tensor-conv-3d-cmul ((result tensor.byte) beta alpha (tensor tensor.byte)
                                (k tensor.byte) sdepth srow scol vf xc)
  (th-byte-tensor-conv-3d-cmul ($handle result)
                               (tensor-coerce tensor beta)
                               (tensor-coerce tensor alpha)
                               ($handle tensor)
                               ($handle k)
                               sdepth srow scol vf xc))
(defmethod tensor-conv-3d-cmul ((result tensor.char) beta alpha (tensor tensor.char)
                                (k tensor.char) sdepth srow scol vf xc)
  (th-char-tensor-conv-3d-cmul ($handle result)
                               (tensor-coerce tensor beta)
                               (tensor-coerce tensor alpha)
                               ($handle tensor)
                               ($handle k)
                               sdepth srow scol vf xc))
(defmethod tensor-conv-3d-cmul ((result tensor.short) beta alpha (tensor tensor.short)
                                (k tensor.short) sdepth srow scol vf xc)
  (th-short-tensor-conv-3d-cmul ($handle result)
                                (tensor-coerce tensor beta)
                                (tensor-coerce tensor alpha)
                                ($handle tensor)
                                ($handle k)
                                sdepth srow scol vf xc))
(defmethod tensor-conv-3d-cmul ((result tensor.int) beta alpha (tensor tensor.int)
                                (k tensor.int) sdepth srow scol vf xc)
  (th-int-tensor-conv-3d-cmul ($handle result)
                              (tensor-coerce tensor beta)
                              (tensor-coerce tensor alpha)
                              ($handle tensor)
                              ($handle k)
                              sdepth srow scol vf xc))
(defmethod tensor-conv-3d-cmul ((result tensor.long) beta alpha (tensor tensor.long)
                                (k tensor.long) sdepth srow scol vf xc)
  (th-long-tensor-conv-3d-cmul ($handle result)
                               (tensor-coerce tensor beta)
                               (tensor-coerce tensor alpha)
                               ($handle tensor)
                               ($handle k)
                               sdepth srow scol vf xc))
(defmethod tensor-conv-3d-cmul ((result tensor.float) beta alpha (tensor tensor.float)
                                (k tensor.float) sdepth srow scol vf xc)
  (th-float-tensor-conv-3d-cmul ($handle result)
                                (tensor-coerce tensor beta)
                                (tensor-coerce tensor alpha)
                                ($handle tensor)
                                ($handle k)
                                sdepth srow scol vf xc))
(defmethod tensor-conv-3d-cmul ((result tensor.double) beta alpha (tensor tensor.double)
                                (k tensor.double) sdepth srow scol vf xc)
  (th-double-tensor-conv-3d-cmul ($handle result)
                                 (tensor-coerce tensor beta)
                                 (tensor-coerce tensor alpha)
                                 ($handle tensor)
                                 ($handle k)
                                 sdepth srow scol vf xc))
