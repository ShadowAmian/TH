(declaim (optimize (speed 3) (debug 0) (safety 0)))

(in-package :th)

(defmethod $fopenedp ((file file)) (eq 1 (th-file-is-opened ($handle file))))
(defmethod $fquietp ((file file)) (eq 1 (th-file-is-quiet ($handle file))))
(defmethod $fpedanticp ((file file)) (eq 0 (th-file-is-quiet ($handle file))))
(defmethod $freadablep ((file file)) (eq 1 (th-file-is-readable ($handle file))))
(defmethod $fwritablep ((file file)) (eq 1 (th-file-is-writable ($handle file))))
(defmethod $fbinaryp ((file file)) (eq 1 (th-file-is-binary ($handle file))))
(defmethod $fasciip ((file file)) (eq 0 (th-file-is-binary ($handle file))))
(defmethod $fautospacingp ((file file)) (eq 1 (th-file-is-auto-spacing ($handle file))))
(defmethod $fnoautospacingp ((file file)) (eq 0 (th-file-is-auto-spacing ($handle file))))
(defmethod $ferrorp ((file file)) (eq 1 (th-file-has-error ($handle file))))

(defmethod (setf $fbinaryp) (value (file file))
  (if value
      (th-file-binary ($handle file))
      (th-file-ascii ($handle file)))
  file)

(defmethod (setf $fasciip) (value (file file))
  (if value
      (th-file-ascii ($handle file))
      (th-file-binary ($handle file)))
  file)

(defmethod (setf $fautospacingp) (value (file file))
  (if value
      (th-file-auto-spacing ($handle file))
      (th-file-no-auto-spacing ($handle file)))
  file)

(defmethod (setf $fnoautospacingp) (value (file file))
  (if value
      (th-file-no-auto-spacing ($handle file))
      (th-file-auto-spacing ($handle file)))
  file)

(defmethod (setf $fquietp) (value (file file))
  (if value
      (th-file-quiet ($handle file))
      (th-file-pedantic ($handle file)))
  file)

(defmethod (setf $fpedanticp) (value (file file))
  (if value
      (th-file-pedantic ($handle file))
      (th-file-quiet ($handle file)))
  file)

(defmethod (setf $ferrorp) (value (file file))
  (when value (th-file-clear-error ($handle file)))
  file)

(defmethod $freadbyte ((file file)) (th-file-read-byte-scalar ($handle file)))
(defmethod $freadchar ((file file)) (th-file-read-char-scalar ($handle file)))
(defmethod $freadshort ((file file)) (th-file-read-short-scalar ($handle file)))
(defmethod $freadint ((file file)) (th-file-read-int-scalar ($handle file)))
(defmethod $freadlong ((file file)) (th-file-read-long-scalar ($handle file)))
(defmethod $freadfloat ((file file)) (th-file-read-float-scalar ($handle file)))
(defmethod $freaddouble ((file file)) (th-file-read-double-scalar ($handle file)))

(defmethod $fwritebyte (byte (file file))
  (th-file-write-byte-scalar ($handle file) byte)
  byte)
(defmethod $fwritechar (char (file file))
  (th-file-write-char-scalar ($handle file) char)
  char)
(defmethod $fwriteshort (short (file file))
  (th-file-write-short-scalar ($handle file) short)
  short)
(defmethod $fwriteint (int (file file))
  (th-file-write-int-scalar ($handle file) int)
  int)
(defmethod $fwritelong (long (file file))
  (th-file-write-long-scalar ($handle file) long)
  long)
(defmethod $fwritefloat (float (file file))
  (th-file-write-float-scalar ($handle file) float)
  float)
(defmethod $fwritedouble (double (file file))
  (th-file-write-double-scalar ($handle file) double)
  double)

(defmethod $fread ((storage storage.byte) (file file))
  (let ((size ($freadlong file)))
    ($resize! storage size)
    (loop :for i :from 0 :below size
          :do (setf ($ storage i) ($freadbyte file)))
    storage))
(defmethod $fread ((storage storage.char) (file file))
  (let ((size ($freadlong file)))
    ($resize! storage size)
    (loop :for i :from 0 :below size
          :do (setf ($ storage i) ($freadchar file)))
    storage))
(defmethod $fread ((storage storage.short) (file file))
  (let ((size ($freadlong file)))
    ($resize! storage size)
    (loop :for i :from 0 :below size
          :do (setf ($ storage i) ($freadshort file)))
    storage))
(defmethod $fread ((storage storage.int) (file file))
  (let ((size ($freadlong file)))
    ($resize! storage size)
    (loop :for i :from 0 :below size
          :do (setf ($ storage i) ($freadint file)))
    storage))
(defmethod $fread ((storage storage.long) (file file))
  (let ((size ($freadlong file)))
    ($resize! storage size)
    (loop :for i :from 0 :below size
          :do (setf ($ storage i) ($freadlong file)))
    storage))
(defmethod $fread ((storage storage.float) (file file))
  (let ((size ($freadlong file)))
    ($resize! storage size)
    (loop :for i :from 0 :below size
          :do (setf ($ storage i) ($freadfloat file)))
    storage))
(defmethod $fread ((storage storage.double) (file file))
  (let ((size ($freadlong file)))
    ($resize! storage size)
    (loop :for i :from 0 :below size
          :do (setf ($ storage i) ($freaddouble file)))
    storage))

(defun read-tensor (tensor storage file)
  (let* ((ndim ($freadlong file))
         (size (make-list ndim))
         (stride (make-list ndim))
         (offset 0))
    (loop :for i :from 0 :below ndim
          :do (setf ($ size i) ($freadlong file)))
    (loop :for i :from 0 :below ndim
          :do (setf ($ stride i) ($freadlong file)))
    (setf offset ($freadlong file))
    ($fread storage file)
    ($set! tensor (tensor storage offset size stride))
    tensor))

(defmethod $fread ((tensor tensor.byte) (file file)) (read-tensor tensor (storage.byte) file))
(defmethod $fread ((tensor tensor.char) (file file)) (read-tensor tensor (storage.char) file))
(defmethod $fread ((tensor tensor.short) (file file)) (read-tensor tensor (storage.short) file))
(defmethod $fread ((tensor tensor.int) (file file)) (read-tensor tensor (storage.int) file))
(defmethod $fread ((tensor tensor.long) (file file)) (read-tensor tensor (storage.long) file))
(defmethod $fread ((tensor tensor.float) (file file)) (read-tensor tensor (storage.float) file))
(defmethod $fread ((tensor tensor.double) (file file)) (read-tensor tensor (storage.double) file))

(defmethod $fwrite ((storage storage.byte) (file file))
  ($fwritelong ($count storage) file)
  (th-file-write-byte ($handle file) ($handle storage)))
(defmethod $fwrite ((storage storage.char) (file file))
  ($fwritelong ($count storage) file)
  (th-file-write-char ($handle file) ($handle storage)))
(defmethod $fwrite ((storage storage.short) (file file))
  ($fwritelong ($count storage) file)
  (th-file-write-short ($handle file) ($handle storage)))
(defmethod $fwrite ((storage storage.int) (file file))
  ($fwritelong ($count storage) file)
  (th-file-write-int ($handle file) ($handle storage)))
(defmethod $fwrite ((storage storage.long) (file file))
  ($fwritelong ($count storage) file)
  (th-file-write-long ($handle file) ($handle storage)))
(defmethod $fwrite ((storage storage.float) (file file))
  ($fwritelong ($count storage) file)
  (th-file-write-float ($handle file) ($handle storage)))
(defmethod $fwrite ((storage storage.double) (file file))
  ($fwritelong ($count storage) file)
  (th-file-write-double ($handle file) ($handle storage)))

(defmethod $fwrite ((tensor tensor) (file file))
  ($fwritelong ($ndim tensor) file)
  (loop :for i :from 0 :below ($ndim tensor)
        :do ($fwritelong ($size tensor i) file))
  (loop :for i :from 0 :below ($ndim tensor)
        :do ($fwritelong ($stride tensor i) file))
  ($fwritelong ($offset tensor) file)
  ($fwrite ($storage tensor) file))

(defmethod $fsync ((file file)) (th-file-synchronize ($handle file)))
(defmethod $fseek ((file file) position) (th-file-seek ($handle file) position))
(defmethod $fseekend ((file file)) (th-file-seek-end ($handle file)))
(defmethod $ftell ((file file)) (th-file-position ($handle file)))
(defmethod $fclose ((file file)) (th-file-close ($handle file)))

(defmethod $fname ((file file.disk)) (th-disk-file-name ($handle file)))

(defmethod $storage ((file file.memory)) (th-memory-file-storage ($handle file)))
