(declaim (optimize (speed 3) (debug 1) (safety 0)))

(in-package :th)

(defmethod tensor-with-storage ((storage null) &optional (storage-offset 0) size stride)
  (cond ((eq *default-tensor-class* 'tensor.float)
         (let* ((tr (make-instance 'tensor.float))
                (size (if (listp size) (storage.long size) size))
                (stride (if (listp stride) (storage.long stride) stride))
                (rh (th-float-tensor-new-with-storage ($handle storage)
                                                      storage-offset
                                                      (if (null size)
                                                          +nil+
                                                          ($handle size))
                                                      (if (null stride)
                                                          +nil+
                                                          ($handle stride)))))
           (setf ($handle tr) rh)
           #+sbcl (sb-ext:finalize tr (lambda () (th-float-tensor-free rh)))
           #+ccl (ccl:terminate-when-unreachable tr)
           tr))
        ((eq *default-tensor-class* 'tensor.double)
         (let* ((tr (make-instance 'tensor.double))
                (size (if (listp size) (storage.long size) size))
                (stride (if (listp stride) (storage.long stride) stride))
                (rh (th-double-tensor-new-with-storage ($handle storage)
                                                       storage-offset
                                                       (if (null size)
                                                           +nil+
                                                           ($handle size))
                                                       (if (null stride)
                                                           +nil+
                                                           ($handle stride)))))
           (setf ($handle tr) rh)
           #+sbcl (sb-ext:finalize tr (lambda () (th-double-tensor-free rh)))
           #+ccl (ccl:terminate-when-unreachable tr)
           tr))
        (T nil)))

(defmethod $count ((tensor tensor)) (tensor-n-element tensor))

(defmethod tensor-coerce ((tensor tensor.byte) value) (coerce value 'unsigned-byte))
(defmethod tensor-coerce ((tensor tensor.char) value) (coerce value 'signed-byte))
(defmethod tensor-coerce ((tensor tensor.short) value) (coerce value 'integer))
(defmethod tensor-coerce ((tensor tensor.int) value) (coerce value 'integer))
(defmethod tensor-coerce ((tensor tensor.long) value) (coerce value 'integer))
(defmethod tensor-coerce ((tensor tensor.float) value) (coerce value 'single-float))
(defmethod tensor-coerce ((tensor tensor.double) value) (coerce value 'double-float))

(defmethod tensor-acoerce ((tensor tensor.byte) value) (coerce value 'integer))
(defmethod tensor-acoerce ((tensor tensor.char) value) (coerce value 'integer))
(defmethod tensor-acoerce ((tensor tensor.short) value) (coerce value 'integer))
(defmethod tensor-acoerce ((tensor tensor.int) value) (coerce value 'integer))
(defmethod tensor-acoerce ((tensor tensor.long) value) (coerce value 'integer))
(defmethod tensor-acoerce ((tensor tensor.float) value) (coerce value 'double-float))
(defmethod tensor-acoerce ((tensor tensor.double) value) (coerce value 'double-float))

(defmethod tensor-type ((tensor tensor.byte)) :byte)
(defmethod tensor-type ((tensor tensor.char)) :char)
(defmethod tensor-type ((tensor tensor.short)) :short)
(defmethod tensor-type ((tensor tensor.int)) :int)
(defmethod tensor-type ((tensor tensor.long)) :long)
(defmethod tensor-type ((tensor tensor.float)) :float)
(defmethod tensor-type ((tensor tensor.double)) :double)

(defun tensor.byte-random (&rest sizes)
  (let ((x (apply #'tensor.byte sizes)))
    (tensor-random x)))
(defun tensor.char-random (&rest sizes)
  (let ((x (apply #'tensor.char sizes)))
    (tensor-random x)))
(defun tensor.short-random (&rest sizes)
  (let ((x (apply #'tensor.short sizes)))
    (tensor-random x)))
(defun tensor.int-random (&rest sizes)
  (let ((x (apply #'tensor.int sizes)))
    (tensor-random x)))
(defun tensor.long-random (&rest sizes)
  (let ((x (apply #'tensor.long sizes)))
    (tensor-random x)))
(defun tensor.float-random (&rest sizes)
  (let ((x (apply #'tensor.float sizes)))
    (tensor-random x)))
(defun tensor.double-random (&rest sizes)
  (let ((x (apply #'tensor.double sizes)))
    (tensor-random x)))

(defun coerce-to-long (v) (coerce v 'integer))
(defun coerce-to-prob (p) (coerce p 'double-float))

(defun byte-eye (nrow ncol) (tensor-eye (tensor.byte) nrow ncol))
(defun char-eye (nrow ncol) (tensor-eye (tensor.char) nrow ncol))
(defun short-eye (nrow ncol) (tensor-eye (tensor.short) nrow ncol))
(defun int-eye (nrow ncol) (tensor-eye (tensor.int) nrow ncol))
(defun long-eye (nrow ncol) (tensor-eye (tensor.long) nrow ncol))
(defun float-eye (nrow ncol) (tensor-eye (tensor.float) nrow ncol))
(defun double-eye (nrow ncol) (tensor-eye (tensor.double) nrow ncol))

(defun tensor.byte-arange (xmin xmax &optional (step 1))
  (tensor-arange (tensor.byte) xmin xmax step))
(defun tensor.char-arange (xmin xmax &optional (step 1))
  (tensor-arange (tensor.char) xmin xmax step))
(defun tensor.short-arange (xmin xmax &optional (step 1))
  (tensor-arange (tensor.short) xmin xmax step))
(defun tensor.int-arange (xmin xmax &optional (step 1))
  (tensor-arange (tensor.int) xmin xmax step))
(defun tensor.long-arange (xmin xmax &optional (step 1))
  (tensor-arange (tensor.long) xmin xmax step))
(defun tensor.float-arange (xmin xmax &optional (step 1))
  (tensor-arange (tensor.float) xmin xmax step))
(defun tensor.double-arange (xmin xmax &optional (step 1))
  (tensor-arange (tensor.double) xmin xmax step))

(defun tensor.byte-range (xmin xmax &optional (step 1))
  (tensor-range (tensor.byte) xmin xmax step))
(defun tensor.char-range (xmin xmax &optional (step 1))
  (tensor-range (tensor.char) xmin xmax step))
(defun tensor.short-range (xmin xmax &optional (step 1))
  (tensor-range (tensor.short) xmin xmax step))
(defun tensor.int-range (xmin xmax &optional (step 1))
  (tensor-range (tensor.int) xmin xmax step))
(defun tensor.long-range (xmin xmax &optional (step 1))
  (tensor-range (tensor.long) xmin xmax step))
(defun tensor.float-range (xmin xmax &optional (step 1))
  (tensor-range (tensor.float) xmin xmax step))
(defun tensor.double-range (xmin xmax &optional (step 1))
  (tensor-range (tensor.double) xmin xmax step))

(defun tensor.byte-rand-perm (n &optional generator)
  (tensor-rand-perm (tensor.byte) n generator))
(defun tensor.char-rand-perm (n &optional generator)
  (tensor-rand-perm (tensor.char) n generator))
(defun tensor.short-rand-perm (n &optional generator)
  (tensor-rand-perm (tensor.short) n generator))
(defun tensor.int-rand-perm (n &optional generator)
  (tensor-rand-perm (tensor.int) n generator))
(defun tensor.long-rand-perm (n &optional generator)
  (tensor-rand-perm (tensor.long) n generator))
(defun tensor.float-rand-perm (n &optional generator)
  (tensor-rand-perm (tensor.float) n generator))
(defun tensor.double-rand-perm (n &optional generator)
  (tensor-rand-perm (tensor.double) n generator))

(defmethod tensor-abs ((tensor tensor.short) (src tensor.short))
  (th-short-tensor-abs ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-abs ((tensor tensor.int) (src tensor.int))
  (th-int-tensor-abs ($handle tensor) ($handle src))
  tensor)
(defmethod tensor-abs ((tensor tensor.long) (src tensor.long))
  (th-long-tensor-abs ($handle tensor) ($handle src))
  tensor)

(defmethod tensor-logical-all ((tensor tensor.byte))
  (eq 1 (th-byte-tensor-logical-all ($handle tensor))))

(defmethod tensor-logical-any ((tensor tensor.byte))
  (eq 1 (th-byte-tensor-logical-any ($handle tensor))))

(defun %%match-fn-p (leaf)
  (and (symbolp leaf)
       (let ((name (string leaf)))
         (and (> (length name) 3) (string-equal "ft-" (subseq name 0 3))))))

(defun %%gen-fn (leaf type)
  (let ((fbody (subseq (string leaf) 3)))
    (intern (string-upcase (strcat "th-" type "-" fbody)))))

(defun %%gen-tensor-type (type) (intern (string-upcase (strcat "tensor." type))))
(defun %%gen-storage-type (type) (intern (string-upcase (strcat "storage." type))))
(defun %%gen-pointer-type (type) (intern (string-upcase (strcat "pointer." type))))

(defun %%gen-impl (fimpl type)
  (-> fimpl
      (tree-leaves (eq 'tensor.type x) (%%gen-tensor-type type))
      (tree-leaves (eq 'storage.type x) (%%gen-storage-type type))
      (tree-leaves (eq 'pointer.type x) (%%gen-pointer-type type))
      (tree-leaves (%%match-fn-p x) (%%gen-fn x type))))

(defparameter *tensor-generic-interface-implementations*
  '((defmethod tensor-with-tensor ((tensor tensor.type))
      (let ((tr (make-instance 'tensor.type))
            (rh (ft-tensor-new-with-tensor ($handle tensor))))
        (setf ($handle tr) rh)
        #+sbcl (sb-ext:finalize tr (lambda () (ft-tensor-free rh)))
        #+ccl (ccl:terminate-when-unreachable tr)
        tr))
    (defmethod tensor-with-storage ((storage storage.type) &optional (storage-offset 0) size stride)
      (let* ((tr (make-instance 'tensor.type))
             (size (if (listp size) (storage.long size) size))
             (stride (if (listp stride) (storage.long stride) stride))
             (rh (ft-tensor-new-with-storage ($handle storage)
                                             storage-offset
                                             (if (null size)
                                                 +nil+
                                                 ($handle size))
                                             (if (null stride)
                                                 +nil+
                                                 ($handle stride)))))
        (setf ($handle tr) rh)
        #+sbcl (sb-ext:finalize tr (lambda () (ft-tensor-free rh)))
        #+ccl (ccl:terminate-when-unreachable tr)
        tr))
    (defmethod tensor-at ((tensor tensor.type) location &rest others-and-default)
      (if (null others-and-default)
          (ft-tensor-get-1d ($handle tensor) location)
          (cond ((eq 1 ($count others-and-default))
                 (ft-tensor-get-2d ($handle tensor) location ($0 others-and-default)))
                ((eq 2 ($count others-and-default))
                 (ft-tensor-get-3d ($handle tensor) location
                                   ($0 others-and-default)
                                   ($1 others-and-default)))
                ((eq 3 ($count others-and-default))
                 (ft-tensor-get-4d ($handle tensor) location
                                   ($0 others-and-default)
                                   ($1 others-and-default)
                                   ($2 others-and-default))))))
    (defmethod (setf tensor-at) (value (tensor tensor.type) location &rest others)
      (let ((v (tensor-coerce tensor value)))
        (if (null others)
            (ft-tensor-set-1d ($handle tensor) location v)
            (cond ((eq 1 ($count others))
                   (ft-tensor-set-2d ($handle tensor) location ($0 others)
                                     v))
                  ((eq 2 ($count others))
                   (ft-tensor-set-3d ($handle tensor) location
                                     ($0 others)
                                     ($1 others)
                                     v))
                  ((eq 3 ($count others))
                   (ft-tensor-set-4d ($handle tensor) location
                                     ($0 others)
                                     ($1 others)
                                     ($2 others)
                                     v))))
        v))
    (defmethod tensor-storage ((tensor tensor.type))
      (let ((h (ft-tensor-storage ($handle tensor))))
        (when (and h (not (cffi:null-pointer-p h)))
          (let ((storage (make-instance 'storage.type)))
            (setf ($handle storage) h)
            storage))))
    (defmethod tensor-storage-offset ((tensor tensor.type))
      (ft-tensor-storage-offset ($handle tensor)))
    (defmethod tensor-n-dimension ((tensor tensor.type))
      (ft-tensor-n-dimension ($handle tensor)))
    (defmethod tensor-size ((tensor tensor.type) dimension)
      (ft-tensor-size ($handle tensor) dimension))
    (defmethod tensor-stride ((tensor tensor.type) dimension)
      (ft-tensor-stride ($handle tensor) dimension))
    (defmethod tensor-data ((tensor tensor.type))
      (let ((ptr (make-instance 'pointer.type)))
        (setf ($handle ptr) (ft-tensor-data ($handle tensor)))
        ptr))
    (defmethod tensor-clone ((tensor tensor.type))
      (let ((clone (make-instance 'tensor.type))
            (handle (ft-tensor-new-clone ($handle tensor))))
        (setf ($handle clone) handle)
        #+sbcl (sb-ext:finalize clone (lambda () (ft-tensor-free handle)))
        #+ccl (ccl:terminate-when-unreachable clone)
        clone))
    (defmethod tensor-contiguous ((tensor tensor.type))
      (let ((tr (make-instance 'tensor.type))
            (rh (ft-tensor-new-contiguous ($handle tensor))))
        (setf ($handle tr) rh)
        #+sbcl (sb-ext:finalize tr (lambda () (ft-tensor-free rh)))
        #+ccl (ccl:terminate-when-unreachable tr)
        tr))
    (defmethod tensor-new-select ((tensor tensor.type) dimension slice-index)
      (let ((tr (make-instance 'tensor.type))
            (h (ft-tensor-new-select ($handle tensor) dimension slice-index)))
        (setf ($handle tr) h)
        #+sbcl (sb-ext:finalize tr (lambda () (ft-tensor-free h)))
        #+ccl (ccl:terminate-when-unreachable tr)
        tr))
    (defmethod tensor-new-narrow ((tensor tensor.type) dimension first-index size)
      (let ((r (make-instance 'tensor.type))
            (h (ft-tensor-new-narrow ($handle tensor) dimension first-index size)))
        (setf ($handle r) h)
        #+sbcl (sb-ext:finalize r (lambda () (ft-tensor-free h)))
        #+ccl (ccl:terminate-when-unreachable r)
        r))
    (defmethod tensor-new-transpose ((tensor tensor.type))
      (let ((r (make-instance 'tensor.type))
            (h (ft-tensor-new-transpose ($handle tensor) 0 1)))
        (setf ($handle r) h)
        #+sbcl (sb-ext:finalize r (lambda () (ft-tensor-free h)))
        #+ccl (ccl:terminate-when-unreachable r)
        r))
    (defmethod tensor-new-unfold ((tensor tensor.type) dimension size step)
      (let ((r (make-instance 'tensor.type))
            (h (ft-tensor-new-unfold ($handle tensor) dimension size step)))
        (setf ($handle r) h)
        #+sbcl (sb-ext:finalize r (lambda () (ft-tensor-free h)))
        #+ccl (ccl:terminate-when-unreachable r)
        r))
    (defmethod tensor-new-view ((tensor tensor.type) (size list))
      (let* ((r (make-instance 'tensor.type))
             (s (let ((s (storage.long ($count size))))
                  (loop :for i :from 0 :below ($count size)
                        :do (setf ($ s i) ($ size i)))
                  s))
             (h (ft-tensor-new-view ($handle tensor) ($handle s))))
        (setf ($handle r) h)
        #+sbcl (sb-ext:finalize r (lambda () (ft-tensor-free h)))
        #+ccl (ccl:terminate-when-unreachable r)
        r))
    (defmethod tensor-new-view ((tensor tensor.type) (size storage.long))
      (let ((r (make-instance 'tensor.type))
            (h (ft-tensor-new-view ($handle tensor) ($handle size))))
        (setf ($handle r) h)
        #+sbcl (sb-ext:finalize r (lambda () (ft-tensor-free h)))
        #+ccl (ccl:terminate-when-unreachable r)
        r))
    (defmethod tensor-expand ((tensor tensor.type) (src tensor.type) (size list))
      (when (> ($count size) 0)
        (let ((storage (storage.long ($count size)))
              (tensor (or tensor (tensor.type))))
          (loop :for i :from 0 :below ($count size)
                :do (setf ($ storage i) ($ size i)))
          (ft-tensor-expand ($handle tensor) ($handle src)
                            ($handle storage))
          tensor)))
    (defmethod tensor-resize-as ((tensor tensor.type) src)
      (ft-tensor-resize-as ($handle tensor) ($handle src))
      tensor)
    (defmethod tensor-resize ((tensor tensor.type) (size list) &optional stride)
      (let ((size (storage.long size))
            (stride (when stride (storage.long stride))))
        (ft-tensor-resize-nd ($handle tensor)
                             ($size size)
                             ($handle ($pointer size))
                             (if stride
                                 ($handle ($pointer stride))
                                 +nil+))
        tensor))
    (defmethod tensor-set ((tensor tensor.type) (src tensor))
      (ft-tensor-set ($handle tensor) ($handle src))
      tensor)
    (defmethod tensor-set-storage ((tensor tensor.type) (storage storage.type) offset
                                   (size list) (stride list))
      (let ((size (storage.long size))
            (stride (storage.long stride)))
        (ft-tensor-set-storage ($handle tensor) ($handle storage) offset
                               ($handle size) ($handle stride))))
    (defmethod tensor-set-storage ((tensor tensor.type) (storage storage.type) offset
                                   (size storage.long) (stride storage.long))
      (ft-tensor-set-storage ($handle tensor) ($handle storage) offset
                             ($handle size) ($handle stride)))
    (defmethod tensor-set-storage ((tensor tensor.type) (storage storage.type) offset
                                   (size list) (stride null))
      (let ((size (storage.long size)))
        (ft-tensor-set-storage ($handle tensor) ($handle storage) offset
                               ($handle size) +nil+)))
    (defmethod tensor-set-storage ((tensor tensor.type) (storage storage.type) offset
                                   (size storage.long) (stride null))
      (ft-tensor-set-storage ($handle tensor) ($handle storage) offset
                             ($handle size) +nil+))
    (defmethod tensor-narrow ((tensor tensor.type) (src tensor.type) dimension first-idx size)
      (ft-tensor-narrow ($handle tensor) ($handle src) dimension first-idx size)
      tensor)
    (defmethod tensor-select ((tensor tensor.type) (src tensor.type) dimension slice-index)
      (ft-tensor-select ($handle tensor) ($handle src) dimension slice-index)
      tensor)
    (defmethod tensor-transpose ((tensor tensor.type) (src tensor.type) dimension0 dimension1)
      (ft-tensor-transpose ($handle tensor) ($handle src) dimension0 dimension1)
      tensor)
    (defmethod tensor-unfold ((tensor tensor.type) (src tensor.type) dimension size step)
      (ft-tensor-unfold ($handle tensor) ($handle src) dimension size step)
      tensor)
    (defmethod tensor-unfold ((tensor tensor.type) (src null) dimension size step)
      (ft-tensor-unfold ($handle tensor) +nil+ dimension size step)
      tensor)
    (defmethod tensor-squeeze ((tensor tensor.type) (src tensor.type) &optional dimension)
      (cond ((null dimension) (ft-tensor-squeeze ($handle tensor) ($handle src)))
            (t (ft-tensor-squeeze-1d ($handle tensor) ($handle src) dimension)))
      tensor)
    (defmethod tensor-squeeze ((tensor tensor.type) (src null) &optional dimension)
      (cond ((null dimension) (ft-tensor-squeeze ($handle tensor) +nil+))
            (t (ft-tensor-squeeze-1d ($handle tensor) +nil+ dimension)))
      tensor)
    (defmethod tensor-unsqueeze ((tensor tensor.type) (src tensor.type) dimension)
      (ft-tensor-unsqueeze-1d ($handle tensor) ($handle src) dimension)
      tensor)
    (defmethod tensor-unsqueeze ((tensor tensor.type) (src null) dimension)
      (ft-tensor-unsqueeze-1d ($handle tensor) +nil+ dimension)
      tensor)
    (defmethod tensor-contiguous-p ((tensor tensor.type))
      (eq 1 (ft-tensor-is-contiguous ($handle tensor))))
    (defmethod tensor-same-size-p ((tensor tensor.type) (src tensor.type))
      (eq 1 (ft-tensor-is-same-size-as ($handle tensor) ($handle src))))
    (defmethod tensor-set-to-p ((tensor tensor.type) (src tensor.type))
      (eq 1 (ft-tensor-is-set-to ($handle tensor) ($handle src))))
    (defmethod tensor-size-p ((tensor tensor.type) (size list))
      (let ((s (storage.long ($count size))))
        (loop :for i :from 0 :below ($count size) :do (setf ($ s i) ($ size i)))
        (eq 1 (ft-tensor-is-size ($handle tensor) ($handle s)))))
    (defmethod tensor-size-p ((tensor tensor.type) (size storage.long))
      (eq 1 (ft-tensor-is-size ($handle tensor) ($handle size))))
    (defmethod tensor-n-element ((tensor tensor.type)) (ft-tensor-n-element ($handle tensor)))
    (defmethod tensor-copy ((tensor tensor.type) (src tensor.byte))
      (ft-tensor-copy-byte ($handle tensor) ($handle src))
      tensor)
    (defmethod tensor-copy ((tensor tensor.type) (src tensor.char))
      (ft-tensor-copy-char ($handle tensor) ($handle src))
      tensor)
    (defmethod tensor-copy ((tensor tensor.type) (src tensor.short))
      (ft-tensor-copy-short ($handle tensor) ($handle src))
      tensor)
    (defmethod tensor-copy ((tensor tensor.type) (src tensor.int))
      (ft-tensor-copy-int ($handle tensor) ($handle src))
      tensor)
    (defmethod tensor-copy ((tensor tensor.type) (src tensor.long))
      (ft-tensor-copy-long ($handle tensor) ($handle src))
      tensor)
    (defmethod tensor-copy ((tensor tensor.type) (src tensor.float))
      (ft-tensor-copy-float ($handle tensor) ($handle src))
      tensor)
    (defmethod tensor-copy ((tensor tensor.type) (src tensor.double))
      (ft-tensor-copy-double ($handle tensor) ($handle src))
      tensor)
    (defmethod tensor-random ((tensor tensor.type) &optional generator)
      (ft-tensor-random ($handle tensor) ($handle (or generator *generator*)))
      tensor)
    (defmethod tensor-geometric ((tensor tensor.type) p &optional generator)
      (ft-tensor-geometric ($handle tensor) ($handle (or generator *generator*))
                           (coerce-to-prob p))
      tensor)
    (defmethod tensor-binomial ((tensor tensor.type) n p &optional generator)
      (ft-tensor-binomial ($handle tensor) ($handle (or generator *generator*))
                          (coerce n 'integer)
                          (coerce-to-prob p))
      tensor)
    (defmethod tensor-bernoulli ((tensor tensor.type) (p number) &optional generator)
      (if (zerop (tensor-n-element tensor)) (tensor-resize tensor '(1)))
      (ft-tensor-bernoulli ($handle tensor) ($handle (or generator *generator*))
                           (coerce-to-prob p))
      tensor)
    (defmethod tensor-bernoulli ((tensor tensor.type) (p tensor.float) &optional generator)
      (tensor-resize-as tensor p)
      (ft-tensor-bernoulli-float-tensor ($handle tensor)
                                        ($handle (or generator *generator*))
                                        ($handle p))
      tensor)
    (defmethod tensor-bernoulli ((tensor tensor.type) (p tensor.double) &optional generator)
      (tensor-resize-as tensor p)
      (ft-tensor-bernoulli-double-tensor ($handle tensor)
                                         ($handle (or generator *generator*))
                                         ($handle p))
      tensor)
    (defmethod tensor-hypergeometric ((tensor tensor.type) (nr number) (nb number) (k number)
                                      &optional generator)
      (if (zerop (tensor-n-element tensor)) (tensor-resize tensor '(1)))
      (ft-tensor-hypergeometric ($handle tensor)
                                ($handle (or generator *generator*))
                                (coerce (round nr) 'integer)
                                (coerce (round nb) 'integer)
                                (coerce (round k) 'integer))
      tensor)
    (defmethod tensor-poisson ((tensor tensor.type) (mu number) &optional generator)
      (if (zerop (tensor-n-element tensor)) (tensor-resize tensor '(1)))
      (ft-tensor-poisson ($handle tensor)
                         ($handle (or generator *generator*))
                         (coerce mu 'double-float)))
    (defmethod tensor-fill ((tensor tensor.type) value)
      (ft-tensor-fill ($handle tensor) (tensor-coerce tensor value))
      tensor)
    (defmethod tensor-zero ((tensor tensor.type)) (ft-tensor-zero ($handle tensor)) tensor)
    (defmethod tensor-masked-fill ((tensor tensor.type) (mask tensor.byte) value)
      (ft-tensor-masked-fill ($handle tensor)
                             ($handle mask)
                             (tensor-coerce tensor value))
      tensor)
    (defmethod tensor-masked-copy ((tensor tensor.type) (mask tensor.byte) (src tensor.type))
      (ft-tensor-masked-copy ($handle tensor)
                             ($handle mask)
                             ($handle src))
      tensor)
    (defmethod tensor-masked-select ((tensor tensor.type) (mask tensor.byte) (src tensor.type))
      (ft-tensor-masked-select ($handle tensor)
                               ($handle src)
                               ($handle mask))
      tensor)
    (defmethod tensor-non-zero ((tensor tensor.type) &optional indices)
      (let ((indices (or indices (tensor.long))))
        (ft-tensor-nonzero ($handle indices)
                           ($handle tensor))
        indices))
    (defmethod tensor-index-select ((tensor tensor.type) (src tensor.type) dim (index tensor.long))
      (ft-tensor-index-select ($handle tensor)
                              ($handle src)
                              dim
                              ($handle index))
      tensor)
    (defmethod tensor-index-copy ((tensor tensor.type) (src tensor.type) dim (index tensor.long))
      (ft-tensor-index-copy ($handle tensor)
                            dim
                            ($handle index)
                            ($handle src))
      tensor)
    (defmethod tensor-index-add ((tensor tensor.type) (src tensor.type) dim (index tensor.long))
      (ft-tensor-index-add ($handle tensor)
                           dim
                           ($handle index)
                           ($handle src))
      tensor)
    (defmethod tensor-index-fill ((tensor tensor.type) value dim (index tensor.long))
      (ft-tensor-index-fill ($handle tensor)
                            dim
                            ($handle index)
                            (tensor-coerce tensor value))
      tensor)
    (defmethod tensor-gather ((tensor tensor.type) (src tensor.type) dim (index tensor.long))
      (ft-tensor-gather ($handle tensor)
                        ($handle src)
                        dim
                        ($handle index))
      tensor)
    (defmethod tensor-scatter ((tensor tensor.type) (src tensor.type) dim (index tensor.long))
      (ft-tensor-scatter ($handle tensor)
                         dim
                         ($handle index)
                         ($handle src))
      tensor)
    (defmethod tensor-scatter-add ((tensor tensor.type) (src tensor.type) dim (index tensor.long))
      (ft-tensor-scatter-add ($handle tensor)
                             dim
                             ($handle index)
                             ($handle src))
      tensor)
    (defmethod tensor-scatter-fill ((tensor tensor.type) value dim (index tensor.long))
      (ft-tensor-scatter-fill ($handle tensor)
                              dim
                              ($handle index)
                              (tensor-coerce tensor value))
      tensor)
    (defmethod tensor-dot ((tensor1 tensor.type) (tensor2 tensor.type))
      (ft-tensor-dot ($handle tensor1) ($handle tensor2)))
    (defmethod tensor-min-all ((tensor tensor.type)) (ft-tensor-min-all ($handle tensor)))
    (defmethod tensor-max-all ((tensor tensor.type)) (ft-tensor-max-all ($handle tensor)))
    (defmethod tensor-median-all ((tensor tensor.type)) (ft-tensor-median-all ($handle tensor)))
    (defmethod tensor-sum-all ((tensor tensor.type)) (ft-tensor-sum-all ($handle tensor)))
    (defmethod tensor-prd-all ((tensor tensor.type)) (ft-tensor-prod-all ($handle tensor)))
    (defmethod tensor-neg ((tensor tensor.type) (src tensor.type))
      (ft-tensor-neg ($handle tensor) ($handle src))
      tensor)
    (defmethod tensor-add ((tensor tensor.type) (src tensor.type) (value number))
      (ft-tensor-add ($handle tensor)
                     ($handle src)
                     (tensor-coerce src value))
      tensor)
    (defmethod tensor-sub ((tensor tensor.type) (src tensor.type) (value number))
      (ft-tensor-sub ($handle tensor)
                     ($handle src)
                     (tensor-coerce src value))
      tensor)
    (defmethod tensor-mul ((tensor tensor.type) (src tensor.type) (value number))
      (ft-tensor-mul ($handle tensor)
                     ($handle src)
                     (tensor-coerce src value))
      tensor)
    (defmethod tensor-div ((tensor tensor.type) (src tensor.type) (value number))
      (ft-tensor-div ($handle tensor)
                     ($handle src)
                     (tensor-coerce src value))
      tensor)
    (defmethod tensor-mod ((tensor tensor.type) (src tensor.type) (value number))
      (ft-tensor-remainder ($handle tensor)
                           ($handle src)
                           (tensor-coerce src value))
      tensor)
    (defmethod tensor-fmod ((tensor tensor.type) (src tensor.type) (value number))
      (ft-tensor-fmod ($handle tensor)
                      ($handle src)
                      (tensor-coerce src value))
      tensor)
    (defmethod tensor-clamp ((tensor tensor.type) (src tensor.type) (min number) (max number))
      (ft-tensor-clamp ($handle tensor)
                       ($handle src)
                       (tensor-coerce src min)
                       (tensor-coerce src max))
      tensor)
    (defmethod tensor-lshift ((tensor tensor.type) (src tensor.type) (value number))
      (ft-tensor-lshift ($handle tensor)
                        ($handle src)
                        (tensor-coerce src value))
      tensor)
    (defmethod tensor-rshift ((tensor tensor.type) (src tensor.type) (value number))
      (ft-tensor-rshift ($handle tensor)
                        ($handle src)
                        (tensor-coerce src value))
      tensor)
    (defmethod tensor-bitand ((tensor tensor.type) (src tensor.type) (value number))
      (ft-tensor-bitand ($handle tensor)
                        ($handle src)
                        (tensor-coerce src value))
      tensor)
    (defmethod tensor-bitor ((tensor tensor.type) (src tensor.type) (value number))
      (ft-tensor-bitor ($handle tensor)
                       ($handle src)
                       (tensor-coerce src value))
      tensor)
    (defmethod tensor-bitxor ((tensor tensor.type) (src tensor.type) (value number))
      (ft-tensor-bitxor ($handle tensor)
                        ($handle src)
                        (tensor-coerce src value))
      tensor)
    (defmethod tensor-cadd ((tensor tensor.type) (src1 tensor.type)
                            (value number) (src2 tensor.type))
      (ft-tensor-cadd ($handle tensor) ($handle src1)
                      (tensor-coerce tensor value) ($handle src2))
      tensor)
    (defmethod tensor-csub ((tensor tensor.type) (src1 tensor.type)
                            (value number) (src2 tensor.type))
      (ft-tensor-csub ($handle tensor) ($handle src1)
                      (tensor-coerce tensor value) ($handle src2))
      tensor)
    (defmethod tensor-cmul ((tensor tensor.type) (src1 tensor.type) (src2 tensor.type))
      (ft-tensor-cmul ($handle tensor) ($handle src1) ($handle src2))
      tensor)
    (defmethod tensor-cpow ((tensor tensor.type) (src1 tensor.type) (src2 tensor.type))
      (ft-tensor-cpow ($handle tensor) ($handle src1) ($handle src2))
      tensor)
    (defmethod tensor-cdiv ((tensor tensor.type) (src1 tensor.type) (src2 tensor.type))
      (ft-tensor-cdiv ($handle tensor) ($handle src1) ($handle src2))
      tensor)
    (defmethod tensor-clshift ((tensor tensor.type) (src1 tensor.type) (src2 tensor.type))
      (ft-tensor-clshift ($handle tensor) ($handle src1) ($handle src2))
      tensor)
    (defmethod tensor-crshift ((tensor tensor.type) (src1 tensor.type) (src2 tensor.type))
      (ft-tensor-crshift ($handle tensor) ($handle src1) ($handle src2))
      tensor)
    (defmethod tensor-cmod ((tensor tensor.type) (src1 tensor.type) (src2 tensor.type))
      (ft-tensor-cremainder ($handle tensor) ($handle src1) ($handle src2))
      tensor)
    (defmethod tensor-cfmod ((tensor tensor.type) (src1 tensor.type) (src2 tensor.type))
      (ft-tensor-cfmod ($handle tensor) ($handle src1) ($handle src2))
      tensor)
    (defmethod tensor-cbitand ((tensor tensor.type) (src1 tensor.type) (src2 tensor.type))
      (ft-tensor-cbitand ($handle tensor) ($handle src1) ($handle src2))
      tensor)
    (defmethod tensor-cbitor ((tensor tensor.type) (src1 tensor.type) (src2 tensor.type))
      (ft-tensor-cbitor ($handle tensor) ($handle src1) ($handle src2))
      tensor)
    (defmethod tensor-cbitxor ((tensor tensor.type) (src1 tensor.type) (src2 tensor.type))
      (ft-tensor-cbitxor ($handle tensor) ($handle src1) ($handle src2))
      tensor)
    (defmethod tensor-add-cmul ((tensor tensor.type) (src1 tensor.type) (value number)
                                (src2 tensor.type) (src3 tensor.type))
      (ft-tensor-add-cmul ($handle tensor)
                          ($handle src1)
                          (tensor-coerce src1 value)
                          ($handle src2)
                          ($handle src3))
      tensor)
    (defmethod tensor-add-cdiv ((tensor tensor.type) (src1 tensor.type) (value number)
                                (src2 tensor.type) (src3 tensor.type))
      (ft-tensor-add-cdiv ($handle tensor)
                          ($handle src1)
                          (tensor-coerce src1 value)
                          ($handle src2)
                          ($handle src3))
      tensor)
    (defmethod tensor-add-mv ((tensor tensor.type) (beta number) (y tensor.type)
                              (alpha number) (A tensor.type) (x tensor.type))
      (ft-tensor-add-mv ($handle tensor)
                        (tensor-coerce y beta)
                        ($handle y)
                        (tensor-coerce y alpha)
                        ($handle A)
                        ($handle x))
      tensor)
    (defmethod tensor-add-mm ((tensor tensor.type) (beta number) (C tensor.type)
                              (alpha number) (A tensor.type) (B tensor.type))
      (ft-tensor-add-mm ($handle tensor)
                        (tensor-coerce C beta)
                        ($handle C)
                        (tensor-coerce C alpha)
                        ($handle A)
                        ($handle B))
      tensor)
    (defmethod tensor-add-r ((tensor tensor.type) (beta number) (A tensor.type)
                             (alpha number) (x tensor.type) (y tensor.type))
      (ft-tensor-add-r ($handle tensor)
                       (tensor-coerce A beta)
                       ($handle A)
                       (tensor-coerce A alpha)
                       ($handle x)
                       ($handle y))
      tensor)
    (defmethod tensor-add-bmm ((tensor tensor.type) (beta number) (C tensor.type)
                               (alpha number) (A tensor.type) (B tensor.type))
      (ft-tensor-add-bmm ($handle tensor)
                         (tensor-coerce C beta)
                         ($handle C)
                         (tensor-coerce C alpha)
                         ($handle A)
                         ($handle B))
      tensor)
    (defmethod tensor-badd-bmm ((tensor tensor.type) (beta number) (C tensor.type)
                                (alpha number) (A tensor.type) (B tensor.type))
      (ft-tensor-badd-bmm ($handle tensor)
                          (tensor-coerce C beta)
                          ($handle C)
                          (tensor-coerce C alpha)
                          ($handle A)
                          ($handle B))
      tensor)
    (defmethod tensor-match ((tensor tensor.type) (m1 tensor.type) (m2 tensor.type) gain)
      (ft-tensor-match ($handle tensor)
                       ($handle m1) ($handle m2)
                       (tensor-coerce tensor gain))
      tensor)
    (defmethod tensor-max ((vals tensor.type) (indices tensor.long) (src tensor.type) dimension kd)
      (ft-tensor-max ($handle vals)
                     ($handle indices)
                     ($handle src)
                     dimension
                     (if kd 1 0))
      vals)
    (defmethod tensor-min ((vals tensor.type) (indices tensor.long) (src tensor.type) dimension kd)
      (ft-tensor-min ($handle vals)
                     ($handle indices)
                     ($handle src)
                     dimension
                     (if kd 1 0))
      vals)
    (defmethod tensor-kth-value ((vals tensor.type) (indices tensor.long) (src tensor.type)
                                 k dimension keepdim)
      (ft-tensor-kth-value ($handle vals)
                           ($handle indices)
                           ($handle src)
                           k dimension (if keepdim 1 0))
      vals)
    (defmethod tensor-kth-value ((vals tensor.type) (indices list) (src tensor.type)
                                 k dimension keepdim)
      (let ((idx (tensor.long indices)))
        (ft-tensor-kth-value ($handle vals)
                             ($handle idx)
                             ($handle src)
                             k dimension (if keepdim 1 0)))
      vals)
    (defmethod tensor-mode ((vals tensor.type) (indices tensor.long) (src tensor.type)
                            dimension keepdim)
      (ft-tensor-mode ($handle vals)
                      ($handle indices)
                      ($handle src)
                      dimension (if keepdim 1 0))
      vals)
    (defmethod tensor-mode ((vals tensor.type) (indices list) (src tensor.type)
                            dimension keepdim)
      (let ((idx (tensor.long indices)))
        (ft-tensor-mode ($handle vals)
                        ($handle idx)
                        ($handle src)
                        dimension (if keepdim 1 0)))
      vals)
    (defmethod tensor-median ((vals tensor.type) (indices tensor.long) (src tensor.type)
                              dimension keepdim)
      (ft-tensor-median ($handle vals)
                        ($handle indices)
                        ($handle src)
                        dimension (if keepdim 1 0))
      vals)
    (defmethod tensor-median ((vals tensor.type) (indices list) (src tensor.type)
                              dimension keepdim)
      (let ((idx (tensor.long indices)))
        (ft-tensor-median ($handle vals)
                          ($handle idx)
                          ($handle src)
                          dimension (if keepdim 1 0)))
      vals)
    (defmethod tensor-sum ((tensor tensor.type) (src tensor.type) dimension keepdim)
      (ft-tensor-sum ($handle tensor)
                     ($handle src)
                     dimension (if keepdim 1 0))
      tensor)
    (defmethod tensor-prd ((tensor tensor.type) (src tensor.type) dimension keepdim)
      (ft-tensor-prod ($handle tensor)
                      ($handle src)
                      dimension (if keepdim 1 0))
      tensor)
    (defmethod tensor-cum-sum ((tensor tensor.type) (src tensor.type) dimension)
      (ft-tensor-cum-sum ($handle tensor)
                         ($handle src)
                         dimension)
      tensor)
    (defmethod tensor-cum-prd ((tensor tensor.type) (src tensor.type) dimension)
      (ft-tensor-cum-prod ($handle tensor)
                          ($handle src)
                          dimension)
      tensor)
    (defmethod tensor-sign ((tensor tensor.type) (src tensor.type))
      (ft-tensor-sign ($handle tensor) ($handle src))
      tensor)
    (defmethod tensor-trace ((tensor tensor.type)) (ft-tensor-trace ($handle tensor)))
    (defmethod tensor-cross ((tensor tensor.type) (A tensor.type) (B tensor.type) dimension)
      (ft-tensor-cross ($handle tensor)
                       ($handle A)
                       ($handle B)
                       dimension)
      tensor)
    (defmethod tensor-cmax ((tensor tensor.type) (src1 tensor.type) (src2 tensor.type))
      (ft-tensor-cmax ($handle tensor) ($handle src1) ($handle src2))
      tensor)
    (defmethod tensor-cmax ((tensor tensor.type) (src1 tensor.type) (src2 number))
      (ft-tensor-cmax-value ($handle tensor) ($handle src1)
                            (tensor-coerce tensor src2))
      tensor)
    (defmethod tensor-cmin ((tensor tensor.type) (src1 tensor.type) (src2 tensor.type))
      (ft-tensor-cmin ($handle tensor) ($handle src1) ($handle src2))
      tensor)
    (defmethod tensor-cmin ((tensor tensor.type) (src1 tensor.type) (src2 number))
      (ft-tensor-cmin-value ($handle tensor) ($handle src1)
                            (tensor-coerce tensor src2))
      tensor)
    (defmethod tensor-zeros ((tensor tensor.type) (size storage.long))
      (ft-tensor-zeros ($handle tensor) ($handle size))
      tensor)
    (defmethod tensor-zeros ((tensor tensor.type) (size list))
      (when size
        (let ((s (storage.long size)))
          (ft-tensor-zeros ($handle tensor) ($handle s))
          tensor)))
    (defmethod tensor-zeros ((tensor tensor.type) (src tensor.type))
      (ft-tensor-zeros ($handle tensor) ($size src))
      tensor)
    (defmethod tensor-ones ((tensor tensor.type) (size storage.long))
      (ft-tensor-ones ($handle tensor) ($handle size))
      tensor)
    (defmethod tensor-ones ((tensor tensor.type) (size list))
      (when size
        (let ((s (storage.long size)))
          (ft-tensor-ones ($handle tensor) ($handle s))
          tensor)))
    (defmethod tensor-ones ((tensor tensor.type) (src tensor.type))
      (ft-tensor-ones ($handle tensor) ($size src))
      tensor)
    (defmethod tensor-diag ((tensor tensor.type) (src tensor.type) k)
      (ft-tensor-diag ($handle tensor) ($handle src) k)
      tensor)
    (defmethod tensor-eye ((tensor tensor.type) nrow ncol)
      (ft-tensor-eye ($handle tensor) nrow ncol)
      tensor)
    (defmethod tensor-arange ((tensor tensor.type) xmin xmax step)
      (ft-tensor-arange ($handle tensor)
                        (tensor-acoerce tensor xmin)
                        (tensor-acoerce tensor xmax)
                        (tensor-acoerce tensor step))
      tensor)
    (defmethod tensor-range ((tensor tensor.type) xmin xmax step)
      (ft-tensor-range ($handle tensor)
                       (tensor-acoerce tensor xmin)
                       (tensor-acoerce tensor xmax)
                       (tensor-acoerce tensor step))
      tensor)
    (defmethod tensor-rand-perm ((tensor tensor.type) n &optional generator)
      (ft-tensor-rand-perm ($handle tensor) ($handle (or generator *generator*)) n)
      tensor)
    (defmethod tensor-reshape ((tensor tensor.type) (src tensor.type) (size storage.long))
      (ft-tensor-reshape ($handle tensor) ($handle src) ($handle size))
      tensor)
    (defmethod tensor-reshape ((tensor tensor.type) (src tensor.type) (size list))
      (when size
        (let ((s (storage.long size)))
          (ft-tensor-reshape ($handle tensor) ($handle src) ($handle s))))
      tensor)
    (defmethod tensor-sort ((tensor tensor.type) (indices tensor.long) (src tensor.type)
                            dimension descending)
      (ft-tensor-sort ($handle tensor)
                      ($handle indices)
                      ($handle src)
                      dimension
                      (if descending 1 0))
      tensor)
    (defmethod tensor-sort ((tensor tensor.type) (indices list) (src tensor.type)
                            dimension descending)
      (when indices
        (let ((idx (tensor.long indices)))
          (ft-tensor-sort ($handle tensor)
                          ($handle idx)
                          ($handle src)
                          dimension
                          (if descending 1 0))))
      tensor)
    (defmethod tensor-top-k ((tensor tensor.type) (indices tensor.long) (src tensor.type)
                             k dim descending sorted)
      (ft-tensor-topk ($handle tensor) ($handle indices)
                      ($handle src)
                      k dim (if descending 1 0) (if sorted 1 0))
      tensor)
    (defmethod tensor-tri-l ((tensor tensor.type) (src tensor.type) k)
      (ft-tensor-tril ($handle tensor) ($handle src) k)
      tensor)
    (defmethod tensor-tri-u ((tensor tensor.type) (src tensor.type) k)
      (ft-tensor-triu ($handle tensor) ($handle src) k)
      tensor)
    (defmethod tensor-catn ((tensor tensor.type) dimension srcs)
      (let ((n ($count srcs)))
        (cffi:with-foreign-object (inputs :pointer n)
          (loop :for s :in srcs
                :for i :from 0
                :do (setf (cffi:mem-aref inputs :pointer i) ($handle s)))
          (ft-tensor-cat-array ($handle tensor) inputs n dimension))
        tensor))
    (defmethod tensor-cat ((tensor tensor.type) dimension &rest srcs)
      (cond ((null srcs) tensor)
            ((eq 1 ($count srcs)) (tensor-set tensor (tensor-clone ($0 srcs))))
            ((eq 2 ($count srcs)) (progn
                                    (ft-tensor-cat ($handle tensor)
                                                   ($handle ($0 srcs))
                                                   ($handle ($1 srcs))
                                                   dimension)
                                    tensor))
            (t (progn
                 (tensor-catn tensor dimension srcs)
                 tensor))))
    (defmethod tensor-cat2 ((tensor tensor.type) dimension (src1 tensor.type) (src2 tensor.type))
      (ft-tensor-cat ($handle tensor) ($handle src1) ($handle src2) dimension)
      tensor)
    (defmethod tensor-equal ((tensora tensor.type) (tensorb tensor.type))
      (eq 1 (ft-tensor-equal ($handle tensora) ($handle tensorb))))
    (defmethod tensor-compare (operation (tensor tensor.type) (src1 tensor.type) (src2 number))
      (cond ((eq operation :lt) (progn (ft-tensor-lt-value-t ($handle tensor)
                                                             ($handle src1)
                                                             (tensor-coerce src1 src2))
                                       tensor))
            ((eq operation :le) (progn (ft-tensor-le-value-t ($handle tensor)
                                                             ($handle src1)
                                                             (tensor-coerce src1 src2))
                                       tensor))
            ((eq operation :gt) (progn (ft-tensor-gt-value-t ($handle tensor)
                                                             ($handle src1)
                                                             (tensor-coerce src1 src2))
                                       tensor))
            ((eq operation :ge) (progn (ft-tensor-ge-value-t ($handle tensor)
                                                             ($handle src1)
                                                             (tensor-coerce src1 src2))
                                       tensor))
            ((eq operation :ne) (progn (ft-tensor-ne-value-t ($handle tensor)
                                                             ($handle src1)
                                                             (tensor-coerce src1 src2))
                                       tensor))
            ((eq operation :eq) (progn (ft-tensor-eq-value-t ($handle tensor)
                                                             ($handle src1)
                                                             (tensor-coerce src1 src2))
                                       tensor))))
    (defmethod tensor-compare (operation (tensor tensor.type) (src1 tensor.type) (src2 tensor.type))
      (cond ((eq operation :lt) (progn (ft-tensor-lt-tensor-t ($handle tensor)
                                                              ($handle src1)
                                                              ($handle src2))
                                       tensor))
            ((eq operation :le) (progn (ft-tensor-le-tensor-t ($handle tensor)
                                                              ($handle src1)
                                                              ($handle src2))
                                       tensor))
            ((eq operation :gt) (progn (ft-tensor-gt-tensor-t ($handle tensor)
                                                              ($handle src1)
                                                              ($handle src2))
                                       tensor))
            ((eq operation :ge) (progn (ft-tensor-ge-tensor-t ($handle tensor)
                                                              ($handle src1)
                                                              ($handle src2))
                                       tensor))
            ((eq operation :ne) (progn (ft-tensor-ne-tensor-t ($handle tensor)
                                                              ($handle src1)
                                                              ($handle src2))
                                       tensor))
            ((eq operation :eq) (progn (ft-tensor-eq-tensor-t ($handle tensor)
                                                              ($handle src1)
                                                              ($handle src2))
                                       tensor))))
    (defmethod tensor-compare (operation (tensor tensor.byte) (src1 tensor.type) (src2 number))
      (cond ((eq operation :lt) (progn (ft-tensor-lt-value ($handle tensor)
                                                           ($handle src1)
                                                           (tensor-coerce src1 src2))
                                       tensor))
            ((eq operation :le) (progn (ft-tensor-le-value ($handle tensor)
                                                           ($handle src1)
                                                           (tensor-coerce src1 src2))
                                       tensor))
            ((eq operation :gt) (progn (ft-tensor-gt-value ($handle tensor)
                                                           ($handle src1)
                                                           (tensor-coerce src1 src2))
                                       tensor))
            ((eq operation :ge) (progn (ft-tensor-ge-value ($handle tensor)
                                                           ($handle src1)
                                                           (tensor-coerce src1 src2))
                                       tensor))
            ((eq operation :ne) (progn (ft-tensor-ne-value ($handle tensor)
                                                           ($handle src1)
                                                           (tensor-coerce src1 src2))
                                       tensor))
            ((eq operation :eq) (progn (ft-tensor-eq-value ($handle tensor)
                                                           ($handle src1)
                                                           (tensor-coerce src1 src2))
                                       tensor))))
    (defmethod tensor-compare (operation (tensor tensor.byte) (src1 tensor.type) (src2 tensor.type))
      (cond ((eq operation :lt) (progn (ft-tensor-lt-tensor ($handle tensor)
                                                            ($handle src1)
                                                            ($handle src2))
                                       tensor))
            ((eq operation :le) (progn (ft-tensor-le-tensor ($handle tensor)
                                                            ($handle src1)
                                                            ($handle src2))
                                       tensor))
            ((eq operation :gt) (progn (ft-tensor-gt-tensor ($handle tensor)
                                                            ($handle src1)
                                                            ($handle src2))
                                       tensor))
            ((eq operation :ge) (progn (ft-tensor-ge-tensor ($handle tensor)
                                                            ($handle src1)
                                                            ($handle src2))
                                       tensor))
            ((eq operation :ne) (progn (ft-tensor-ne-tensor ($handle tensor)
                                                            ($handle src1)
                                                            ($handle src2))
                                       tensor))
            ((eq operation :eq) (progn (ft-tensor-eq-tensor ($handle tensor)
                                                            ($handle src1)
                                                            ($handle src2))
                                       tensor))))
    (defmethod tensor-conv-2d-rev-ger ((result tensor.type) beta alpha (tensor tensor.type)
                                       (k tensor.type) srow scol)
      (ft-tensor-conv-2d-rev-ger ($handle result)
                                 (tensor-coerce tensor beta)
                                 (tensor-coerce tensor alpha)
                                 ($handle tensor)
                                 ($handle k)
                                 srow scol))
    (defmethod tensor-conv-2d-rev-germ ((result tensor.type) beta alpha (tensor tensor.type)
                                        (k tensor.type) srow scol)
      (ft-tensor-conv-2d-rev-germ ($handle result)
                                  (tensor-coerce tensor beta)
                                  (tensor-coerce tensor alpha)
                                  ($handle tensor)
                                  ($handle k)
                                  srow scol))
    (defmethod tensor-conv-2d-ger ((result tensor.type) beta alpha (tensor tensor.type)
                                   (k tensor.type) srow scol vf xc)
      (ft-tensor-conv-2d-ger ($handle result)
                             (tensor-coerce tensor beta)
                             (tensor-coerce tensor alpha)
                             ($handle tensor)
                             ($handle k)
                             srow scol vf xc))
    (defmethod tensor-conv-2d-mv ((result tensor.type) beta alpha (tensor tensor.type)
                                  (k tensor.type) srow scol vf xc)
      (ft-tensor-conv-2d-mv ($handle result)
                            (tensor-coerce tensor beta)
                            (tensor-coerce tensor alpha)
                            ($handle tensor)
                            ($handle k)
                            srow scol vf xc))
    (defmethod tensor-conv-2d-mm ((result tensor.type) beta alpha (tensor tensor.type)
                                  (k tensor.type) srow scol vf xc)
      (ft-tensor-conv-2d-mm ($handle result)
                            (tensor-coerce tensor beta)
                            (tensor-coerce tensor alpha)
                            ($handle tensor)
                            ($handle k)
                            srow scol vf xc))
    (defmethod tensor-conv-2d-mul ((result tensor.type) beta alpha (tensor tensor.type)
                                   (k tensor.type) srow scol vf xc)
      (ft-tensor-conv-2d-mul ($handle result)
                             (tensor-coerce tensor beta)
                             (tensor-coerce tensor alpha)
                             ($handle tensor)
                             ($handle k)
                             srow scol vf xc))
    (defmethod tensor-conv-2d-cmul ((result tensor.type) beta alpha (tensor tensor.type)
                                    (k tensor.type) srow scol vf xc)
      (ft-tensor-conv-2d-cmul ($handle result)
                              (tensor-coerce tensor beta)
                              (tensor-coerce tensor alpha)
                              ($handle tensor)
                              ($handle k)
                              srow scol vf xc))
    (defmethod tensor-conv-3d-rev-ger ((result tensor.type) beta alpha (tensor tensor.type)
                                       (k tensor.type) sdepth srow scol)
      (ft-tensor-conv-3d-rev-ger ($handle result)
                                 (tensor-coerce tensor beta)
                                 (tensor-coerce tensor alpha)
                                 ($handle tensor)
                                 ($handle k)
                                 sdepth srow scol))
    (defmethod tensor-conv-3d-ger ((result tensor.type) beta alpha (tensor tensor.type)
                                   (k tensor.type) sdepth srow scol vf xc)
      (ft-tensor-conv-3d-ger ($handle result)
                             (tensor-coerce tensor beta)
                             (tensor-coerce tensor alpha)
                             ($handle tensor)
                             ($handle k)
                             sdepth srow scol vf xc))
    (defmethod tensor-conv-3d-mv ((result tensor.type) beta alpha (tensor tensor.type)
                                  (k tensor.type) sdepth srow scol vf xc)
      (ft-tensor-conv-3d-mv ($handle result)
                            (tensor-coerce tensor beta)
                            (tensor-coerce tensor alpha)
                            ($handle tensor)
                            ($handle k)
                            sdepth srow scol vf xc))
    (defmethod tensor-conv-3d-mul ((result tensor.type) beta alpha (tensor tensor.type)
                                   (k tensor.type) sdepth srow scol vf xc)
      (ft-tensor-conv-3d-mul ($handle result)
                             (tensor-coerce tensor beta)
                             (tensor-coerce tensor alpha)
                             ($handle tensor)
                             ($handle k)
                             sdepth srow scol vf xc))
    (defmethod tensor-conv-3d-cmul ((result tensor.type) beta alpha (tensor tensor.type)
                                    (k tensor.type) sdepth srow scol vf xc)
      (ft-tensor-conv-3d-cmul ($handle result)
                              (tensor-coerce tensor beta)
                              (tensor-coerce tensor alpha)
                              ($handle tensor)
                              ($handle k)
                              sdepth srow scol vf xc))))

(loop :for ti :in *th-type-infos*
      :for type = (car ti)
      :do (loop :for fimpl :in *tensor-generic-interface-implementations*
                :do (eval (%%gen-impl fimpl type))))

(defparameter *tensor-generic-interface-fractional-implementations*
  '((defmethod tensor-uniform ((tensor tensor.type) a b &optional generator)
      (ft-tensor-uniform ($handle tensor) ($handle (or generator *generator*))
                         (tensor-acoerce tensor a)
                         (tensor-acoerce tensor b))
      tensor)
    (defmethod tensor-normal ((tensor tensor.type) (mean number) (stdev number) &optional generator)
      (ft-tensor-normal ($handle tensor) ($handle (or generator *generator*))
                        (tensor-acoerce tensor mean)
                        (tensor-acoerce tensor stdev))
      tensor)
    (defmethod tensor-exponential ((tensor tensor.type) lam &optional generator)
      (ft-tensor-exponential ($handle tensor) ($handle (or generator *generator*))
                             (tensor-acoerce tensor lam))
      tensor)
    (defmethod tensor-cauchy ((tensor tensor.type) median sigma &optional generator)
      (ft-tensor-cauchy ($handle tensor) ($handle (or generator *generator*))
                        (tensor-acoerce tensor median)
                        (tensor-acoerce tensor sigma))
      tensor)
    (defmethod tensor-log-normal ((tensor tensor.type) mean stdev &optional generator)
      (ft-tensor-log-normal ($handle tensor) ($handle (or generator *generator*))
                            (tensor-acoerce tensor mean)
                            (tensor-acoerce tensor stdev))
      tensor)
    (defmethod tensor-multinomial ((tensor tensor.long) (pdist tensor.type) nsample replacement
                                   &optional generator)
      (ft-tensor-multinomial ($handle tensor)
                             ($handle (or generator *generator*))
                             ($handle pdist)
                             nsample
                             (if replacement 1 0))
      tensor)
    (defmethod tensor-rbeta ((tensor tensor.type) a b &optional generator)
      (ft-tensor-rbeta ($handle tensor) ($handle (or generator *generator*))
                       (tensor-acoerce tensor a)
                       (tensor-acoerce tensor b))
      tensor)
    (defmethod tensor-rgamma ((tensor tensor.type) shape scale &optional generator)
      (ft-tensor-rgamma ($handle tensor) ($handle (or generator *generator*))
                        (tensor-acoerce tensor shape)
                        (tensor-acoerce tensor scale))
      tensor)
    (defmethod tensor-multinomial-alias-setup ((pdist tensor.type) (J tensor.long) (q tensor.type))
      (ft-tensor-multinomial-alias-setup ($handle pdist)
                                         ($handle J)
                                         ($handle q))
      pdist)
    (defmethod tensor-multinomial-alias-draw ((tensor tensor.type) (J tensor.long) (q tensor.type)
                                              &optional generator)
      (ft-tensor-multinomial-alias-draw ($handle tensor)
                                        ($handle (or generator *generator*))
                                        ($handle J)
                                        ($handle q))
      tensor)
    (defmethod tensor-cinv ((tensor tensor.type) (src tensor.type))
      (ft-tensor-cinv ($handle tensor) ($handle src))
      tensor)
    (defmethod tensor-sigmoid ((tensor tensor.type) (src tensor.type))
      (ft-tensor-sigmoid ($handle tensor) ($handle src))
      tensor)
    (defmethod tensor-log ((tensor tensor.type) (src tensor.type))
      (ft-tensor-log ($handle tensor) ($handle src))
      tensor)
    (defmethod tensor-gamma ((tensor tensor.type) (src tensor.type))
      (ft-tensor-gamma ($handle tensor) ($handle src))
      tensor)
    (defmethod tensor-lgamma ((tensor tensor.type) (src tensor.type))
      (ft-tensor-lgamma ($handle tensor) ($handle src))
      tensor)
    (defmethod tensor-erf ((tensor tensor.type) (src tensor.type))
      (ft-tensor-erf ($handle tensor) ($handle src))
      tensor)
    (defmethod tensor-erfc ((tensor tensor.type) (src tensor.type))
      (ft-tensor-erfc ($handle tensor) ($handle src))
      tensor)
    (defmethod tensor-polygamma ((tensor tensor.type) (src tensor.type) n)
      (ft-tensor-polygamma n ($handle src) ($handle tensor))
      tensor)
    (defmethod tensor-lbeta ((tensor tensor.type) (a tensor.type) (b tensor.type))
      (ft-tensor-lbeta ($handle a) ($handle b) ($handle tensor))
      tensor)
    (defmethod tensor-log1p ((tensor tensor.type) (src tensor.type))
      (ft-tensor-log1p ($handle tensor) ($handle src))
      tensor)
    (defmethod tensor-exp ((tensor tensor.type) (src tensor.type))
      (ft-tensor-exp ($handle tensor) ($handle src))
      tensor)
    (defmethod tensor-cos ((tensor tensor.type) (src tensor.type))
      (ft-tensor-cos ($handle tensor) ($handle src))
      tensor)
    (defmethod tensor-acos ((tensor tensor.type) (src tensor.type))
      (ft-tensor-acos ($handle tensor) ($handle src))
      tensor)
    (defmethod tensor-cosh ((tensor tensor.type) (src tensor.type))
      (ft-tensor-cosh ($handle tensor) ($handle src))
      tensor)
    (defmethod tensor-sin ((tensor tensor.type) (src tensor.type))
      (ft-tensor-sin ($handle tensor) ($handle src))
      tensor)
    (defmethod tensor-asin ((tensor tensor.type) (src tensor.type))
      (ft-tensor-asin ($handle tensor) ($handle src))
      tensor)
    (defmethod tensor-sinh ((tensor tensor.type) (src tensor.type))
      (ft-tensor-sinh ($handle tensor) ($handle src))
      tensor)
    (defmethod tensor-tan ((tensor tensor.type) (src tensor.type))
      (ft-tensor-tan ($handle tensor) ($handle src))
      tensor)
    (defmethod tensor-atan ((tensor tensor.type) (src tensor.type))
      (ft-tensor-atan ($handle tensor) ($handle src))
      tensor)
    (defmethod tensor-atan2 ((tensor tensor.type) (tensorx tensor.type) (tensory tensor.type))
      (ft-tensor-atan2 ($handle tensor) ($handle tensorx) ($handle tensory))
      tensor)
    (defmethod tensor-tanh ((tensor tensor.type) (src tensor.type))
      (ft-tensor-tanh ($handle tensor) ($handle src))
      tensor)
    (defmethod tensor-pow ((tensor tensor.type) (src tensor.type) (exponent number))
      (ft-tensor-pow ($handle tensor) ($handle src) (tensor-coerce tensor exponent))
      tensor)
    (defmethod tensor-pow ((tensor tensor.type) (src number) (exponent tensor.type))
      (ft-tensor-tpow ($handle tensor)
                      (tensor-coerce tensor src) ($handle exponent))
      tensor)
    (defmethod tensor-sqrt ((tensor tensor.type) (src tensor.type))
      (ft-tensor-sqrt ($handle tensor) ($handle src))
      tensor)
    (defmethod tensor-rsqrt ((tensor tensor.type) (src tensor.type))
      (ft-tensor-rsqrt ($handle tensor) ($handle src))
      tensor)
    (defmethod tensor-ceil ((tensor tensor.type) (src tensor.type))
      (ft-tensor-ceil ($handle tensor) ($handle src))
      tensor)
    (defmethod tensor-floor ((tensor tensor.type) (src tensor.type))
      (ft-tensor-floor ($handle tensor) ($handle src))
      tensor)
    (defmethod tensor-round ((tensor tensor.type) (src tensor.type))
      (ft-tensor-round ($handle tensor) ($handle src))
      tensor)
    (defmethod tensor-abs ((tensor tensor.type) (src tensor.type))
      (ft-tensor-abs ($handle tensor) ($handle src))
      tensor)
    (defmethod tensor-trunc ((tensor tensor.type) (src tensor.type))
      (ft-tensor-trunc ($handle tensor) ($handle src))
      tensor)
    (defmethod tensor-frac ((tensor tensor.type) (src tensor.type))
      (ft-tensor-frac ($handle tensor) ($handle src))
      tensor)
    (defmethod tensor-lerp ((tensor tensor.type) (a tensor.type) (b tensor.type) weight)
      (ft-tensor-lerp ($handle tensor)
                      ($handle a)
                      ($handle b)
                      (tensor-coerce a weight))
      tensor)
    (defmethod tensor-mean ((tensor tensor.type) (src tensor.type) dimension keepdim)
      (ft-tensor-mean ($handle tensor) ($handle src)
                      dimension (if keepdim 1 0))
      tensor)
    (defmethod tensor-sd ((tensor tensor.type) (src tensor.type) dimension keepdim
                          &optional biased)
      (ft-tensor-std ($handle tensor) ($handle src)
                     dimension (if biased 1 0) (if keepdim 1 0))
      tensor)
    (defmethod tensor-var ((tensor tensor.type) (src tensor.type) dimension keepdim
                           &optional biased)
      (ft-tensor-var ($handle tensor) ($handle src)
                     dimension (if biased 1 0) (if keepdim 1 0))
      tensor)
    (defmethod tensor-norm ((tensor tensor.type) (src tensor.type) value dimension keep-dim)
      (ft-tensor-norm ($handle tensor)
                      ($handle src)
                      (tensor-coerce tensor value)
                      dimension
                      (if keep-dim 1 0))
      tensor)
    (defmethod tensor-renorm ((tensor tensor.type) (src tensor.type) value dimension maxnorm)
      (ft-tensor-renorm ($handle tensor)
                        ($handle src)
                        (tensor-coerce tensor value)
                        dimension
                        (tensor-coerce tensor maxnorm))
      tensor)
    (defmethod tensor-dist ((tensora tensor.type) (tensorb tensor.type) value)
      (ft-tensor-dist ($handle tensora) ($handle tensorb) (tensor-coerce tensora value)))
    (defmethod tensor-histc ((hist tensor.type) (src tensor.type) nbins minvalue maxvalue)
      (ft-tensor-histc ($handle hist)
                       ($handle src)
                       nbins
                       (tensor-coerce hist minvalue)
                       (tensor-coerce hist maxvalue))
      hist)
    (defmethod tensor-bhistc ((hist tensor.type) (src tensor.type) nbins minvalue maxvalue)
      (ft-tensor-bhistc ($handle hist)
                        ($handle src)
                        nbins
                        (tensor-coerce hist minvalue)
                        (tensor-coerce hist maxvalue))
      hist)
    (defmethod tensor-mean-all ((tensor tensor.type)) (ft-tensor-mean-all ($handle tensor)))
    (defmethod tensor-var-all ((tensor tensor.type) &optional biased)
      (ft-tensor-varall ($handle tensor) (if biased 1 0)))
    (defmethod tensor-sd-all ((tensor tensor.type) &optional biased)
      (ft-tensor-std-all ($handle tensor) (if biased 1 0)))
    (defmethod tensor-norm-all ((tensor tensor.type) value)
      (ft-tensor-norm-all ($handle tensor) (tensor-coerce tensor value)))
    (defmethod tensor-linspace ((tensor tensor.type) a b n)
      (ft-tensor-linspace ($handle tensor) (tensor-coerce tensor a) (tensor-coerce tensor b) n)
      tensor)
    (defmethod tensor-logspace ((tensor tensor.type) a b n)
      (ft-tensor-logspace ($handle tensor) (tensor-coerce tensor a) (tensor-coerce tensor b) n)
      tensor)
    (defmethod tensor-rand ((tensor tensor.type) (size storage.long) &optional generator)
      (ft-tensor-rand ($handle tensor) ($handle (or generator *generator*)) ($handle size))
      tensor)
    (defmethod tensor-rand ((tensor tensor.type) (size list) &optional generator)
      (when size
        (let ((s (storage.long size)))
          (ft-tensor-rand ($handle tensor) ($handle (or generator *generator*)) ($handle s))))
      tensor)
    (defmethod tensor-randn ((tensor tensor.type) (size storage.long) &optional generator)
      (ft-tensor-randn ($handle tensor) ($handle (or generator *generator*)) ($handle size))
      tensor)
    (defmethod tensor-randn ((tensor tensor.type) (size list) &optional generator)
      (when size
        (let ((s (storage.long size)))
          (ft-tensor-randn ($handle tensor) ($handle (or generator *generator*)) ($handle s))))
      tensor)
    (defmethod tensor-gesv ((rb tensor.type) (ra tensor.type) (b tensor.type) (a tensor.type))
      (ft-tensor-gesv ($handle rb)
                      ($handle ra)
                      ($handle b)
                      ($handle a)))
    (defmethod tensor-trtrs ((rb tensor.type) (ra tensor.type) (b tensor.type) (a tensor.type)
                             uplo trans diag)
      (ft-tensor-trtrs ($handle rb)
                       ($handle ra)
                       ($handle b)
                       ($handle a)
                       (if uplo "U" "L")
                       (if trans "T" "N")
                       (if diag "U" "N")))
    (defmethod tensor-gels ((rb tensor.type) (ra tensor.type) (b tensor.type) (a tensor.type))
      (ft-tensor-gels ($handle rb)
                      ($handle ra)
                      ($handle b)
                      ($handle a)))
    (defmethod tensor-syev ((re tensor.type) (rv tensor.type) (a tensor.type) jobz uplo)
      (ft-tensor-syev ($handle re)
                      ($handle rv)
                      ($handle a)
                      (if jobz "V" "N")
                      (if uplo "U" "L")))
    (defmethod tensor-geev ((re tensor.type) (rv tensor.type) (a tensor.type) jobvr)
      (ft-tensor-geev ($handle re)
                      ($handle rv)
                      ($handle a)
                      (if jobvr "V" "N")))
    (defmethod tensor-gesvd ((ru tensor.type) (rs tensor.type) (rv tensor.type)
                             (a tensor.type) jobu)
      (ft-tensor-gesvd ($handle ru)
                       ($handle rs)
                       ($handle rv)
                       ($handle a)
                       (if jobu "A" "S")))
    (defmethod tensor-gesvd2 ((ru tensor.type) (rs tensor.type) (rv tensor.type)
                              (ra tensor.type) (a tensor.type) jobu)
      (ft-tensor-gesvd2 ($handle ru)
                        ($handle rs)
                        ($handle rv)
                        ($handle ra)
                        ($handle a)
                        (if jobu "A" "S")))
    (defmethod tensor-getri ((ra tensor.type) (a tensor.type))
      (ft-tensor-getri ($handle ra) ($handle a)))
    (defmethod tensor-potrf ((ra tensor.type) (a tensor.type) uplo)
      (ft-tensor-potrf ($handle ra)
                       ($handle a)
                       (if uplo "U" "L")))
    (defmethod tensor-potrs ((rb tensor.type) (b tensor.type) (a tensor.type) uplo)
      (ft-tensor-potrs ($handle rb)
                       ($handle b)
                       ($handle a)
                       (if uplo "U" "L")))
    (defmethod tensor-potri ((ra tensor.type) (a tensor.type) uplo)
      (ft-tensor-potri ($handle ra)
                       ($handle a)
                       (if uplo "U" "L")))
    (defmethod tensor-qr ((rq tensor.type) (rr tensor.type) (a tensor.type))
      (ft-tensor-qr ($handle rq) ($handle rr) ($handle a)))
    (defmethod tensor-geqrf ((ra tensor.type) (rtau tensor.type) (a tensor.type))
      (ft-tensor-geqrf ($handle ra) ($handle rtau) ($handle a)))
    (defmethod tensor-orgqr ((ra tensor.type) (a tensor.type) (tau tensor.type))
      (ft-tensor-orgqr ($handle ra) ($handle a) ($handle tau)))
    (defmethod tensor-ormqr ((ra tensor.type) (a tensor.type) (tau tensor.type)
                             (c tensor.type) left trans)
      (ft-tensor-ormqr ($handle ra)
                       ($handle a)
                       ($handle tau)
                       ($handle c)
                       (if left "L" "R")
                       (if trans "T" "N")))
    (defmethod tensor-pstrf ((ra tensor.type) (rpiv tensor.int) (a tensor.type) uplo tol)
      (ft-tensor-pstrf ($handle ra)
                       ($handle rpiv)
                       ($handle a)
                       (if uplo "U" "L")
                       (tensor-coerce ra tol)))
    (defmethod tensor-btrifact ((ra tensor.type) (rpivots tensor.int) (rinfo tensor.int)
                                (a tensor.type) pivot)
      (ft-tensor-btrifact ($handle ra)
                          ($handle rpivots)
                          ($handle rinfo)
                          (if pivot 1 0)
                          ($handle a)))
    (defmethod tensor-btrisolve ((rb tensor.type) (b tensor.type) (atf tensor.type)
                                 (pivots tensor.int))
      (ft-tensor-btrisolve ($handle rb)
                           ($handle b)
                           ($handle atf)
                           ($handle pivots)))))

(loop :for ti :in (last *th-type-infos* 2)
      :for type = (car ti)
      :do (loop :for fimpl :in *tensor-generic-interface-fractional-implementations*
                :do (eval (%%gen-impl fimpl type))))
