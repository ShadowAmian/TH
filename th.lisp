(in-package :th)

(defgeneric $empty (object)
  (:documentation "Returns empty new object from object type."))

(defgeneric $handle (object)
  (:documentation "Returns native handle of the object."))
(defgeneric $type (object)
  (:documentation "Returns native type tag of the object."))
(defgeneric $coerce (object value)
  (:documentation "Returns coerced value for the given object type."))
(defgeneric $acoerce (object value)
  (:documentation "Returns coerced value for accumulation."))

(defgeneric $pointer (object)
  (:documentation "Returns pointer of the data of the object."))
(defgeneric $size (object &optional dimension)
  (:documentation "Returns size of the object along dimension."))

(defgeneric $swap (object1 object2)
  (:documentation "Swaps the contents of objects."))
(defgeneric $resize (object size &optional stride)
  (:documentation "Resizes object as size and stride."))
(defgeneric $fill (object value)
  (:documentation "Fills object content with value."))
(defgeneric $copy (object source)
  (:documentation "Copies content from source."))

(defgeneric $storagep (object)
  (:documentation "Returns whether object is storage or not."))
(defgeneric $tensorp (object)
  (:documentation "Returns whether object is tensor or not."))

(defgeneric $validp (generator)
  (:documentation "Returns whether generator is valid one or not."))

(defgeneric $seed (generator)
  (:documentation "Returns current seed of generator."))

(defgeneric $random (generator)
  (:documentation "Returns random number from generator."))

(defgeneric $uniform (object a b)
  (:documentation "Returns uniform random number between a and b."))
(defgeneric $normal (object mean stdv)
  (:documentation "Returns normal random number from N(mean,stdv)."))
(defgeneric $exponential (object lam)
  (:documentation "Returns exponential random number with rate lam."))
(defgeneric $cauchy (object median sigma)
  (:documentation "Returns cauchy random number."))
(defgeneric $log-normal (object mean stdv)
  (:documentation "Returns log normal random number from N(mean,stdv)."))
(defgeneric $geometric (object p)
  (:documentation "Returns geometric random number."))
(defgeneric $bernoulli (object p)
  (:documentation "Returns bernoulli random number."))

(defgeneric $storage (tensor)
  (:documentation "Returns storage of tensor."))
(defgeneric $offset (tensor)
  (:documentation "Returns storage offset."))
(defgeneric $ndim (tensor)
  (:documentation "Returns the number of dimensions of tensor."))
(defgeneric $stride (tensor &optional dimension)
  (:documentation "Returns stride of the tensor along dimension."))

(defgeneric $clone (tensor)
  (:documentation "Returns a new cloned tensor."))
(defgeneric $contiguous (tensor)
  (:documentation "Returns a new contiguously allocated tensor if it's not."))
(defgeneric $contiguousp (tensor)
  (:documentation "Returns whether tensor is contiguously allocated."))

(defgeneric $select (tensor dimension slice-index)
  (:documentation "Returns a new tensor slice at slice-index along dimension."))
(defgeneric $select! (tensor dimension slice-index)
  (:documentation "Returns a tensor slice at slice-index along dimension"))
(defgeneric $narrow (tensor dimension first-index size)
  (:documentation "Returns a new tensor that is a narrowed."))
(defgeneric $narrow! (tensor dimension first-index size)
  (:documentation "Returns a tensor that is a narrowed."))

(defgeneric $transpose (tensor &optional dimension0 dimension1)
  (:documentation "Returns a new transposed tensor between dimensions."))
(defgeneric $transpose! (tensor &optional dimension0 dimension1)
  (:documentation "Returns a transposed tensor between dimensions."))

(defgeneric $unfold (tensor dimension size step)
  (:documentation "Returns a new tensor with all slices of the given size by step."))
(defgeneric $unfold! (tensor dimension size step)
  (:documentation "Returns a tensor with all slices of the given size by step."))

(defgeneric $view (tensor &rest sizes)
  (:documentation "Returns a new tensor which has different dimension of the same storage."))

(defgeneric $expand (tensor &rest sizes)
  (:documentation "Returns a new tensor whose singleton dimension can be expanded."))
(defgeneric $expand! (tensor &rest sizes)
  (:documentation "Returns a tensor whose singleton dimension can be expanded."))

(defgeneric $set (tensor source)
  (:documentation "Sets the storage contents of source to tensor."))
(defgeneric $setp (tensor source)
  (:documentation "Checks whether tensor is set with source."))
