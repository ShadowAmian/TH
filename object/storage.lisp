(declaim (optimize (speed 3) (debug 1) (safety 0)))

(in-package :th)

(defclass storage (th.object) ())
(defclass storage.integral (storage) ())
(defclass storage.fractional (storage) ())

(defclass storage.byte (storage.integral) ())
(defclass storage.char (storage.integral) ())
(defclass storage.short (storage.integral) ())
(defclass storage.int (storage.integral) ())
(defclass storage.long (storage.integral) ())
(defclass storage.float (storage.fractional) ())
(defclass storage.double (storage.fractional) ())

(defclass pointer (th.object) ())
(defclass pointer.integral (pointer) ())
(defclass pointer.fractional (pointer) ())

(defclass pointer.byte (pointer.integral) ())
(defclass pointer.char (pointer.integral) ())
(defclass pointer.short (pointer.integral) ())
(defclass pointer.int (pointer.integral) ())
(defclass pointer.long (pointer.integral) ())
(defclass pointer.float (pointer.fractional) ())
(defclass pointer.double (pointer.fractional) ())

(defgeneric allocate-storage (storage &optional size))

(defun make-storage (cls &optional size-or-contents)
  (let ((storage (make-instance cls)))
    (cond ((or (listp size-or-contents) ($tensorp size-or-contents))
           (let ((sz ($count size-or-contents))
                 (contents size-or-contents))
             (allocate-storage storage sz)
             (loop :for i :from 0 :below ($count contents)
                   :do (setf ($ storage i) ($ contents i)))))
          (t (allocate-storage storage size-or-contents)))
    storage))

(defun storage.byte (&optional size-or-contents) (make-storage 'storage.byte size-or-contents))
(defun storage.char (&optional size-or-contents) (make-storage 'storage.char size-or-contents))
(defun storage.short (&optional size-or-contents) (make-storage 'storage.short size-or-contents))
(defun storage.int (&optional size-or-contents) (make-storage 'storage.int size-or-contents))
(defun storage.long (&optional size-or-contents) (make-storage 'storage.long size-or-contents))
(defun storage.float (&optional size-or-contents) (make-storage 'storage.float size-or-contents))
(defun storage.double (&optional size-or-contents) (make-storage 'storage.double size-or-contents))
