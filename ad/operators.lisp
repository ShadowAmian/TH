(in-package :th)

(defmethod $zero ((x tape)) (tape ($zero ($data x)) ($gradientp x)))
(defmethod $one ((x tape)) (tape ($one ($data x)) ($gradientp x)))
(defmethod $fill ((x tape) value) (tape ($fill ($data x) value) ($gradientp x)))

(defmethod $zero! ((x tape))
  ($zero! ($data x))
  x)
(defmethod $one! ((x tape))
  ($one! ($data x))
  x)
(defmethod $fill! ((x tape) value)
  ($fill! ($data x) value)
  x)

(defun broadcast-backprop (node gradient)
  (setf ($gradient node) gradient)
  (setf ($children node) (when ($children node)
                           (let ((c ($c0 node)))
                             (list (if ($gradientp c)
                                       ($bp! c ($dot ($one ($data node)) gradient))
                                       c)))))
  node)

(defmethod $broadcast ((c tape) (m tape))
  (let ((result (tape ($mul! ($one ($data m)) ($data c)))))
    (setf ($children result) (list c))
    (setf ($gradientp result) ($gradientp c))
    (setf ($bpfn result) #'broadcast-backprop)
    result))

(defun add-backprop (node gradient)
  (setf ($gradient node) gradient)
  (setf ($children node)
        (mapcar (lambda (c)
                  (if ($gradientp c)
                      ($bp! c gradient)
                      c))
                ($children node)))
  node)

(defmethod $add ((a tape) (b tape))
  (let ((result (tape ($add ($data a) ($data b)))))
    (setf ($children result) (list a b))
    (setf ($gradientp result) (or ($gradientp a) ($gradientp b)))
    (setf ($bpfn result) #'add-backprop)
    result))

(defun sub-backprop (node gradient)
  (setf ($gradient node) gradient)
  (setf ($children node) (when ($children node)
                           (let ((a ($c0 node))
                                 (b ($c1 node)))
                             (list (if ($gradientp a) ($bp! a gradient) a)
                                   (if ($gradientp b) ($bp! b ($neg gradient)) b)))))
  node)

(defmethod $sub ((a tape) (b tape))
  (let ((result (tape ($sub ($data a) ($data b)))))
    (setf ($children result) (list a b))
    (setf ($gradientp result) (or ($gradientp a) ($gradientp b)))
    (setf ($bpfn result) #'sub-backprop)
    result))

(defun neg-backprop (node gradient)
  (setf ($gradient node) gradient)
  (setf ($children node) (when ($children node)
                           (let ((a ($c0 node)))
                             (list (if ($gradientp a) ($bp! a ($neg gradient)) a)))))
  node)

(defmethod $neg ((a tape))
  (let ((result (tape ($neg ($data a)))))
    (setf ($children result) (list a))
    (setf ($gradientp result) ($gradientp a))
    (setf ($bpfn result) #'neg-backprop)
    result))

(defun dot-backprop (node gradient)
  (setf ($gradient node) gradient)
  (setf ($children node) (when ($children node)
                           (let ((a ($c0 node))
                                 (b ($c1 node)))
                             (list (if ($gradientp a) ($bp! a ($* ($data b) gradient)) a)
                                   (if ($gradientp b) ($bp! b ($* ($data a) gradient)) b)))))
  node)

(defmethod $dot ((a tape) (b tape))
  (let ((result (tape ($dot ($data a) ($data b)))))
    (setf ($children result) (list a b))
    (setf ($gradientp result) (or ($gradientp a) ($gradientp b)))
    (setf ($bpfn result) #'dot-backprop)
    result))

(defun mv-backprop (node gradient)
  (setf ($gradient node) gradient)
  (setf ($children node) (when ($children node)
                           (let ((m ($c0 node))
                                 (v ($c1 node)))
                             (list (if ($gradientp m) ($bp! m ($vv gradient ($data v))) m)
                                   (if ($gradientp v)
                                       ($bp! v ($@ ($transpose ($data m)) gradient))
                                       v)))))
  node)

(defmethod $mv ((m tape) (v tape))
  (let ((result (tape ($mv ($data m) ($data v)))))
    (setf ($children result) (list m v))
    (setf ($gradientp result) (or ($gradientp m) ($gradientp v)))
    (setf ($bpfn result) #'mv-backprop)
    result))

(defun mm-backprop (node gradient)
  (setf ($gradient node) gradient)
  (setf ($children node) (when ($children node)
                           (let ((a ($c0 node))
                                 (b ($c1 node)))
                             (list (if ($gradientp a)
                                       ($bp! a ($@ gradient ($transpose ($data b))))
                                       a)
                                   (if ($gradientp b)
                                       ($bp! b ($@ ($transpose ($data a)) gradient))
                                       b)))))
  node)

(defmethod $mm ((a tape) (b tape))
  (let ((result (tape ($mm ($data a) ($data b)))))
    (setf ($children result) (list a b))
    (setf ($gradientp result) (or ($gradientp a) ($gradientp b)))
    (setf ($bpfn result) #'mm-backprop)
    result))

(defun mul-backprop (node gradient)
  (setf ($gradient node) gradient)
  (setf ($children node) (when ($children node)
                           (let ((a ($c0 node))
                                 (b ($c1 node)))
                             (list (if ($gradientp a)
                                       ($bp! a ($* ($data b) gradient))
                                       a)
                                   (if ($gradientp b)
                                       ($bp! b ($* ($data a) gradient))
                                       b)))))
  node)

(defmethod $mul ((a tape) (b tape))
  (let ((result (tape ($mul ($data a) ($data b)))))
    (setf ($children result) (list a b))
    (setf ($gradientp result) (or ($gradientp a) ($gradientp b)))
    (setf ($bpfn result) #'mul-backprop)
    result))

(defmethod $ndim ((x tape)) ($ndim ($data x)))

(defmethod $mml ((x tape) (y tape))
  (cond ((and (eq 1 ($ndim x)) (eq 1 ($ndim y))) ($dot x y))
        ((and (eq 2 ($ndim x)) (eq 1 ($ndim y))) ($mv x y))
        ((and (eq 2 ($ndim x)) (eq 2 ($ndim y))) ($mm x y))))

(defun div-backprop (node gradient)
  (setf ($gradient node) gradient)
  (setf ($children node) (when ($children node)
                           (let ((a ($c0 node))
                                 (b ($c1 node)))
                             (list (if ($gradientp a)
                                       ($bp! a ($div gradient ($data b)))
                                       a)
                                   (if ($gradientp b)
                                       ($bp! b ($neg! ($div ($* ($data a) gradient)
                                                            ($expt ($data b) 2))))
                                       b)))))
  node)

(defmethod $div ((a tape) (b tape))
  (let ((result (tape ($div ($data a) ($data b)))))
    (setf ($children result) (list a b))
    (setf ($gradientp result) (or ($gradientp a) ($gradientp b)))
    (setf ($bpfn result) #'div-backprop)
    result))

(defun expt-backprop (node gradient)
  (setf ($gradient node) gradient)
  (setf ($children node) (when ($children node)
                           (let ((a ($c0 node))
                                 (b ($c1 node)))
                             (list (if ($gradientp a)
                                       ($bp! a ($mul! ($mul gradient ($data b))
                                                      ($expt ($data a) ($- ($data b) 1))))
                                       a)
                                   (if ($gradientp b)
                                       ($bp! b ($mul! ($mul! ($log ($data a))
                                                             ($expt ($data a) ($data b)))
                                                      gradient))
                                       b)))))
  node)

(defmethod $expt ((a tape) (b tape))
  (let ((result (tape ($expt ($data a) ($data b)))))
    (setf ($children result) (list a b))
    (setf ($gradientp result) (or ($gradientp a) ($gradientp b)))
    (setf ($bpfn result) #'expt-backprop)
    result))

(defun vv-backprop (node gradient)
  (setf ($gradient node) gradient)
  (setf ($children node) (when ($children node)
                           (let ((a ($c0 node))
                                 (b ($c1 node)))
                             (list (if ($gradientp a)
                                       ($bp! a ($mv gradient ($data b)))
                                       a)
                                   (if ($gradientp b)
                                       ($bp! b ($mv ($transpose gradient) ($data a)))
                                       b)))))
  node)

(defmethod $vv ((a tape) (b tape))
  (let ((result (tape ($vv ($data a) ($data b)))))
    (setf ($children result) (list a b))
    (setf ($gradientp result) (or ($gradientp a) ($gradientp b)))
    (setf ($bpfn result) #'vv-backprop)
    result))

(defun inverse-backprop (node gradient)
  (setf ($gradient node) gradient)
  (setf ($children node) (when ($children node)
                           (let ((a ($c0 node)))
                             (list (if ($gradientp a)
                                       (let ((tnode ($transpose ($data node))))
                                         ($bp! a ($neg ($mm ($mm tnode gradient) tnode)))
                                         a))))))
  node)

(defmethod $inverse ((a tape))
  (let ((result (tape ($inverse ($data a)))))
    (setf ($children result) (list a))
    (setf ($gradientp result) ($gradientp a))
    (setf ($bpfn result) #'inverse-backprop)
    result))

(defun view-backprop (node gradient)
  (setf ($gradient node) gradient)
  (setf ($children node) (when ($children node)
                           (let ((a ($c0 node)))
                             (list (if ($gradientp a)
                                       ($bp! a ($view gradient ($data a)))
                                       a)))))
  node)

(defmethod $view ((a tape) &rest sizes)
  (let ((result (tape (apply #'$view ($data a) sizes))))
    (setf ($children result) (list a))
    (setf ($gradientp result) ($gradientp a))
    (setf ($bpfn result) #'view-backprop)
    result))

(defmethod $size ((tape tape) &optional dimension) ($size ($data tape) dimension))
(defmethod $ndim ((tape tape)) ($ndim ($data tape)))

(defun expand-backprop (node gradient)
  (setf ($gradient node) gradient)
  (setf ($children node) (when ($children node)
                           (let ((a ($c0 node)))
                             (list (if ($gradientp a)
                                       (let* ((adata ($data a))
                                              (asize ($size adata))
                                              (out gradient))
                                         (loop :for dim :from 0 :below ($count asize)
                                               :for sz = ($ asize dim)
                                               :do (when (eq sz 1)
                                                     (setf out ($sum out dim))))
                                         ($bp! a out))
                                       a)))))
  node)

(defmethod $expand ((a tape) size)
  (let ((result (tape ($expand ($data a) size))))
    (setf ($children result) (list a))
    (setf ($gradientp result) ($gradientp a))
    (setf ($bpfn result) #'expand-backprop)
    result))

(defgeneric $bce (a b))

(defmethod $bce ((a tape) (b tape))
  ($dot ($add ($mul ($log a) b)
              ($mul ($log ($sub ($one a) a))
                    ($sub ($one b) b)))
        ($neg ($one a))))


(defun dsigmoid (s) ($* s ($sub 1 s)))

(defun sigmoid-backprop (node gradient)
  (setf ($gradient node) gradient)
  (setf ($children node) (when ($children node)
                           (let ((x ($c0 node)))
                             (list (if ($gradientp x)
                                       ($bp! x ($* (dsigmoid ($data node)) gradient))
                                       x)))))
  node)

(defmethod $sigmoid ((x tape))
  (let ((result (tape ($sigmoid ($data x)))))
    (setf ($children result) (list x))
    (setf ($gradientp result) ($gradientp x))
    (setf ($bpfn result) #'sigmoid-backprop)
    result))

(defun exp-backprop (node gradient)
  (setf ($gradient node) gradient)
  (setf ($children node) (when ($children node)
                           (let ((x ($c0 node)))
                             (list (if ($gradientp x)
                                       ($bp! x ($mul ($data node) gradient))
                                       x)))))
  node)

(defmethod $exp ((x tape))
  (let ((result (tape ($exp ($data x)))))
    (setf ($children result) (list x))
    (setf ($gradientp result) ($gradientp x))
    (setf ($bpfn result) #'exp-backprop)
    result))

(defun dlog (x) ($div 1.0 x))

(defun log-backprop (node gradient)
  (setf ($gradient node) gradient)
  (setf ($children node) (when ($children node)
                           (let ((x ($c0 node)))
                             (list (if ($gradientp x)
                                       ($bp! x ($* (dlog ($data x)) gradient))
                                       x)))))
  node)

(defmethod $log ((x tape))
  (let ((result (tape ($log ($data x)))))
    (setf ($children result) (list x))
    (setf ($gradientp result) ($gradientp x))
    (setf ($bpfn result) #'log-backprop)
    result))

(defun sinh-backprop (node gradient)
  (setf ($gradient node) gradient)
  (setf ($children node) (when ($children node)
                           (let ((x ($c0 node)))
                             (list (if ($gradientp x)
                                       ($bp! x ($mul ($cosh ($data x)) gradient))
                                       x)))))
  node)

(defmethod $sinh ((x tape))
  (let ((result (tape ($sinh ($data x)))))
    (setf ($children result) (list x))
    (setf ($gradientp result) ($gradientp x))
    (setf ($bpfn result) #'sinh-backprop)
    result))

(defun cosh-backprop (node gradient)
  (setf ($gradient node) gradient)
  (setf ($children node) (when ($children node)
                           (let ((x ($c0 node)))
                             (list (if ($gradientp x)
                                       ($bp! x ($mul ($sinh ($data x)) gradient))
                                       x)))))
  node)

(defmethod $cosh ((x tape))
  (let ((result (tape ($cosh ($data x)))))
    (setf ($children result) (list x))
    (setf ($gradientp result) ($gradientp x))
    (setf ($bpfn result) #'cosh-backprop)
    result))

(defun dtanh (s) ($sub 1 ($* s s)))

(defun tanh-backprop (node gradient)
  (setf ($gradient node) gradient)
  (setf ($children node) (when ($children node)
                           (let ((x ($c0 node)))
                             (list (if ($gradientp x)
                                       ($bp! x ($* (dtanh ($data node)) gradient))
                                       x)))))
  node)

(defmethod $tanh ((x tape))
  (let ((result (tape ($tanh ($data x)))))
    (setf ($children result) (list x))
    (setf ($gradientp result) ($gradientp x))
    (setf ($bpfn result) #'tanh-backprop)
    result))

(defun sqrt-backprop (node gradient)
  (setf ($gradient node) gradient)
  (setf ($children node) (when ($children node)
                           (let ((x ($c0 node)))
                             (list (if ($gradientp x)
                                       ($bp! x ($mul! ($mul gradient 0.5)
                                                      ($expt ($data x) -0.5)))
                                       x)))))
  node)

(defmethod $sqrt ((x tape))
  (let ((result (tape ($sqrt ($data x)))))
    (setf ($children result) (list x))
    (setf ($gradientp result) ($gradientp x))
    (setf ($bpfn result) #'sqrt-backprop)
    result))

(defun sin-backprop (node gradient)
  (setf ($gradient node) gradient)
  (setf ($children node) (when ($children node)
                           (let ((x ($c0 node)))
                             (list (if ($gradientp x)
                                       ($bp! x ($mul! ($cos ($data x)) gradient))
                                       x)))))
  node)

(defmethod $sin ((x tape))
  (let ((result (tape ($sin ($data x)))))
    (setf ($children result) (list x))
    (setf ($gradientp result) ($gradientp x))
    (setf ($bpfn result) #'sin-backprop)
    result))

(defun cos-backprop (node gradient)
  (setf ($gradient node) gradient)
  (setf ($children node) (when ($children node)
                           (let ((x ($c0 node)))
                             (list (if ($gradientp x)
                                       ($bp! x ($mul! ($neg ($sin ($data x))) gradient))
                                       x)))))
  node)

(defmethod $cos ((x tape))
  (let ((result (tape ($cos ($data x)))))
    (setf ($children result) (list x))
    (setf ($gradientp result) ($gradientp x))
    (setf ($bpfn result) #'cos-backprop)
    result))

(defun tan-backprop (node gradient)
  (setf ($gradient node) gradient)
  (setf ($children node) (when ($children node)
                           (let ((x ($c0 node)))
                             (list (if ($gradientp x)
                                       ($bp! x ($mul! ($expt ($cos ($data x)) 2.0) gradient))
                                       x)))))
  node)

(defmethod $tan ((x tape))
  (let ((result (tape ($tan ($data x)))))
    (setf ($children result) (list x))
    (setf ($gradientp result) ($gradientp x))
    (setf ($bpfn result) #'tan-backprop)
    result))
