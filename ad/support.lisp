(declaim (optimize (speed 3) (debug 1) (safety 0)))

(in-package :th)

(defgeneric $relu (x))
(defgeneric $softmax (x))
(defgeneric $bnorm (x gamma beta mean sd &optional trainp momentum eps))
(defgeneric $dropout (x &optional trainp p))

(defgeneric $bce (a b))
(defgeneric $mse (a b))
(defgeneric $cee (a b))

(defmethod $bce ((a tensor) (b tensor))
  (let ((output ($empty a)))
    (nn-bce-criterion-update-output a b output t nil)
    output))

(defun dbce (input target gradient)
  (let ((dinput ($empty input)))
    (nn-bce-criterion-update-grad-input input target gradient dinput t nil)
    dinput))

(defun bce-backprop (node gradient)
  (setgradient node gradient)
  (setf ($children node) (when ($children node)
                           (let ((a ($c0 node))
                                 (b ($c1 node)))
                             (list (if ($gradientp a)
                                       ($bp! a (dbce ($data a) ($data b) gradient))
                                       a)
                                   (if ($gradientp b)
                                       ($bp! b (dbce ($data b) ($data a) gradient))
                                       b)))))
  node)

(defmethod $bce ((a node) (b node))
  (let ((result (node ($bce ($data a) ($data b)))))
    (setf ($name result) "BCE")
    (setf ($children result) (list a b))
    (setf ($gradientp result) (or ($gradientp a) ($gradientp b)))
    (setf ($bpfn result) #'bce-backprop)
    result))

(defmethod $mse ((a tensor) (b tensor))
  (let ((output ($empty a)))
    (nn-mse-criterion-update-output a b output t)
    output))

(defun dmse (input target gradient)
  (let ((dinput ($empty input)))
    (nn-mse-criterion-update-grad-input input target gradient dinput t)
    dinput))

(defun mse-backprop (node gradient)
  (setgradient node gradient)
  (setf ($children node) (when ($children node)
                           (let ((a ($c0 node))
                                 (b ($c1 node)))
                             (list (if ($gradientp a)
                                       ($bp! a (dmse ($data a) ($data b) gradient))
                                       a)
                                   (if ($gradientp b)
                                       ($bp! b (dmse ($data b) ($data a) gradient))
                                       b)))))
  node)

(defmethod $mse ((a node) (b node))
  (let ((result (node ($mse ($data a) ($data b)))))
    (setf ($name result) "MSE")
    (setf ($children result) (list a b))
    (setf ($gradientp result) (or ($gradientp a) ($gradientp b)))
    (setf ($bpfn result) #'mse-backprop)
    result))

(defmethod $cee ((a tensor) (b tensor))
  (let ((tiny 1D-7)
        (nbatch (if (eq 1 ($ndim a)) 1 ($size a 0))))
    (/ (- ($sum ($mul! ($log ($add a tiny)) b))) nbatch)))

(defmethod $cee ((a node) (b node))
  (let ((tiny ($broadcast ($constant 1D-7) a))
        (nbatch ($constant (if (eq 1 ($ndim a)) 1 ($size a 0)))))
    ($div ($neg ($sum ($mul ($log ($add a tiny)) b))) nbatch)))

(defmethod $relu ((x number)) (max 0 x))

(defmethod $relu ((x tensor))
  (let ((output ($empty x)))
    (nn-threshold-update-output x output 0 0 nil)
    output))

(defun drelu (input gradient)
  (let ((dinput ($empty input)))
    (nn-threshold-update-grad-input input gradient dinput 0 0 nil)
    dinput))

(defun relu-backprop (node gradient)
  (setgradient node gradient)
  (setf ($children node) (when ($children node)
                           (let ((x ($c0 node)))
                             (list (if ($gradientp x)
                                       ($bp! x (drelu ($data x) gradient))
                                       x)))))
  node)

(defmethod $relu ((x node))
  (let ((result (node ($relu ($data x)))))
    (setf ($name result) "RELU")
    (setf ($children result) (list x))
    (setf ($gradientp result) ($gradientp x))
    (setf ($bpfn result) #'relu-backprop)
    result))

(defmethod $softmax ((x tensor))
  (let ((output ($empty x)))
    (nn-softmax-update-output x output)
    output))

(defun dsoftmax (input output gradient)
  (let ((dinput ($empty input)))
    (nn-softmax-update-grad-input input gradient dinput output)
    dinput))

(defun softmax-backprop (node gradient)
  (setgradient node gradient)
  (setf ($children node) (when ($children node)
                           (let ((x ($c0 node)))
                             (list (if ($gradientp x)
                                       ($bp! x (dsoftmax ($data x) ($data node) gradient))
                                       x)))))
  node)

(defmethod $softmax ((x node))
  (let ((result (node ($softmax ($data x)))))
    (setf ($name result) "SOFTMAX")
    (setf ($children result) (list x))
    (setf ($gradientp result) ($gradientp x))
    (setf ($bpfn result) #'softmax-backprop)
    result))

(defun runstat (x mean var trainp momentum)
  (let* ((x (if (eq 1 ($ndim x))
                (apply #'$reshape x (cons 1 ($size x)))
                x))
         (nx ($size x 0)))
    (when (and trainp (not (eq nx 1)))
      (let* ((mx ($mean x 0))
             (vx ($var x 0)))
        ($mul! mx momentum)
        ($mul! vx momentum)
        ($mul! mean (- 1 momentum))
        ($mul! var (- 1 momentum))
        ($add! mean mx)
        ($add! var vx)))))

(defmethod $bnorm ((x tensor) (gamma tensor) (beta tensor) (mean tensor) (var tensor)
                   &optional (trainp t) (momentum 0.1) (eps 1E-7))
  (runstat x mean var trainp momentum)
  (let* ((x (apply #'$reshape x (cons 1 ($size x))))
         (os (ones ($size x 0)))
         (zx ($div! ($sub x ($vv os mean)) ($sqrt! ($add var eps)))))
    ($add! ($mul! zx ($vv os gamma)) ($vv os beta))))

(defmethod $bnorm ((x tensor) (gamma null) (beta null) (mean tensor) (var tensor)
                   &optional (trainp t) (momentum 0.1) (eps 1E-7))
  (runstat x mean var trainp momentum)
  (let* ((x (apply #'$reshape x (cons 1 ($size x))))
         (os (ones ($size x 0)))
         (zx ($div! ($sub x ($vv os mean)) ($sqrt! ($add var eps)))))
    zx))

(defmethod $bnorm ((x node) (gamma node) (beta node) (mean node) (var node)
                   &optional (trainp t) (momentum 0.1) (eps 1E-7))
  (runstat ($data x) ($data mean) ($data var) trainp momentum)
  (let* ((x (if (eq 1 ($ndim x))
                ($vv (ones 1) x)
                x))
         (os ($constant (ones ($size x 0))))
         (zx ($div ($sub x ($vv os mean)) ($vv os ($sqrt ($add var ($constant eps)))))))
    ($add ($mul zx ($vv os gamma)) ($vv os beta))))

(defmethod $bnorm ((x node) (gamma null) (beta null) (mean node) (var node)
                   &optional (trainp t) (momentum 0.1) (eps 1E-7))
  (runstat ($data x) ($data mean) ($data var) trainp momentum)
  (let* ((x (if (eq 1 ($ndim x))
                ($vv (ones 1) x)
                x))
         (os ($constant (ones ($size x 0))))
         (zx ($div ($sub x ($vv os mean)) ($vv os ($sqrt ($add var ($constant eps)))))))
    zx))

(defmethod $dropout ((x tensor) &optional (trainp t) (p 0.1))
  (if trainp
      (let ((mask ($gt (apply #'rnd ($size x)) p)))
        ($mul! (tensor mask) x))
      ($mul x (- 1.0 p))))

(defmethod $dropout ((x node) &optional (trainp t) (p 0.1))
  (if trainp
      (let ((mask ($gt (apply #'rnd ($size x)) p)))
        ($mul ($constant (tensor mask)) x))
      ($mul x ($broadcast ($constant (- 1 p)) x))))
