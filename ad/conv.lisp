(in-package :th)

(defun conv2-backprop (node gradient type)
  (setf ($gradient node) gradient)
  (setf ($children node) (when ($children node)
                           (let ((x ($c0 node))
                                 (k ($c1 node)))
                             (list (if ($gradientp x)
                                       ($bp! x ($xcorr2 gradient ($data k) :full))
                                       x)
                                   (if ($gradientp k)
                                       ($bp! k ($conv2 ($data x) gradient type))
                                       k)))))
  node)

(defmethod $conv2 ((x node) (k node) &optional (type :valid))
  (let ((result (node ($conv2 ($data x) ($data k) type))))
    (setf ($children result) (list x k))
    (setf ($gradientp result) (or ($gradientp x) ($gradientp k)))
    (setf ($bpfn result) (lambda (node gradient) (conv2-backprop node gradient type)))
    result))

(defun xcorr2-backprop (node gradient type)
  (setf ($gradient node) gradient)
  (setf ($children node) (when ($children node)
                           (let ((x ($c0 node))
                                 (k ($c1 node)))
                             (list (if ($gradientp x)
                                       ($bp! x ($conv2 gradient ($data k) :full))
                                       x)
                                   (if ($gradientp k)
                                       ($bp! k ($xcorr2 ($data x) gradient type))
                                       k)))))
  node)

(defmethod $xcorr2 ((x node) (k node) &optional (type :valid))
  (let ((result (node ($xcorr2 ($data x) ($data k) type))))
    (setf ($children result) (list x k))
    (setf ($gradientp result) (or ($gradientp x) ($gradientp k)))
    (setf ($bpfn result) (lambda (node gradient) (xcorr2-backprop node gradient type)))
    result))
