(declaim (optimize (speed 3) (debug 1) (safety 0)))

(in-package :th)

(defgeneric $bce (a b))
(defgeneric $mse (a b))
(defgeneric $cee (a b))
(defgeneric $cnll (a b))
(defgeneric $cec (a b))

(defmethod $bce ((a tensor) (b tensor))
  (let ((output ($resize! ($empty a) '(1))))
    (nn-bce-criterion-update-output a b output t nil)
    ($ output 0)))
(defun dbce (input target)
  (let ((dinput ($empty input)))
    (nn-bce-criterion-update-grad-input input target dinput t nil)
    dinput))
(defmethod $bce ((a parameter) (b parameter))
  ($operation ($bce ($data a) ($data b))
              :creators (list a b)
              :name :bce
              :bfn (lambda (self gradient ad bd)
                     (declare (ignore gradient))
                     ($bp! a (dbce ad bd) self)
                     ($bp! b (dbce bd ad) self))))
(defmethod $bce ((a tensor) (b parameter))
  ($operation ($bce a ($data b))
              :creators (list b)
              :name :bce
              :bfn (lambda (self gradient ad bd)
                     (declare (ignore gradient))
                     ($bp! b (dbce bd ad) self))))
(defmethod $bce ((a parameter) (b tensor))
  ($operation ($bce ($data a) b)
              :creators (list a)
              :name :bce
              :bfn (lambda (self gradient ad bd)
                     (declare (ignore gradient))
                     ($bp! a (dbce ad bd) self))))

(defmethod $mse ((a tensor) (b tensor))
  (let ((output ($empty a)))
    (nn-mse-criterion-update-output a b output t)
    output))
(defun dmse (input target gradient)
  (let ((dinput ($empty input)))
    (nn-mse-criterion-update-grad-input input target gradient dinput t)
    dinput))
(defmethod $mse ((a parameter) (b parameter))
  ($operation ($mse ($data a) ($data b))
              :creators (list a b)
              :name :mse
              :bfn (lambda (self gradient ad bd)
                     ($bp! a (dmse ad bd gradient) self)
                     ($bp! b (dmse bd ad gradient) self))))
(defmethod $mse ((a tensor) (b parameter))
  ($operation ($mse a ($data b))
              :creators (list b)
              :name :mse
              :bfn (lambda (self gradient ad bd)
                     ($bp! b (dmse bd ad gradient) self))))
(defmethod $mse ((a parameter) (b tensor))
  ($operation ($mse ($data a) b)
              :creators (list a)
              :name :mse
              :bfn (lambda (self gradient ad bd)
                     ($bp! a (dmse ad bd gradient) self))))

(defmethod $cee ((a tensor) (b tensor))
  (let ((tiny 1D-7)
        (nbatch (if (eq 1 ($ndim a)) 1 ($size a 0))))
    (/ (- ($sum ($mul! ($log ($add a tiny)) b))) nbatch)))
(defmethod $cee ((a parameter) (b parameter))
  (let ((tiny 1D-7)
        (nbatch (if (eq 1 ($ndim a)) 1 ($size a 0))))
    ($div ($neg ($sum ($mul ($log ($add a tiny)) b))) nbatch)))
(defmethod $cee ((a tensor) (b parameter))
  (let ((tiny 1D-7)
        (nbatch (if (eq 1 ($ndim a)) 1 ($size a 0))))
    ($div ($neg ($sum ($mul ($log ($add a tiny)) b))) nbatch)))
(defmethod $cee ((a parameter) (b tensor))
  (let ((tiny 1D-7)
        (nbatch (if (eq 1 ($ndim a)) 1 ($size a 0))))
    ($div ($neg ($sum ($mul ($log ($add a tiny)) b))) nbatch)))

;; b should be 1-d
(defmethod $cnll ((a tensor) (b tensor))
  (let ((result (zeros 1))
        (tw (ones 1)))
    (nn-class-nll-criterion-update-output a (tensor.long ($reshape b ($count b)))
                                          result t nil tw -100)
    ($ result 0)))
(defun dcnll (input target)
  (let ((dinput ($zero input)))
    (nn-class-nll-criterion-update-grad-input input (tensor.long ($reshape target ($count target)))
                                              dinput t nil
                                              (ones 1) -100)
    dinput))
(defmethod $cnll ((a parameter) (b tensor))
  ($operation ($cnll ($data a) b)
              :creators (list a)
              :name :cnll
              :bfn (lambda (self gradient ad)
                     (declare (ignore gradient))
                     ($bp! a (dcnll ad b) self))))

(defmethod $cec ((a tensor) (b tensor)) ($cnll ($lsoftmax a) b))
(defmethod $cec ((a parameter) (b tensor)) ($cnll ($lsoftmax a) b))
