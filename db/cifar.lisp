(declaim (optimize (speed 3) (debug 0) (satefy 0)))

(defpackage :th.db.cifar
  (:use #:common-lisp
        #:mu
        #:th)
  (:export #:read-cifar-10-data
           #:read-cifar-100-data))

(in-package :th.db.cifar)

(defparameter +cifar-location+ ($concat (namestring (user-homedir-pathname)) ".th/datasets/cifar"))
(defparameter +record-length+ (+ 1 3072))

(defun read-nbyte (n str)
  (let ((ret 0))
    (loop :repeat n :do (setf ret (logior (ash ret 8) (read-byte str))))
    ret))

(defun read-single-image-into (m l idx s &optional (normalize nil))
  (let ((label (read-byte s)))
    (setf ($ l idx) label)
    (dotimes (i (1- +record-length+))
      (let* ((v (read-byte s))
             (rv (if normalize (/ v 255.0) (* 1.0 v))))
        (setf ($ m idx i) rv)))))

(defun original-read-cifar-10-train-images (&key (normalize nil))
  (let* ((n 10000)
         (l (zeros (* 5 n)))
         (m (zeros (* 5 n) (* 3 1024))))
    (with-open-file (str (strcat +cifar-location+ "/10/data_batch_1.bin")
                         :element-type '(unsigned-byte 8))
      (dotimes (i n)
        (read-single-image-into m l i str normalize)))
    (with-open-file (str (strcat +cifar-location+ "/10/data_batch_2.bin")
                         :element-type '(unsigned-byte 8))
      (dotimes (i n)
        (read-single-image-into m l (+ i n) str normalize)))
    (with-open-file (str (strcat +cifar-location+ "/10/data_batch_3.bin")
                         :element-type '(unsigned-byte 8))
      (dotimes (i n)
        (read-single-image-into m l (+ i (* 2 n)) str normalize)))
    (with-open-file (str (strcat +cifar-location+ "/10/data_batch_4.bin")
                         :element-type '(unsigned-byte 8))
      (dotimes (i n)
        (read-single-image-into m l (+ i (* 3 n) i) str normalize)))
    (with-open-file (str (strcat +cifar-location+ "/10/data_batch_5.bin")
                         :element-type '(unsigned-byte 8))
      (dotimes (i n)
        (read-single-image-into m l (+ i (* 4 n)) str normalize)))
    (list l m)))

(defun original-read-cifar-10-test-images (&key (normalize nil))
  (let* ((n 10000)
         (l1 (zeros n))
         (l2 (zeros n))
         (m (zeros n (* 3 1024))))
    (with-open-file (str (strcat +cifar-location+ "/10/test_batch.bin")
                         :element-type '(unsigned-byte 8))
      (dotimes (i n)
        (read-single-image-into m l i str normalize)))
    (list l m)))

(defun generate-cifar-10-data (&key (loc +cifar-location+))
  (let ((train (original-read-cifar-10-train-images))
        (test (original-read-cifar-10-test-images)))
    (let ((f (file.disk (strcat loc "/10/cifar-10-train-images.tensor") "w")))
      (setf ($fbinaryp f) t)
      ($fwrite (tensor.byte (cadr train)) f)
      ($fclose f))
    (let ((f (file.disk (strcat loc "/10/cifar-10-train-labels.tensor") "w")))
      (setf ($fbinaryp f) t)
      ($fwrite (tensor.byte (car train)) f)
      ($fclose f))
    (let ((f (file.disk (strcat loc "/10/cifar-10-test-images.tensor") "w")))
      (setf ($fbinaryp f) t)
      ($fwrite (tensor.byte (cadr test)) f)
      ($fclose f))
    (let ((f (file.disk (strcat loc "/10/cifar-10-test-labels.tensor") "w")))
      (setf ($fbinaryp f) t)
      ($fwrite (tensor.byte (car test)) f)
      ($fclose f))))

(defun read-single-image-into2 (m l1 l2 idx s &optional (normalize nil))
  (let ((label1 (read-byte s))
        (label2 (read-byte s)))
    (setf ($ l1 idx) label1)
    (setf ($ l2 idx) label2)
    (dotimes (i (1- +record-length+))
      (let* ((v (read-byte s))
             (rv (if normalize (/ v 255.0) (* 1.0 v))))
        (setf ($ m idx i) rv)))))

(defun original-read-cifar-100-train-images (&key (normalize nil))
  (let* ((n 50000)
         (l1 (zeros n))
         (l2 (zeros n))
         (m (zeros n (* 3 1024))))
    (with-open-file (str (strcat +cifar-location+ "/100/train.bin")
                         :element-type '(unsigned-byte 8))
      (dotimes (i n)
        (read-single-image-into2 m l1 l2 i str normalize)))
    (list l1 l2 m)))

(defun original-read-cifar-100-test-images (&key (normalize nil))
  (let* ((n 10000)
         (l1 (zeros n))
         (l2 (zeros n))
         (m (zeros n (* 3 1024))))
    (with-open-file (str (strcat +cifar-location+ "/100/test.bin")
                         :element-type '(unsigned-byte 8))
      (dotimes (i n)
        (read-single-image-into2 m l1 l2 i str normalize)))
    (list l1 l2 m)))

(defun generate-cifar-100-data (&key (loc +cifar-location+))
  (let ((train (original-read-cifar-100-train-images))
        (test (original-read-cifar-100-test-images)))
    (let ((f (file.disk (strcat loc "/100/cifar-100-train-images.tensor") "w")))
      (setf ($fbinaryp f) t)
      ($fwrite (tensor.byte (caddr train)) f)
      ($fclose f))
    (let ((f (file.disk (strcat loc "/100/cifar-100-train-fine-labels.tensor") "w")))
      (setf ($fbinaryp f) t)
      ($fwrite (tensor.byte (cadr train)) f)
      ($fclose f))
    (let ((f (file.disk (strcat loc "/100/cifar-100-train-coarse-labels.tensor") "w")))
      (setf ($fbinaryp f) t)
      ($fwrite (tensor.byte (car train)) f)
      ($fclose f))
    (let ((f (file.disk (strcat loc "/100/cifar-100-test-images.tensor") "w")))
      (setf ($fbinaryp f) t)
      ($fwrite (tensor.byte (caddr test)) f)
      ($fclose f))
    (let ((f (file.disk (strcat loc "/100/cifar-100-test-fine-labels.tensor") "w")))
      (setf ($fbinaryp f) t)
      ($fwrite (tensor.byte (cadr test)) f)
      ($fclose f))
    (let ((f (file.disk (strcat loc "/100/cifar-100-test-coarse-labels.tensor") "w")))
      (setf ($fbinaryp f) t)
      ($fwrite (tensor.byte (car test)) f)
      ($fclose f))))

(defun read-cifar-10-train-images-tensor (&key (loc +cifar-location+) (normalize T))
  (let ((f (file.disk (strcat loc "/10/cifar-10-train-images.tensor") "r"))
        (m (tensor.byte)))
    (setf ($fbinaryp f) t)
    ($fread m f)
    ($fclose f)
    (if normalize
        ($div! (tensor.float m) 255)
        (tensor.float m))))

(defun read-cifar-10-train-labels-tensor (&key (loc +cifar-location+) (onehot T))
  (let ((f (file.disk (strcat loc "/10/cifar-10-train-labels.tensor") "r"))
        (m (tensor.byte)))
    (setf ($fbinaryp f) t)
    ($fread m f)
    ($fclose f)
    (if onehot
        (let ((z (zeros ($size m 0) 10)))
          (loop :for i :from 0 :below ($size m 0)
                :do (setf ($ z i ($ m i)) 1))
          z)
        (tensor.float m))))

(defun read-cifar-10-test-images-tensor (&key (loc +cifar-location+) (normalize T))
  (let ((f (file.disk (strcat loc "/10/cifar-10-test-images.tensor") "r"))
        (m (tensor.byte)))
    (setf ($fbinaryp f) t)
    ($fread m f)
    ($fclose f)
    (if normalize
        ($div! (tensor.float m) 255)
        (tensor.float m))))

(defun read-cifar-10-test-labels-tensor (&key (loc +cifar-location+) (onehot T))
  (let ((f (file.disk (strcat loc "/10/cifar-10-test-labels.tensor") "r"))
        (m (tensor.byte)))
    (setf ($fbinaryp f) t)
    ($fread m f)
    ($fclose f)
    (if onehot
        (let ((z (zeros ($size m 0) 10)))
          (loop :for i :from 0 :below ($size m 0)
                :do (setf ($ z i ($ m i)) 1))
          z)
        (tensor.float m))))

(defun read-cifar-10-label-descriptions (&key (loc +cifar-location+))
  (coerce (->> (slurp (strcat loc "/10/batches.meta.txt"))
               (mapcar (lambda (s) (strim s)))
               (remove-if-not (lambda (s) (> ($count s) 0))))
          'vector))

(defun read-cifar-10-data (&key (path +cifar-location+) (normalize T) (onehot T))
  #{:train-images (read-cifar-10-train-images-tensor :loc path :normalize normalize)
    :train-labels (read-cifar-10-train-labels-tensor :loc path :onehot onehot)
    :test-images (read-cifar-10-test-images-tensor :loc path :normalize normalize)
    :test-labels (read-cifar-10-test-labels-tensor :loc path :onehot onehot)
    :label-descriptions (read-cifar-10-label-descriptions :loc path)})

(defun read-cifar-100-train-images-tensor (&key (loc +cifar-location+) (normalize T))
  (let ((f (file.disk (strcat loc "/100/cifar-100-train-images.tensor") "r"))
        (m (tensor.byte)))
    (setf ($fbinaryp f) t)
    ($fread m f)
    ($fclose f)
    (if normalize
        ($div! (tensor.float m) 255)
        (tensor.float m))))

(defun read-cifar-100-train-fine-labels-tensor (&key (loc +cifar-location+) (onehot T))
  (let ((f (file.disk (strcat loc "/100/cifar-100-train-fine-labels.tensor") "r"))
        (m (tensor.byte)))
    (setf ($fbinaryp f) t)
    ($fread m f)
    ($fclose f)
    (if onehot
        (let ((z (zeros ($size m 0) 100)))
          (loop :for i :from 0 :below ($size m 0)
                :do (setf ($ z i ($ m i)) 1))
          z)
        (tensor.float m))))

(defun read-cifar-100-train-coarse-labels-tensor (&key (loc +cifar-location+) (onehot T))
  (let ((f (file.disk (strcat loc "/100/cifar-100-train-coarse-labels.tensor") "r"))
        (m (tensor.byte)))
    (setf ($fbinaryp f) t)
    ($fread m f)
    ($fclose f)
    (if onehot
        (let ((z (zeros ($size m 0) 10)))
          (loop :for i :from 0 :below ($size m 0)
                :do (setf ($ z i ($ m i)) 1))
          z)
        (tensor.float m))))

(defun read-cifar-100-test-images-tensor (&key (loc +cifar-location+) (normalize T))
  (let ((f (file.disk (strcat loc "/100/cifar-100-test-images.tensor") "r"))
        (m (tensor.byte)))
    (setf ($fbinaryp f) t)
    ($fread m f)
    ($fclose f)
    (if normalize
        ($div! (tensor.float m) 255)
        (tensor.float m))))

(defun read-cifar-100-test-fine-labels-tensor (&key (loc +cifar-location+) (onehot T))
  (let ((f (file.disk (strcat loc "/100/cifar-100-test-fine-labels.tensor") "r"))
        (m (tensor.byte)))
    (setf ($fbinaryp f) t)
    ($fread m f)
    ($fclose f)
    (if onehot
        (let ((z (zeros ($size m 0) 100)))
          (loop :for i :from 0 :below ($size m 0)
                :do (setf ($ z i ($ m i)) 1))
          z)
        (tensor.float m))))

(defun read-cifar-100-test-coarse-labels-tensor (&key (loc +cifar-location+) (onehot T))
  (let ((f (file.disk (strcat loc "/100/cifar-100-test-coarse-labels.tensor") "r"))
        (m (tensor.byte)))
    (setf ($fbinaryp f) t)
    ($fread m f)
    ($fclose f)
    (if onehot
        (let ((z (zeros ($size m 0) 10)))
          (loop :for i :from 0 :below ($size m 0)
                :do (setf ($ z i ($ m i)) 1))
          z)
        (tensor.float m))))

(defun read-cifar-100-fine-label-descriptions (&key (loc +cifar-location+))
  (coerce (->> (slurp (strcat loc "/100/fine_label_names.txt"))
               (mapcar (lambda (s) (strim s)))
               (remove-if-not (lambda (s) (> ($count s) 0))))
          'vector))

(defun read-cifar-100-coarse-label-descriptions (&key (loc +cifar-location+))
  (coerce (->> (slurp (strcat loc "/100/coarse_label_names.txt"))
               (mapcar (lambda (s) (strim s)))
               (remove-if-not (lambda (s) (> ($count s) 0))))
          'vector))

(defun read-cifar-100-data (&key (path +cifar-location+) (normalize T) (onehot T))
  #{:train-images (read-cifar-100-train-images-tensor :loc path :normalize normalize)
    :train-fine-labels (read-cifar-100-train-fine-labels-tensor :loc path :onehot onehot)
    :train-coarse-labels (read-cifar-100-train-coarse-labels-tensor :loc path :onehot onehot)
    :test-images (read-cifar-100-test-images-tensor :loc path :normalize normalize)
    :test-fine-labels (read-cifar-100-test-fine-labels-tensor :loc path :onehot onehot)
    :test-coarse-labels (read-cifar-100-test-coarse-labels-tensor :loc path :onehot onehot)
    :fine-label-descriptions (read-cifar-100-fine-label-descriptions)
    :coarse-label-descriptions (read-cifar-100-coarse-label-descriptions)})
