(declaim (optimize (speed 3) (debug 1) (safety 0)))

(in-package :th)

(defun defstate () (cffi:null-pointer))
(defun nilptr () (cffi:null-pointer))

(defgeneric nn-abs-update-output (input output))
(defmethod nn-abs-update-output ((input tensor.float) (output tensor.float))
  (thnn-float-abs-update-output (defstate) ($handle input) ($handle output)))
(defmethod nn-abs-update-output ((input tensor.double) (output tensor.double))
  (thnn-double-abs-update-output (defstate) ($handle input) ($handle output)))

(defgeneric nn-abs-update-grad-input (input grad-output grad-input))
(defmethod nn-abs-update-grad-input ((input tensor.float) (grad-output tensor.float)
                                     (grad-input tensor.float))
  (thnn-float-abs-update-grad-input (defstate)
                                    ($handle input)
                                    ($handle grad-output)
                                    ($handle grad-input)))
(defmethod nn-abs-update-grad-input ((input tensor.double) (grad-output tensor.double)
                                     (grad-input tensor.double))
  (thnn-double-abs-update-grad-input (defstate)
                                     ($handle input)
                                     ($handle grad-output)
                                     ($handle grad-input)))

(defgeneric nn-abs-criterion-update-output (input target output size-average))
(defmethod nn-abs-criterion-update-output ((input tensor.float) (target tensor.float)
                                           (output tensor.float) size-average)
  (thnn-float-abs-criterion-update-output (defstate)
                                          ($handle input)
                                          ($handle target)
                                          ($handle output)
                                          (if size-average 1 0)
                                          1))
(defmethod nn-abs-criterion-update-output ((input tensor.double) (target tensor.double)
                                           (output tensor.double) size-average)
  (thnn-double-abs-criterion-update-output (defstate)
                                           ($handle input)
                                           ($handle target)
                                           ($handle output)
                                           (if size-average 1 0)
                                           1))

(defgeneric nn-abs-criterion-update-grad-input (input target grad-output grad-input size-average))
(defmethod nn-abs-criterion-update-grad-input ((input tensor.float) (target tensor.float)
                                               (grad-output tensor.float)
                                               (grad-input tensor.float) size-average)
  (thnn-float-abs-criterion-update-grad-input (defstate)
                                              ($handle input)
                                              ($handle target)
                                              ($handle grad-output)
                                              ($handle grad-input)
                                              (if size-average 1 0)
                                              1))
(defmethod nn-abs-criterion-update-grad-input ((input tensor.double) (target tensor.double)
                                               (grad-output tensor.double)
                                               (grad-input tensor.double) size-average)
  (thnn-double-abs-criterion-update-grad-input (defstate)
                                               ($handle input)
                                               ($handle target)
                                               ($handle grad-output)
                                               ($handle grad-input)
                                               (if size-average 1 0)
                                               1))

(defgeneric nn-bce-criterion-update-output (input target output size-average weights))
(defmethod nn-bce-criterion-update-output ((input tensor.float) (target tensor.float)
                                           (output tensor.float)
                                           size-average weights)
  (thnn-float-bce-criterion-update-output (defstate)
                                          ($handle input)
                                          ($handle target)
                                          ($handle output)
                                          (if size-average 1 0)
                                          (if weights
                                              ($handle weights)
                                              (nilptr))))
(defmethod nn-bce-criterion-update-output ((input tensor.double) (target tensor.double)
                                           (output tensor.double)
                                           size-average weights)
  (thnn-double-bce-criterion-update-output (defstate)
                                           ($handle input)
                                           ($handle target)
                                           ($handle output)
                                           (if size-average 1 0)
                                           (if weights
                                               ($handle weights)
                                               (nilptr))))

(defgeneric nn-bce-criterion-update-grad-input (input target grad-input size-average weights))
(defmethod nn-bce-criterion-update-grad-input ((input tensor.float) (target tensor.float)
                                               (grad-input tensor.float) size-average
                                               weights)
  (thnn-float-bce-criterion-update-grad-input (defstate)
                                              ($handle input)
                                              ($handle target)
                                              ($handle grad-input)
                                              (if size-average 1 0)
                                              (if weights ($handle weights) (nilptr))))
(defmethod nn-bce-criterion-update-grad-input ((input tensor.double) (target tensor.double)
                                               (grad-input tensor.double) size-average
                                               weights)
  (thnn-double-bce-criterion-update-grad-input (defstate)
                                               ($handle input)
                                               ($handle target)
                                               ($handle grad-input)
                                               (if size-average 1 0)
                                               (if weights ($handle weights) (nilptr))))

(defgeneric nn-batch-normalization-update-output (input output weight bias
                                                  running-mean running-var save-mean save-std
                                                  train momentum eps))
(defmethod nn-batch-normalization-update-output ((input tensor.float) (output tensor.float)
                                                 weight bias
                                                 (running-mean tensor.float)
                                                 (running-var tensor.float)
                                                 (save-mean tensor.float)
                                                 (save-std tensor.float)
                                                 train momentum eps)
  (thnn-float-batch-normalization-update-output (defstate)
                                                ($handle input)
                                                ($handle output)
                                                (if weight ($handle weight) (nilptr))
                                                (if bias ($handle bias) (nilptr))
                                                ($handle running-mean)
                                                ($handle running-var)
                                                ($handle save-mean)
                                                ($handle save-std)
                                                (if train 1 0)
                                                (coerce momentum 'double-float)
                                                (coerce eps 'double-float)))
(defmethod nn-batch-normalization-update-output ((input tensor.double) (output tensor.double)
                                                 weight bias
                                                 (running-mean tensor.double)
                                                 (running-var tensor.double)
                                                 (save-mean tensor.double)
                                                 (save-std tensor.double)
                                                 train momentum eps)
  (thnn-double-batch-normalization-update-output (defstate)
                                                 ($handle input)
                                                 ($handle output)
                                                 (if weight ($handle weight) (nilptr))
                                                 (if bias ($handle bias) (nilptr))
                                                 ($handle running-mean)
                                                 ($handle running-var)
                                                 ($handle save-mean)
                                                 ($handle save-std)
                                                 (if train 1 0)
                                                 (coerce momentum 'double-float)
                                                 (coerce eps 'double-float)))

(defgeneric nn-batch-normalization-backward (input grad-output grad-input grad-weight grad-bias
                                             weight running-mean running-var
                                             save-mean save-std train scale eps))
(defmethod nn-batch-normalization-backward ((input tensor.float) (grad-output tensor.float)
                                            grad-input grad-weight
                                            grad-bias weight
                                            (running-mean tensor.float)
                                            (running-var tensor.float)
                                            (save-mean tensor.float) (save-std tensor.float)
                                            train scale eps)
  (thnn-float-batch-normalization-backward (defstate)
                                           ($handle input)
                                           ($handle grad-output)
                                           (if grad-input ($handle grad-input) (nilptr))
                                           (if grad-weight ($handle grad-weight) (nilptr))
                                           (if grad-bias ($handle grad-bias) (nilptr))
                                           (if weight ($handle weight) (nilptr))
                                           ($handle running-mean)
                                           ($handle running-var)
                                           ($handle save-mean)
                                           ($handle save-std)
                                           (if train 1 0)
                                           (coerce scale 'double-float)
                                           (coerce eps 'double-float)))
(defmethod nn-batch-normalization-backward ((input tensor.double) (grad-output tensor.double)
                                            grad-input grad-weight
                                            grad-bias weight
                                            (running-mean tensor.double)
                                            (running-var tensor.double)
                                            (save-mean tensor.double) (save-std tensor.double)
                                            train scale eps)
  (thnn-double-batch-normalization-backward (defstate)
                                            ($handle input)
                                            ($handle grad-output)
                                            (if grad-input ($handle grad-input) (nilptr))
                                            (if grad-weight ($handle grad-weight) (nilptr))
                                            (if grad-bias ($handle grad-bias) (nilptr))
                                            (if weight ($handle weight) (nilptr))
                                            ($handle running-mean)
                                            ($handle running-var)
                                            ($handle save-mean)
                                            ($handle save-std)
                                            (if train 1 0)
                                            (coerce scale 'double-float)
                                            (coerce eps 'double-float)))

(defgeneric nn-class-nll-criterion-update-output (input target output size-average weights
                                                  total-weight ignore-index))
(defmethod nn-class-nll-criterion-update-output ((input tensor.float) (target tensor.long)
                                                 (output tensor.float) size-average weights
                                                 (total-weight tensor.float)
                                                 ignore-index)
  (thnn-float-class-nll-criterion-update-output (defstate)
                                                ($handle input)
                                                ($handle target)
                                                ($handle output)
                                                (if size-average 1 0)
                                                (if weights ($handle weights) (nilptr))
                                                ($handle total-weight)
                                                ignore-index
                                                1))
(defmethod nn-class-nll-criterion-update-output ((input tensor.double) (target tensor.long)
                                                 (output tensor.double) size-average weights
                                                 (total-weight tensor.double)
                                                 ignore-index)
  (thnn-double-class-nll-criterion-update-output (defstate)
                                                 ($handle input)
                                                 ($handle target)
                                                 ($handle output)
                                                 (if size-average 1 0)
                                                 (if weights ($handle weights) (nilptr))
                                                 ($handle total-weight)
                                                 ignore-index
                                                 1))

(defgeneric nn-class-nll-criterion-update-grad-input (input target grad-output grad-input
                                                      size-average
                                                      weights total-weight ignore-index))
(defmethod nn-class-nll-criterion-update-grad-input ((input tensor.float) (target tensor.long)
                                                     (grad-output tensor.float)
                                                     (grad-input tensor.float)
                                                     size-average weights
                                                     (total-weight tensor.float)
                                                     ignore-index)
  (thnn-float-class-nll-criterion-update-grad-input (defstate)
                                                    ($handle input)
                                                    ($handle target)
                                                    ($handle grad-output)
                                                    ($handle grad-input)
                                                    (if size-average 1 0)
                                                    (if weights ($handle weights) (nilptr))
                                                    ($handle total-weight)
                                                    ignore-index
                                                    1))
(defmethod nn-class-nll-criterion-update-grad-input ((input tensor.double) (target tensor.long)
                                                     (grad-output tensor.double)
                                                     (grad-input tensor.double)
                                                     size-average weights
                                                     (total-weight tensor.double)
                                                     ignore-index)
  (thnn-double-class-nll-criterion-update-grad-input (defstate)
                                                     ($handle input)
                                                     ($handle target)
                                                     ($handle grad-output)
                                                     ($handle grad-input)
                                                     (if size-average 1 0)
                                                     (if weights ($handle weights) (nilptr))
                                                     ($handle total-weight)
                                                     ignore-index
                                                     1))

(defgeneric nn-dist-kl-div-criterion-update-output (input target output size-average))
(defmethod nn-dist-kl-div-criterion-update-output ((input tensor.float) (target tensor.float)
                                                   (output tensor.float) size-average)
  (thnn-float-dist-kl-div-criterion-update-output (defstate) ($handle input)
                                                  ($handle target) ($handle output)
                                                  (if size-average 1 0)
                                                  1))
(defmethod nn-dist-kl-div-criterion-update-output ((input tensor.double) (target tensor.double)
                                                   (output tensor.double) size-average)
  (thnn-double-dist-kl-div-criterion-update-output (defstate) ($handle input)
                                                   ($handle target) ($handle output)
                                                   (if size-average 1 0)
                                                   1))

(defgeneric nn-dist-kl-div-criterion-update-grad-input (input target grad-output grad-input
                                                        size-average))
(defmethod nn-dist-kl-div-criterion-update-grad-input ((input tensor.float)
                                                       (target tensor.float)
                                                       (grad-output tensor.float)
                                                       (grad-input tensor.float)
                                                       size-average)
  (thnn-float-dist-kl-div-criterion-update-grad-input (defstate)
                                                      ($handle input)
                                                      ($handle target)
                                                      ($handle grad-output)
                                                      ($handle grad-input)
                                                      (if size-average 1 0)
                                                      1))
(defmethod nn-dist-kl-div-criterion-update-grad-input ((input tensor.double)
                                                       (target tensor.double)
                                                       (grad-output tensor.double)
                                                       (grad-input tensor.double)
                                                       size-average)
  (thnn-double-dist-kl-div-criterion-update-grad-input (defstate)
                                                       ($handle input)
                                                       ($handle target)
                                                       ($handle grad-output)
                                                       ($handle grad-input)
                                                       (if size-average 1 0)
                                                       1))

(defgeneric nn-elu-update-grad-input (input grad-output grad-input output alpha in-place))
(defmethod nn-elu-update-grad-input ((input tensor.float) (grad-output tensor.float)
                                     (grad-input tensor.float) (output tensor.float)
                                     alpha in-place)
  (thnn-float-elu-update-grad-input (defstate)
                                    ($handle input)
                                    ($handle grad-output)
                                    ($handle grad-input)
                                    ($handle output)
                                    (coerce alpha 'double-float)
                                    (if in-place 1 0)))
(defmethod nn-elu-update-grad-input ((input tensor.double) (grad-output tensor.double)
                                     (grad-input tensor.double) (output tensor.double)
                                     alpha in-place)
  (thnn-double-elu-update-grad-input (defstate)
                                     ($handle input)
                                     ($handle grad-output)
                                     ($handle grad-input)
                                     ($handle output)
                                     (coerce alpha 'double-float)
                                     (if in-place 1 0)))

(defgeneric nn-feature-lp-pooling-update-output (input output power width stride batch))
(defmethod nn-feature-lp-pooling-update-output ((input tensor.float) (output tensor.float)
                                                power width stride batch)
  (thnn-float-feature-lp-pooling-update-output (defstate) ($handle input) ($handle output)
                                               (coerce power 'double-float) width stride
                                               (if batch 1 0)))
(defmethod nn-feature-lp-pooling-update-output ((input tensor.double) (output tensor.double)
                                                power width stride batch)
  (thnn-double-feature-lp-pooling-update-output (defstate) ($handle input) ($handle output)
                                                (coerce power 'double-float) width stride
                                                (if batch 1 0)))

(defgeneric nn-feature-lp-pooling-update-grad-input (grad-output input output grad-input
                                                     power width stride batch))
(defmethod nn-feature-lp-pooling-update-grad-input ((grad-output tensor.float)
                                                    (input tensor.float) (output tensor.float)
                                                    (grad-input tensor.float)
                                                    power width stride batch)
  (thnn-float-feature-lp-pooling-update-grad-input (defstate) ($handle grad-output)
                                                   ($handle input) ($handle output)
                                                   ($handle grad-input)
                                                   (coerce power 'double-float)
                                                   width stride (if batch 1 0)))
(defmethod nn-feature-lp-pooling-update-grad-input ((grad-output tensor.double)
                                                    (input tensor.double) (output tensor.double)
                                                    (grad-input tensor.double)
                                                    power width stride batch)
  (thnn-double-feature-lp-pooling-update-grad-input (defstate) ($handle grad-output)
                                                    ($handle input) ($handle output)
                                                    ($handle grad-input)
                                                    (coerce power 'double-float)
                                                    width stride (if batch 1 0)))

(defgeneric nn-gated-linear-update-output (input output dim))
(defmethod nn-gated-linear-update-output ((input tensor.float) (output tensor.float) dim)
  (thnn-float-gated-linear-update-output (defstate) ($handle input)
                                         ($handle output) dim))
(defmethod nn-gated-linear-update-output ((input tensor.double) (output tensor.double) dim)
  (thnn-double-gated-linear-update-output (defstate) ($handle input)
                                          ($handle output) dim))

(defgeneric nn-gated-linear-update-grad-input (input grad-output grad-input dim))
(defmethod nn-gated-linear-update-grad-input ((input tensor.float) (grad-output tensor.float)
                                              (grad-input tensor.float) dim)
  (thnn-float-gated-linear-update-grad-input (defstate) ($handle input)
                                             ($handle grad-output)
                                             ($handle grad-input) dim))
(defmethod nn-gated-linear-update-grad-input ((input tensor.double) (grad-output tensor.double)
                                              (grad-input tensor.double) dim)
  (thnn-double-gated-linear-update-grad-input (defstate) ($handle input)
                                              ($handle grad-output)
                                              ($handle grad-input) dim))

(defgeneric nn-hard-shrink-update-output (input output lam))
(defmethod nn-hard-shrink-update-output ((input tensor.float) (output tensor.float) lam)
  (thnn-float-hard-shrink-update-output (defstate)
                                        ($handle input)
                                        ($handle output)
                                        (coerce lam 'double-float)))
(defmethod nn-hard-shrink-update-output ((input tensor.double) (output tensor.double) lam)
  (thnn-double-hard-shrink-update-output (defstate)
                                         ($handle input)
                                         ($handle output)
                                         (coerce lam 'double-float)))

(defgeneric nn-hard-shrink-update-grad-input (input grad-output grad-input lam))
(defmethod nn-hard-shrink-update-grad-input ((input tensor.float) (grad-output tensor.float)
                                             (grad-input tensor.float) lam)
  (thnn-float-hard-shrink-update-grad-input (defstate)
                                            ($handle input)
                                            ($handle grad-output)
                                            ($handle grad-input)
                                            (coerce lam 'double-float)))
(defmethod nn-hard-shrink-update-grad-input ((input tensor.double) (grad-output tensor.double)
                                             (grad-input tensor.double) lam)
  (thnn-double-hard-shrink-update-grad-input (defstate)
                                             ($handle input)
                                             ($handle grad-output)
                                             ($handle grad-input)
                                             (coerce lam 'double-float)))

(defgeneric nn-hard-tanh-update-output (input output min-value max-value in-place))
(defmethod nn-hard-tanh-update-output ((input tensor.float) (output tensor.float)
                                       min-value max-value in-place)
  (thnn-float-hard-tanh-update-output (defstate)
                                      ($handle input)
                                      ($handle output)
                                      (coerce min-value 'double-float)
                                      (coerce max-value 'double-float)
                                      (coerce in-place 'unsigned-byte)))
(defmethod nn-hard-tanh-update-output ((input tensor.double) (output tensor.double)
                                       min-value max-value in-place)
  (thnn-double-hard-tanh-update-output (defstate)
                                       ($handle input)
                                       ($handle output)
                                       (coerce min-value 'double-float)
                                       (coerce max-value 'double-float)
                                       (coerce in-place 'unsigned-byte)))
(defgeneric nn-hard-tanh-update-grad-input (input grad-output grad-input min-value max-value
                                            in-place))
(defmethod nn-hard-tanh-update-grad-input ((input tensor.float) (grad-output tensor.float)
                                           (grad-input tensor.float) min-value max-value
                                           in-place)
  (thnn-float-hard-tanh-update-grad-input (defstate)
                                          ($handle input)
                                          ($handle grad-output)
                                          ($handle grad-input)
                                          (coerce min-value 'double-float)
                                          (coerce max-value 'double-float)
                                          (coerce in-place 'unsigned-byte)))
(defmethod nn-hard-tanh-update-grad-input ((input tensor.double) (grad-output tensor.double)
                                           (grad-input tensor.double) min-value max-value
                                           in-place)
  (thnn-double-hard-tanh-update-grad-input (defstate)
                                           ($handle input)
                                           ($handle grad-output)
                                           ($handle grad-input)
                                           (coerce min-value 'double-float)
                                           (coerce max-value 'double-float)
                                           (coerce in-place 'unsigned-byte)))

(defgeneric nn-im2col-update-output (input output kh kw dh dw ph pw sh sw))
(defmethod nn-im2col-update-output ((input tensor.float) (output tensor.float)
                                    kh kw dh dw ph pw sh sw)
  (thnn-float-im2col-update-output (defstate) ($handle input) ($handle output)
                                   kh kw dh dw ph pw sh sw))
(defmethod nn-im2col-update-output ((input tensor.double) (output tensor.double)
                                    kh kw dh dw ph pw sh sw)
  (thnn-double-im2col-update-output (defstate) ($handle input) ($handle output)
                                    kh kw dh dw ph pw sh sw))

(defgeneric nn-im2col-update-grad-input (grad-output grad-input ih iw
                                         kh kw dh dw ph pw sh sw))
(defmethod nn-im2col-update-grad-input ((grad-output tensor.float) (grad-input tensor.float)
                                        ih iw kh kw dh dw ph pw sh sw)
  (thnn-float-im2col-update-grad-input (defstate) ($handle grad-output) ($handle grad-input)
                                       ih iw kh kw dh dw ph pw sh sw))
(defmethod nn-im2col-update-grad-input ((grad-output tensor.double) (grad-input tensor.double)
                                        ih iw kh kw dh dw ph pw sh sw)
  (thnn-double-im2col-update-grad-input (defstate) ($handle grad-output) ($handle grad-input)
                                        ih iw kh kw dh dw ph pw sh sw))

(defgeneric nn-index-linear-update-output (keys keys-offset value sizes cum-sum-sizes
                                           output weight bias normalized-values train))
(defmethod nn-index-linear-update-output ((keys tensor.long) keys-offset (value tensor.float)
                                          (sizes tensor.long) (cum-sum-sizes tensor.long)
                                          (output tensor.float) (weight tensor.float)
                                          bias (normalized-values tensor.float) train)
  (thnn-float-index-linear-update-output (defstate) ($handle keys) keys-offset
                                         ($handle value) ($handle sizes)
                                         ($handle cum-sum-sizes)
                                         ($handle output) ($handle weight)
                                         (if bias ($handle bias) (nilptr))
                                         ($handle normalized-values)
                                         (if train 1 0)))
(defmethod nn-index-linear-update-output ((keys tensor.long) keys-offset (value tensor.double)
                                          (sizes tensor.long) (cum-sum-sizes tensor.long)
                                          (output tensor.double) (weight tensor.double)
                                          bias (normalized-values tensor.double) train)
  (thnn-double-index-linear-update-output (defstate) ($handle keys) keys-offset
                                          ($handle value) ($handle sizes)
                                          ($handle cum-sum-sizes)
                                          ($handle output) ($handle weight)
                                          (if bias ($handle bias) (nilptr))
                                          ($handle normalized-values)
                                          (if train 1 0)))

(defgeneric nn-index-linear-acc-grad-parameters (keys keys-offset value sizes cum-sum-sizes
                                                 grad-output grad-weight grad-bias weight bias
                                                 values-buffer weight-decay scale))
(defmethod nn-index-linear-acc-grad-parameters ((keys tensor.long) keys-offset
                                                (value tensor.float) (sizes tensor.long)
                                                (cum-sum-sizes tensor.long)
                                                (grad-output tensor.float)
                                                (grad-weight tensor.float)
                                                grad-bias
                                                (weight tensor.float)
                                                bias
                                                (values-buffer tensor.float)
                                                weight-decay scale)
  (thnn-float-index-linear-acc-grad-parameters (defstate) ($handle keys) keys-offset
                                               ($handle value) ($handle sizes)
                                               ($handle cum-sum-sizes)
                                               ($handle grad-output)
                                               ($handle grad-weight)
                                               (if grad-bias
                                                   ($handle grad-bias)
                                                   (nilptr))
                                               ($handle weight)
                                               (if bias ($handle bias) (nilptr))
                                               ($handle values-buffer)
                                               (coerce weight-decay 'double-float)
                                               (coerce scale 'double-float)))
(defmethod nn-index-linear-acc-grad-parameters ((keys tensor.long) keys-offset
                                                (value tensor.double) (sizes tensor.long)
                                                (cum-sum-sizes tensor.long)
                                                (grad-output tensor.double)
                                                (grad-weight tensor.double)
                                                grad-bias
                                                (weight tensor.double)
                                                bias
                                                (values-buffer tensor.double)
                                                weight-decay scale)
  (thnn-double-index-linear-acc-grad-parameters (defstate) ($handle keys) keys-offset
                                                ($handle value) ($handle sizes)
                                                ($handle cum-sum-sizes)
                                                ($handle grad-output)
                                                ($handle grad-weight)
                                                (if grad-bias
                                                    ($handle grad-bias)
                                                    (nilptr))
                                                ($handle weight)
                                                (if bias ($handle bias) (nilptr))
                                                ($handle values-buffer)
                                                (coerce weight-decay 'double-float)
                                                (coerce scale 'double-float)))

(defgeneric nn-index-linear-acc-update-grad-parameters (keys keys-offset value sizes cum-sum-sizes
                                                        grad-output weight bias weight-decay scale))
(defmethod nn-index-linear-acc-update-grad-parameters ((keys tensor.long) keys-offset
                                                       (value tensor.float)
                                                       (sizes tensor.long)
                                                       (cum-sum-sizes tensor.long)
                                                       (grad-output tensor.float)
                                                       (weight tensor.float)
                                                       bias weight-decay scale)
  (thnn-float-index-linear-acc-update-grad-parameters (defstate) ($handle keys)
                                                      keys-offset ($handle value)
                                                      ($handle sizes)
                                                      ($handle cum-sum-sizes)
                                                      ($handle grad-output)
                                                      ($handle weight)
                                                      (if bias ($handle bias) (nilptr))
                                                      (coerce weight-decay 'double-float)
                                                      (coerce scale 'double-float)))
(defmethod nn-index-linear-acc-update-grad-parameters ((keys tensor.long) keys-offset
                                                       (value tensor.double)
                                                       (sizes tensor.long)
                                                       (cum-sum-sizes tensor.long)
                                                       (grad-output tensor.double)
                                                       (weight tensor.double)
                                                       bias weight-decay scale)
  (thnn-double-index-linear-acc-update-grad-parameters (defstate) ($handle keys)
                                                       keys-offset ($handle value)
                                                       ($handle sizes)
                                                       ($handle cum-sum-sizes)
                                                       ($handle grad-output)
                                                       ($handle weight)
                                                       (if bias ($handle bias) (nilptr))
                                                       (coerce weight-decay 'double-float)
                                                       (coerce scale 'double-float)))

(defgeneric nn-index-linear-update-parameters (grad-weight grad-bias weight bias running-keys
                                               cum-sum-sizes keys-offset weight-decay
                                               learning-rate))
(defmethod nn-index-linear-update-parameters ((grad-weight tensor.float) grad-bias
                                              (weight tensor.float) bias
                                              (running-keys tensor.long)
                                              (cum-sum-sizes tensor.long)
                                              keys-offset weight-decay learning-rate)
  (thnn-float-index-linear-update-parameters (defstate) ($handle grad-weight)
                                             (if grad-bias ($handle grad-bias) (nilptr))
                                             ($handle weight)
                                             (if bias ($handle bias) (nilptr))
                                             ($handle running-keys)
                                             ($handle cum-sum-sizes)
                                             keys-offset
                                             (coerce weight-decay 'double-float)
                                             (coerce learning-rate 'double-float)))
(defmethod nn-index-linear-update-parameters ((grad-weight tensor.double) grad-bias
                                              (weight tensor.double) bias
                                              (running-keys tensor.long)
                                              (cum-sum-sizes tensor.long)
                                              keys-offset weight-decay learning-rate)
  (thnn-double-index-linear-update-parameters (defstate) ($handle grad-weight)
                                              (if grad-bias ($handle grad-bias) (nilptr))
                                              ($handle weight)
                                              (if bias ($handle bias) (nilptr))
                                              ($handle running-keys)
                                              ($handle cum-sum-sizes)
                                              keys-offset
                                              (coerce weight-decay 'double-float)
                                              (coerce learning-rate 'double-float)))

(defgeneric nn-l1-cost-update-output (input output))
(defmethod nn-l1-cost-update-output ((input tensor.float) (output tensor.float))
  (thnn-float-l1-cost-update-output (defstate) ($handle input) ($handle output)))
(defmethod nn-l1-cost-update-output ((input tensor.double) (output tensor.double))
  (thnn-double-l1-cost-update-output (defstate) ($handle input) ($handle output)))

(defgeneric nn-l1-cost-update-grad-input (input grad-output grad-input))
(defmethod nn-l1-cost-update-grad-input ((input tensor.float) (grad-output tensor.float)
                                         (grad-input tensor.float))
  (thnn-float-l1-cost-update-grad-input (defstate) ($handle input)
                                        ($handle grad-output)
                                        ($handle grad-input)))
(defmethod nn-l1-cost-update-grad-input ((input tensor.double) (grad-output tensor.double)
                                         (grad-input tensor.double))
  (thnn-double-l1-cost-update-grad-input (defstate) ($handle input)
                                         ($handle grad-output)
                                         ($handle grad-input)))

(defgeneric nn-leaky-relu-update-output (input output neg-val in-place))
(defmethod nn-leaky-relu-update-output ((input tensor.float) (output tensor.float)
                                        neg-val in-place)
  (thnn-float-leaky-relu-update-output (defstate) ($handle input)
                                       ($handle output)
                                       (coerce neg-val 'double-float)
                                       (if in-place 1 0)))
(defmethod nn-leaky-relu-update-output ((input tensor.double) (output tensor.double)
                                        neg-val in-place)
  (thnn-double-leaky-relu-update-output (defstate) ($handle input)
                                        ($handle output)
                                        (coerce neg-val 'double-float)
                                        (if in-place 1 0)))

(defgeneric nn-leaky-relu-update-grad-input (input grad-output grad-input neg-val in-place))
(defmethod nn-leaky-relu-update-grad-input ((input tensor.float) (grad-output tensor.float)
                                            (grad-input tensor.float)
                                            neg-val in-place)
  (thnn-float-leaky-relu-update-grad-input (defstate) ($handle input)
                                           ($handle grad-output)
                                           ($handle grad-input)
                                           (coerce neg-val 'double-float)
                                           (if in-place 1 0)))
(defmethod nn-leaky-relu-update-grad-input ((input tensor.double) (grad-output tensor.double)
                                            (grad-input tensor.double)
                                            neg-val in-place)
  (thnn-double-leaky-relu-update-grad-input (defstate) ($handle input)
                                            ($handle grad-output)
                                            ($handle grad-input)
                                            (coerce neg-val 'double-float)
                                            (if in-place 1 0)))

(defgeneric nn-linear-update-output (input output weight bias add-buffer))
(defmethod nn-linear-update-output ((input tensor.float) output weight bias add-buffer)
  (thnn-float-linear-update-output (defstate)
                                   ($handle input)
                                   ($handle output)
                                   ($handle weight)
                                   (if bias
                                       ($handle bias)
                                       (nilptr))
                                   ($handle add-buffer)))
(defmethod nn-linear-update-output ((input tensor.double) output weight bias add-buffer)
  (thnn-double-linear-update-output (defstate)
                                    ($handle input)
                                    ($handle output)
                                    ($handle weight)
                                    (if bias
                                        ($handle bias)
                                        (nilptr))
                                    ($handle add-buffer)))

(defgeneric nn-linear-update-grad-input (input grad-output grad-input weight))
(defmethod nn-linear-update-grad-input ((input tensor.float) (grad-output tensor.float)
                                        (grad-input tensor.float) (weight tensor.float))
  (thnn-float-linear-update-grad-input (defstate)
                                       ($handle input)
                                       ($handle grad-output)
                                       ($handle grad-input)
                                       ($handle weight)))
(defmethod nn-linear-update-grad-input ((input tensor.double) (grad-output tensor.double)
                                        (grad-input tensor.double) (weight tensor.double))
  (thnn-double-linear-update-grad-input (defstate)
                                        ($handle input)
                                        ($handle grad-output)
                                        ($handle grad-input)
                                        ($handle weight)))

(defgeneric nn-linear-acc-grad-parameters (input grad-output grad-input weight bias
                                           grad-weight grad-bias add-buffer scale))
(defmethod nn-linear-acc-grad-parameters ((input tensor.float) (grad-output tensor.float)
                                          (grad-input tensor.float) (weight tensor.float)
                                          bias (grad-weight tensor.float)
                                          grad-bias (add-buffer tensor.float)
                                          scale)
  (thnn-float-linear-acc-grad-parameters (defstate)
                                         ($handle input)
                                         ($handle grad-output)
                                         ($handle grad-input)
                                         ($handle weight)
                                         (if bias ($handle bias) (nilptr))
                                         ($handle grad-weight)
                                         (if bias ($handle grad-bias) (nilptr))
                                         ($handle add-buffer)
                                         (coerce scale 'double-float)))
(defmethod nn-linear-acc-grad-parameters ((input tensor.double) (grad-output tensor.double)
                                          (grad-input tensor.double) (weight tensor.double)
                                          bias (grad-weight tensor.double)
                                          grad-bias (add-buffer tensor.double)
                                          scale)
  (thnn-double-linear-acc-grad-parameters (defstate)
                                          ($handle input)
                                          ($handle grad-output)
                                          ($handle grad-input)
                                          ($handle weight)
                                          (if bias ($handle bias) (nilptr))
                                          ($handle grad-weight)
                                          (if bias ($handle grad-bias) (nilptr))
                                          ($handle add-buffer)
                                          (coerce scale 'double-float)))

(defgeneric nn-log-sigmoid-update-output (input output buffer))
(defmethod nn-log-sigmoid-update-output ((input tensor.float) (output tensor.float)
                                         (buffer tensor.float))
  (thnn-float-log-sigmoid-update-output (defstate) ($handle input)
                                        ($handle output) ($handle buffer)))
(defmethod nn-log-sigmoid-update-output ((input tensor.double) (output tensor.double)
                                         (buffer tensor.double))
  (thnn-double-log-sigmoid-update-output (defstate) ($handle input)
                                         ($handle output) ($handle buffer)))

(defgeneric nn-log-sigmoid-update-grad-input (input grad-output grad-input buffer))
(defmethod nn-log-sigmoid-update-grad-input ((input tensor.float) (grad-output tensor.float)
                                             (grad-input tensor.float)
                                             (buffer tensor.float))
  (thnn-float-log-sigmoid-update-grad-input (defstate) ($handle input)
                                            ($handle grad-output)
                                            ($handle grad-input)
                                            ($handle buffer)))
(defmethod nn-log-sigmoid-update-grad-input ((input tensor.double) (grad-output tensor.double)
                                             (grad-input tensor.double)
                                             (buffer tensor.double))
  (thnn-double-log-sigmoid-update-grad-input (defstate) ($handle input)
                                             ($handle grad-output)
                                             ($handle grad-input)
                                             ($handle buffer)))

(defgeneric nn-log-softmax-update-output (input output))
(defmethod nn-log-softmax-update-output ((input tensor.float) (output tensor.float))
  (thnn-float-log-softmax-update-output (defstate) ($handle input)
                                        ($handle output)))
(defmethod nn-log-softmax-update-output ((input tensor.double) (output tensor.double))
  (thnn-double-log-softmax-update-output (defstate) ($handle input)
                                         ($handle output)))

(defgeneric nn-log-softmax-update-grad-input (input grad-output grad-input output))
(defmethod nn-log-softmax-update-grad-input ((input tensor.float) (grad-output tensor.float)
                                             (grad-input tensor.float) (output tensor.float))
  (thnn-float-log-softmax-update-grad-input (defstate) ($handle input)
                                            ($handle grad-output)
                                            ($handle grad-input)
                                            ($handle output)))
(defmethod nn-log-softmax-update-grad-input ((input tensor.double) (grad-output tensor.double)
                                             (grad-input tensor.double) (output tensor.double))
  (thnn-double-log-softmax-update-grad-input (defstate) ($handle input)
                                             ($handle grad-output)
                                             ($handle grad-input)
                                             ($handle output)))

(defgeneric nn-lookup-table-acc-grad-parameters (input grad-output grad-weight count sorted
                                                 indices scale-grad-by-freq padding-value
                                                 scale))
(defmethod nn-lookup-table-acc-grad-parameters ((input tensor.float) (grad-output tensor.float)
                                                (grad-weight tensor.float) (count tensor.int)
                                                (sorted tensor.int) (indices tensor.int)
                                                scale-grad-by-freq padding-value scale)
  (thnn-float-lookup-table-acc-grad-parameters (defstate) ($handle input)
                                               ($handle grad-output)
                                               ($handle grad-weight)
                                               ($handle count)
                                               ($handle sorted)
                                               ($handle indices)
                                               (if scale-grad-by-freq 1 0)
                                               padding-value
                                               (coerce scale 'double-float)))
(defmethod nn-lookup-table-acc-grad-parameters ((input tensor.double) (grad-output tensor.double)
                                                (grad-weight tensor.double) (count tensor.int)
                                                (sorted tensor.int) (indices tensor.int)
                                                scale-grad-by-freq padding-value scale)
  (thnn-double-lookup-table-acc-grad-parameters (defstate) ($handle input)
                                                ($handle grad-output)
                                                ($handle grad-weight)
                                                ($handle count)
                                                ($handle sorted)
                                                ($handle indices)
                                                (if scale-grad-by-freq 1 0)
                                                padding-value
                                                (coerce scale 'double-float)))

(defgeneric nn-lookup-table-renorm (idx weight max-norm norm-type))
(defmethod nn-lookup-table-renorm ((idx tensor.long) (weight tensor.float) max-norm norm-type)
  (thnn-float-lookup-table-renorm (defstate) ($handle idx) ($handle weight)
                                  (coerce max-norm 'double-float)
                                  (coerce norm-type 'double-float)))
(defmethod nn-lookup-table-renorm ((idx tensor.long) (weight tensor.double) max-norm norm-type)
  (thnn-double-lookup-table-renorm (defstate) ($handle idx) ($handle weight)
                                   (coerce max-norm 'double-float)
                                   (coerce norm-type 'double-float)))

(defgeneric nn-mse-criterion-update-output (input target output size-average))
(defmethod nn-mse-criterion-update-output ((input tensor.float) (target tensor.float)
                                           (output tensor.float) size-average)
  (thnn-float-mse-criterion-update-output (defstate)
                                          ($handle input)
                                          ($handle target)
                                          ($handle output)
                                          (if size-average 1 0)
                                          1))
(defmethod nn-mse-criterion-update-output ((input tensor.double) (target tensor.double)
                                           (output tensor.double) size-average)
  (thnn-double-mse-criterion-update-output (defstate)
                                           ($handle input)
                                           ($handle target)
                                           ($handle output)
                                           (if size-average 1 0)
                                           1))
(defgeneric nn-mse-criterion-update-grad-input (input target grad-output grad-input size-average))
(defmethod nn-mse-criterion-update-grad-input ((input tensor.float) (target tensor.float)
                                               (grad-output tensor.float)
                                               (grad-input tensor.float) size-average)
  (thnn-float-mse-criterion-update-grad-input (defstate)
                                              ($handle input)
                                              ($handle target)
                                              ($handle grad-output)
                                              ($handle grad-input)
                                              (if size-average 1 0)
                                              1))
(defmethod nn-mse-criterion-update-grad-input ((input tensor.double) (target tensor.double)
                                               (grad-output tensor.double)
                                               (grad-input tensor.double) size-average)
  (thnn-double-mse-criterion-update-grad-input (defstate)
                                               ($handle input)
                                               ($handle target)
                                               ($handle grad-output)
                                               ($handle grad-input)
                                               (if size-average 1 0)
                                               1))

(defgeneric nn-margin-criterion-update-output (input target output size-average margin))
(defmethod nn-margin-criterion-update-output ((input tensor.float) (output tensor.float)
                                              (target tensor.float)
                                              size-average margin)
  (thnn-float-margin-criterion-update-output (defstate) ($handle input)
                                             ($handle target) ($handle output)
                                             (if size-average 1 0)
                                             (coerce margin 'double-float)))
(defmethod nn-margin-criterion-update-output ((input tensor.double) (output tensor.double)
                                              (target tensor.double)
                                              size-average margin)
  (thnn-double-margin-criterion-update-output (defstate) ($handle input)
                                              ($handle target) ($handle output)
                                              (if size-average 1 0)
                                              (coerce margin 'double-float)))

(defgeneric nn-margin-criterion-update-grad-input (input target grad-input size-average margin))
(defmethod nn-margin-criterion-update-grad-input ((input tensor.float) (target tensor.float)
                                                  (grad-input tensor.float)
                                                  size-average margin)
  (thnn-float-margin-criterion-update-grad-input (defstate) ($handle input)
                                                 ($handle target)
                                                 ($handle grad-input)
                                                 (if size-average 1 0)
                                                 (coerce margin 'double-float)))
(defmethod nn-margin-criterion-update-grad-input ((input tensor.double) (target tensor.double)
                                                  (grad-input tensor.double)
                                                  size-average margin)
  (thnn-double-margin-criterion-update-grad-input (defstate) ($handle input)
                                                  ($handle target)
                                                  ($handle grad-input)
                                                  (if size-average 1 0)
                                                  (coerce margin 'double-float)))

(defgeneric nn-multi-label-margin-criterion-update-output (input target output is-target
                                                           size-average))
(defmethod nn-multi-label-margin-criterion-update-output ((input tensor.float)
                                                          (target tensor.float)
                                                          (output tensor.float)
                                                          (is-target tensor.float)
                                                          size-average)
  (thnn-float-multi-label-margin-criterion-update-output (defstate)
                                                         ($handle input)
                                                         ($handle target)
                                                         ($handle output)
                                                         ($handle is-target)
                                                         (if size-average 1 0)
                                                         1))
(defmethod nn-multi-label-margin-criterion-update-output ((input tensor.double)
                                                          (target tensor.double)
                                                          (output tensor.double)
                                                          (is-target tensor.double)
                                                          size-average)
  (thnn-double-multi-label-margin-criterion-update-output (defstate)
                                                          ($handle input)
                                                          ($handle target)
                                                          ($handle output)
                                                          ($handle is-target)
                                                          (if size-average 1 0)
                                                          1))

(defgeneric nn-multi-label-margin-criterion-update-grad-input (input target grad-output
                                                               grad-input
                                                               is-target size-average))
(defmethod nn-multi-label-margin-criterion-update-grad-input ((input tensor.float)
                                                              (target tensor.float)
                                                              (grad-output tensor.float)
                                                              (grad-input tensor.float)
                                                              (is-target tensor.float)
                                                              size-average)
  (thnn-float-multi-label-margin-criterion-update-grad-input (defstate)
                                                             ($handle input)
                                                             ($handle target)
                                                             ($handle grad-output)
                                                             ($handle grad-input)
                                                             ($handle is-target)
                                                             (if size-average 1 0)
                                                             1))
(defmethod nn-multi-label-margin-criterion-update-grad-input ((input tensor.double)
                                                              (target tensor.double)
                                                              (grad-output tensor.double)
                                                              (grad-input tensor.double)
                                                              (is-target tensor.double)
                                                              size-average)
  (thnn-double-multi-label-margin-criterion-update-grad-input (defstate)
                                                              ($handle input)
                                                              ($handle target)
                                                              ($handle grad-output)
                                                              ($handle grad-input)
                                                              ($handle is-target)
                                                              (if size-average 1 0)
                                                              1))

(defgeneric nn-multi-margin-criterion-update-output (input target output size-average p
                                                     weights margin))
(defmethod nn-multi-margin-criterion-update-output ((input tensor.float) (target tensor.float)
                                                    (output tensor.float) size-average p
                                                    (weights tensor.float) margin)
  (thnn-float-multi-margin-criterion-update-output (defstate)
                                                   ($handle input)
                                                   ($handle target)
                                                   ($handle output)
                                                   (if size-average 1 0)
                                                   p
                                                   ($handle weights)
                                                   (coerce margin 'double-float)
                                                   1))
(defmethod nn-multi-margin-criterion-update-output ((input tensor.double) (target tensor.double)
                                                    (output tensor.double) size-average p
                                                    (weights tensor.double) margin)
  (thnn-double-multi-margin-criterion-update-output (defstate)
                                                    ($handle input)
                                                    ($handle target)
                                                    ($handle output)
                                                    (if size-average 1 0)
                                                    p
                                                    ($handle weights)
                                                    (coerce margin 'double-float)
                                                    1))

(defgeneric nn-multi-margin-criterion-update-grad-input (input target grad-output
                                                         grad-input size-average
                                                         p weights margin))
(defmethod nn-multi-margin-criterion-update-grad-input ((input tensor.float)
                                                        (target tensor.float)
                                                        (grad-output tensor.float)
                                                        (grad-input tensor.float)
                                                        size-average p
                                                        (weights tensor.float)
                                                        margin)
  (thnn-float-multi-margin-criterion-update-grad-input (defstate)
                                                       ($handle input)
                                                       ($handle target)
                                                       ($handle grad-output)
                                                       ($handle grad-input)
                                                       (if size-average 1 0)
                                                       p
                                                       ($handle weights)
                                                       (coerce margin 'double-float)
                                                       1))
(defmethod nn-multi-margin-criterion-update-grad-input ((input tensor.double)
                                                        (target tensor.double)
                                                        (grad-output tensor.double)
                                                        (grad-input tensor.double)
                                                        size-average p
                                                        (weights tensor.double)
                                                        margin)
  (thnn-double-multi-margin-criterion-update-grad-input (defstate)
                                                        ($handle input)
                                                        ($handle target)
                                                        ($handle grad-output)
                                                        ($handle grad-input)
                                                        (if size-average 1 0)
                                                        p
                                                        ($handle weights)
                                                        (coerce margin 'double-float)
                                                        1))

(defgeneric nn-p-relu-update-output (input output weight))
(defmethod nn-p-relu-update-output ((input tensor.float) (output tensor.float)
                                    (weight tensor.float))
  (thnn-float-p-relu-update-output (defstate) ($handle input)
                                   ($handle output) ($handle weight)))
(defmethod nn-p-relu-update-output ((input tensor.double) (output tensor.double)
                                    (weight tensor.double))
  (thnn-double-p-relu-update-output (defstate) ($handle input)
                                    ($handle output) ($handle weight)))

(defgeneric nn-p-relu-update-grad-input (input grad-output grad-input weight))
(defmethod nn-p-relu-update-grad-input ((input tensor.float) (grad-output tensor.float)
                                        (grad-input tensor.float) (weight tensor.float))
  (thnn-float-p-relu-update-grad-input (defstate) ($handle input)
                                       ($handle grad-output)
                                       ($handle grad-input)
                                       ($handle weight)))
(defmethod nn-p-relu-update-grad-input ((input tensor.double) (grad-output tensor.double)
                                        (grad-input tensor.double) (weight tensor.double))
  (thnn-double-p-relu-update-grad-input (defstate) ($handle input)
                                        ($handle grad-output)
                                        ($handle grad-input)
                                        ($handle weight)))

(defgeneric nn-p-relu-acc-grad-parameters (input grad-output grad-input weight grad-weight
                                           scale))
(defmethod nn-p-relu-acc-grad-parameters ((input tensor.float) (grad-output tensor.float)
                                          (grad-input tensor.float) (weight tensor.float)
                                          (grad-weight tensor.float)
                                          scale)
  (thnn-float-p-relu-acc-grad-parameters (defstate)
                                         ($handle input) ($handle grad-output)
                                         ($handle grad-input) ($handle weight)
                                         ($handle grad-weight)
                                         (coerce scale 'double-float)))
(defmethod nn-p-relu-acc-grad-parameters ((input tensor.double) (grad-output tensor.double)
                                          (grad-input tensor.double) (weight tensor.double)
                                          (grad-weight tensor.double)
                                          scale)
  (thnn-double-p-relu-acc-grad-parameters (defstate)
                                          ($handle input) ($handle grad-output)
                                          ($handle grad-input) ($handle weight)
                                          ($handle grad-weight)
                                          (coerce scale 'double-float)))

(defgeneric nn-r-relu-update-output (input output noise lower upper train in-place generator))
(defmethod nn-r-relu-update-output ((input tensor.float) (output tensor.float)
                                    (noise tensor.float) lower upper train in-place
                                    (generator generator))
  (thnn-float-r-relu-update-output (defstate) ($handle input) ($handle output)
                                   ($handle noise)
                                   (coerce lower 'double-float) (coerce upper 'double-float)
                                   (if train 1 0) (if in-place 1)
                                   ($handle generator)))
(defmethod nn-r-relu-update-output ((input tensor.double) (output tensor.double)
                                    (noise tensor.double) lower upper train in-place
                                    (generator generator))
  (thnn-double-r-relu-update-output (defstate) ($handle input) ($handle output)
                                    ($handle noise)
                                    (coerce lower 'double-float) (coerce upper 'double-float)
                                    (if train 1 0) (if in-place 1)
                                    ($handle generator)))

(defgeneric nn-r-relu-update-grad-input (input grad-output grad-input noise lower upper train
                                         in-place))
(defmethod nn-r-relu-update-grad-input ((input tensor.float) (grad-output tensor.float)
                                        (grad-input tensor.float) (noise tensor.float)
                                        lower upper train in-place)
  (thnn-float-r-relu-update-grad-input (defstate) ($handle input)
                                       ($handle grad-output)
                                       ($handle grad-input)
                                       ($handle noise)
                                       (coerce lower 'double-float)
                                       (coerce upper 'double-float)
                                       (if train 1 0)
                                       (if in-place 1 0)))
(defmethod nn-r-relu-update-grad-input ((input tensor.double) (grad-output tensor.double)
                                        (grad-input tensor.double) (noise tensor.double)
                                        lower upper train in-place)
  (thnn-double-r-relu-update-grad-input (defstate) ($handle input)
                                        ($handle grad-output)
                                        ($handle grad-input)
                                        ($handle noise)
                                        (coerce lower 'double-float)
                                        (coerce upper 'double-float)
                                        (if train 1 0)
                                        (if in-place 1 0)))

(defgeneric nn-sigmoid-update-output (input output))
(defmethod nn-sigmoid-update-output ((input tensor.float) (output tensor.float))
  (thnn-float-sigmoid-update-output (defstate) ($handle input) ($handle output)))
(defmethod nn-sigmoid-update-output ((input tensor.double) (output tensor.double))
  (thnn-double-sigmoid-update-output (defstate) ($handle input) ($handle output)))

(defgeneric nn-sigmoid-update-grad-input (grad-output grad-input output))
(defmethod nn-sigmoid-update-grad-input ((grad-output tensor.float)
                                         (grad-input tensor.float) (output tensor.float))
  (thnn-float-sigmoid-update-grad-input (defstate)
                                        ($handle grad-output)
                                        ($handle grad-input)
                                        ($handle output)))
(defmethod nn-sigmoid-update-grad-input ((grad-output tensor.double)
                                         (grad-input tensor.double) (output tensor.double))
  (thnn-double-sigmoid-update-grad-input (defstate)
                                         ($handle grad-output)
                                         ($handle grad-input)
                                         ($handle output)))

(defgeneric nn-smooth-l1-criterion-update-output (input target output size-average))
(defmethod nn-smooth-l1-criterion-update-output ((input tensor.float) (target tensor.float)
                                                 (output tensor.float) size-average)
  (thnn-float-smooth-l1-criterion-update-output (defstate) ($handle input)
                                                ($handle target)
                                                ($handle output)
                                                (if size-average 1 0)
                                                1))
(defmethod nn-smooth-l1-criterion-update-output ((input tensor.double) (target tensor.double)
                                                 (output tensor.double) size-average)
  (thnn-double-smooth-l1-criterion-update-output (defstate) ($handle input)
                                                 ($handle target)
                                                 ($handle output)
                                                 (if size-average 1 0)
                                                 1))

(defgeneric nn-smooth-l1-criterion-update-grad-input (input target grad-output grad-input
                                                      size-average))
(defmethod nn-smooth-l1-criterion-update-grad-input ((input tensor.float) (target tensor.float)
                                                     (grad-output tensor.float)
                                                     (grad-input tensor.float)
                                                     size-average)
  (thnn-float-smooth-l1-criterion-update-grad-input (defstate)
                                                    ($handle input)
                                                    ($handle target)
                                                    ($handle grad-output)
                                                    ($handle grad-input)
                                                    (if size-average 1 0)
                                                    1))
(defmethod nn-smooth-l1-criterion-update-grad-input ((input tensor.double) (target tensor.double)
                                                     (grad-output tensor.double)
                                                     (grad-input tensor.double)
                                                     size-average)
  (thnn-double-smooth-l1-criterion-update-grad-input (defstate)
                                                     ($handle input)
                                                     ($handle target)
                                                     ($handle grad-output)
                                                     ($handle grad-input)
                                                     (if size-average 1 0)
                                                     1))

(defgeneric nn-softmargin-criterion-update-output (input target output size-average))
(defmethod nn-softmargin-criterion-update-output ((input tensor.float) (target tensor.float)
                                                  (output tensor.float) size-average)
  (thnn-float-softmargin-criterion-update-output (defstate) ($handle input)
                                                 ($handle target)
                                                 ($handle output)
                                                 (if size-average 1 0)
                                                 1))
(defmethod nn-softmargin-criterion-update-output ((input tensor.double) (target tensor.double)
                                                  (output tensor.double) size-average)
  (thnn-double-softmargin-criterion-update-output (defstate) ($handle input)
                                                  ($handle target)
                                                  ($handle output)
                                                  (if size-average 1 0)
                                                  1))

(defgeneric nn-softmargin-criterion-update-grad-input (input target grad-output grad-input
                                                       size-average))
(defmethod nn-softmargin-criterion-update-grad-input ((input tensor.float) (target tensor.float)
                                                      (grad-output tensor.float)
                                                      (grad-input tensor.float) size-average)
  (thnn-float-softmargin-criterion-update-grad-input (defstate) ($handle input)
                                                     ($handle target)
                                                     ($handle grad-output)
                                                     ($handle grad-input)
                                                     (if size-average 1 0)
                                                     1))
(defmethod nn-softmargin-criterion-update-grad-input ((input tensor.double) (target tensor.double)
                                                      (grad-output tensor.double)
                                                      (grad-input tensor.double) size-average)
  (thnn-double-softmargin-criterion-update-grad-input (defstate) ($handle input)
                                                      ($handle target)
                                                      ($handle grad-output)
                                                      ($handle grad-input)
                                                      (if size-average 1 0)
                                                      1))

(defgeneric nn-softmax-update-output (input output))
(defmethod nn-softmax-update-output ((input tensor.float) (output tensor.float))
  (thnn-float-softmax-update-output (defstate)
                                    ($handle input)
                                    ($handle output)))
(defmethod nn-softmax-update-output ((input tensor.double) (output tensor.double))
  (thnn-double-softmax-update-output (defstate)
                                     ($handle input)
                                     ($handle output)))

(defgeneric nn-softmax-update-grad-input (input grad-output grad-input output))
(defmethod nn-softmax-update-grad-input ((input tensor.float) (grad-output tensor.float)
                                         (grad-input tensor.float) (output tensor.float))
  (thnn-float-softmax-update-grad-input (defstate) ($handle input)
                                        ($handle grad-output) ($handle grad-input)
                                        ($handle output)))
(defmethod nn-softmax-update-grad-input ((input tensor.double) (grad-output tensor.double)
                                         (grad-input tensor.double) (output tensor.double))
  (thnn-double-softmax-update-grad-input (defstate) ($handle input)
                                         ($handle grad-output) ($handle grad-input)
                                         ($handle output)))

(defgeneric nn-softplus-update-output (input output beta threshold))
(defmethod nn-softplus-update-output ((input tensor.float) (output tensor.float) beta threshold)
  (thnn-float-softplus-update-output (defstate) ($handle input) ($handle output)
                                     (coerce beta 'double-float) (coerce threshold 'double-float)))
(defmethod nn-softplus-update-output ((input tensor.double) (output tensor.double) beta threshold)
  (thnn-double-softplus-update-output (defstate) ($handle input) ($handle output)
                                      (coerce beta 'double-float) (coerce threshold 'double-float)))

(defgeneric nn-softplus-update-grad-input (input grad-output grad-input output beta threshold))
(defmethod nn-softplus-update-grad-input ((input tensor.float) (grad-output tensor.float)
                                          (grad-input tensor.float) (output tensor.float)
                                          beta threshold)
  (thnn-float-softplus-update-grad-input (defstate)
                                         ($handle input) ($handle grad-output)
                                         ($handle grad-input) ($handle output)
                                         (coerce beta 'double-float)
                                         (coerce threshold 'double-float)))
(defmethod nn-softplus-update-grad-input ((input tensor.double) (grad-output tensor.double)
                                          (grad-input tensor.double) (output tensor.double)
                                          beta threshold)
  (thnn-double-softplus-update-grad-input (defstate)
                                          ($handle input) ($handle grad-output)
                                          ($handle grad-input) ($handle output)
                                          (coerce beta 'double-float)
                                          (coerce threshold 'double-float)))

(defgeneric nn-softshrink-update-output (input output lam))
(defmethod nn-softshrink-update-output ((input tensor.float) (output tensor.float) lam)
  (thnn-float-softshrink-update-output (defstate) ($handle input) ($handle output)
                                       (coerce lam 'double-float)))
(defmethod nn-softshrink-update-output ((input tensor.double) (output tensor.double) lam)
  (thnn-double-softshrink-update-output (defstate) ($handle input) ($handle output)
                                        (coerce lam 'double-float)))

(defgeneric nn-softshrink-update-grad-input (input grad-output grad-input lam))
(defmethod nn-softshrink-update-grad-input ((input tensor.float) (grad-output tensor.float)
                                            (grad-input tensor.float) lam)
  (thnn-float-softshrink-update-grad-input (defstate) ($handle input)
                                           ($handle grad-output) ($handle grad-input)
                                           (coerce lam 'double-float)))
(defmethod nn-softshrink-update-grad-input ((input tensor.double) (grad-output tensor.double)
                                            (grad-input tensor.double) lam)
  (thnn-double-softshrink-update-grad-input (defstate) ($handle input)
                                            ($handle grad-output) ($handle grad-input)
                                            (coerce lam 'double-float)))

(defgeneric nn-sparse-linear-update-output (input output weight bias))
(defmethod nn-sparse-linear-update-output ((input tensor.float) (output tensor.float)
                                           (weight tensor.float) bias)
  (thnn-float-sparse-linear-update-output (defstate) ($handle input)
                                          ($handle output)
                                          ($handle weight)
                                          (if bias ($handle bias) (nilptr))))
(defmethod nn-sparse-linear-update-output ((input tensor.double) (output tensor.double)
                                           (weight tensor.double) bias)
  (thnn-double-sparse-linear-update-output (defstate) ($handle input)
                                           ($handle output)
                                           ($handle weight)
                                           (if bias ($handle bias) (nilptr))))

(defgeneric nn-sparse-linear-acc-grad-parameters (input grad-output grad-weight grad-bias
                                                  weight bias weight-decay scale))
(defmethod nn-sparse-linear-acc-grad-parameters ((input tensor.float)
                                                 (grad-output tensor.float)
                                                 (grad-weight tensor.float)
                                                 grad-bias
                                                 (weight tensor.float)
                                                 bias
                                                 weight-decay scale)
  (thnn-float-sparse-linear-acc-grad-parameters (defstate) ($handle input)
                                                ($handle grad-output)
                                                ($handle grad-weight)
                                                (if grad-bias ($handle grad-bias) (nilptr))
                                                ($handle weight)
                                                (if bias ($handle bias) (nilptr))
                                                (coerce weight-decay 'double-float)
                                                (coerce scale 'double-float)))
(defmethod nn-sparse-linear-acc-grad-parameters ((input tensor.double)
                                                 (grad-output tensor.double)
                                                 (grad-weight tensor.double)
                                                 grad-bias
                                                 (weight tensor.double)
                                                 bias
                                                 weight-decay scale)
  (thnn-double-sparse-linear-acc-grad-parameters (defstate) ($handle input)
                                                 ($handle grad-output)
                                                 ($handle grad-weight)
                                                 (if grad-bias ($handle grad-bias) (nilptr))
                                                 ($handle weight)
                                                 (if bias ($handle bias) (nilptr))
                                                 (coerce weight-decay 'double-float)
                                                 (coerce scale 'double-float)))

(defgeneric nn-sparse-linear-zero-grad-parameters (grad-weight grad-bias last-input))
(defmethod nn-sparse-linear-zero-grad-parameters ((grad-weight tensor.float) grad-bias
                                                  (last-input tensor.float))
  (thnn-float-sparse-linear-zero-grad-parameters (defstate) ($handle grad-weight)
                                                 (if grad-bias
                                                     ($handle grad-bias)
                                                     (nilptr))
                                                 ($handle last-input)))
(defmethod nn-sparse-linear-zero-grad-parameters ((grad-weight tensor.double) grad-bias
                                                  (last-input tensor.double))
  (thnn-double-sparse-linear-zero-grad-parameters (defstate) ($handle grad-weight)
                                                  (if grad-bias
                                                      ($handle grad-bias)
                                                      (nilptr))
                                                  ($handle last-input)))

(defgeneric nn-sparse-linear-update-parameters (weight bias grad-weight grad-bias last-input
                                                learning-rate))
(defmethod nn-sparse-linear-update-parameters ((weight tensor.float) bias
                                               (grad-weight tensor.float) grad-bias
                                               (last-input tensor.float)
                                               learning-rate)
  (thnn-float-sparse-linear-update-parameters (defstate) ($handle weight)
                                              (if bias ($handle bias) (nilptr))
                                              ($handle grad-weight)
                                              (if grad-bias ($handle grad-bias) (nilptr))
                                              ($handle last-input)
                                              (coerce learning-rate 'double-float)))

(defgeneric nn-sparse-linear-legacy-update-output (input output weight bias))
(defmethod nn-sparse-linear-legacy-update-output ((input tensor.float) (output tensor.float)
                                                  (weight tensor.float) bias)
  (thnn-float-sparse-linear-legacy-update-output (defstate) ($handle input)
                                                 ($handle output)
                                                 ($handle weight)
                                                 (if bias ($handle bias) (nilptr))))
(defmethod nn-sparse-linear-legacy-update-output ((input tensor.double) (output tensor.double)
                                                  (weight tensor.double) bias)
  (thnn-double-sparse-linear-legacy-update-output (defstate) ($handle input)
                                                  ($handle output)
                                                  ($handle weight)
                                                  (if bias ($handle bias) (nilptr))))

(defgeneric nn-sparse-linear-legacy-acc-grad-parameters (input grad-output grad-weight
                                                         grad-bias weight bias weight-decay
                                                         scale))
(defmethod nn-sparse-linear-legacy-acc-grad-parameters ((input tensor.float)
                                                        (grad-output tensor.float)
                                                        (grad-weight tensor.float)
                                                        grad-bias (weight tensor.float)
                                                        bias weight-decay scale)
  (thnn-float-sparse-linear-legacy-acc-grad-parameters (defstate) ($handle input)
                                                       ($handle grad-output)
                                                       ($handle grad-weight)
                                                       (if grad-bias
                                                           ($handle grad-bias)
                                                           (nilptr))
                                                       ($handle weight)
                                                       (if bias ($handle bias) (nilptr))
                                                       (coerce weight-decay 'double-float)
                                                       (coerce scale 'double-float)))
(defmethod nn-sparse-linear-legacy-acc-grad-parameters ((input tensor.double)
                                                        (grad-output tensor.double)
                                                        (grad-weight tensor.double)
                                                        grad-bias (weight tensor.double)
                                                        bias weight-decay scale)
  (thnn-double-sparse-linear-legacy-acc-grad-parameters (defstate) ($handle input)
                                                        ($handle grad-output)
                                                        ($handle grad-weight)
                                                        (if grad-bias
                                                            ($handle grad-bias)
                                                            (nilptr))
                                                        ($handle weight)
                                                        (if bias ($handle bias) (nilptr))
                                                        (coerce weight-decay 'double-float)
                                                        (coerce scale 'double-float)))

(defgeneric nn-sparse-linear-legacy-zero-parameters (grad-weight grad-bias last-input))
(defmethod nn-sparse-linear-legacy-zero-parameters ((grad-weight tensor.float) grad-bias
                                                    (last-input tensor.float))
  (thnn-float-sparse-linear-legacy-zero-grad-parameters (defstate) ($handle grad-weight)
                                                        (if grad-bias
                                                            ($handle grad-bias)
                                                            (nilptr))
                                                        ($handle last-input)))
(defmethod nn-sparse-linear-legacy-zero-parameters ((grad-weight tensor.double) grad-bias
                                                    (last-input tensor.double))
  (thnn-double-sparse-linear-legacy-zero-grad-parameters (defstate) ($handle grad-weight)
                                                         (if grad-bias
                                                             ($handle grad-bias)
                                                             (nilptr))
                                                         ($handle last-input)))

(defgeneric nn-sparse-linear-legacy-update-parameters (weight bias grad-weight grad-bias
                                                       last-input learning-rate))
(defmethod nn-sparse-linear-legacy-update-parameters ((weight tensor.float) bias
                                                      (grad-weight tensor.float) grad-bias
                                                      (last-input tensor.float) learning-rate)
  (thnn-float-sparse-linear-legacy-update-parameters (defstate) ($handle weight)
                                                     (if bias ($handle bias) (nilptr))
                                                     ($handle grad-weight)
                                                     (if grad-bias
                                                         ($handle grad-bias)
                                                         (nilptr))
                                                     ($handle last-input)
                                                     (coerce learning-rate 'double-float)))
(defmethod nn-sparse-linear-legacy-update-parameters ((weight tensor.double) bias
                                                      (grad-weight tensor.double) grad-bias
                                                      (last-input tensor.double) learning-rate)
  (thnn-double-sparse-linear-legacy-update-parameters (defstate) ($handle weight)
                                                      (if bias ($handle bias) (nilptr))
                                                      ($handle grad-weight)
                                                      (if grad-bias
                                                          ($handle grad-bias)
                                                          (nilptr))
                                                      ($handle last-input)
                                                      (coerce learning-rate 'double-float)))

(defgeneric nn-spatial-adaptive-average-pooling-update-output (input output owidth oheight))
(defmethod nn-spatial-adaptive-average-pooling-update-output ((input tensor.float)
                                                              (output tensor.float)
                                                              ow oh)
  (thnn-float-spatial-adaptive-average-pooling-update-output (defstate) ($handle input)
                                                             ($handle output) ow oh))
(defmethod nn-spatial-adaptive-average-pooling-update-output ((input tensor.double)
                                                              (output tensor.double)
                                                              ow oh)
  (thnn-double-spatial-adaptive-average-pooling-update-output (defstate) ($handle input)
                                                              ($handle output) ow oh))

(defgeneric nn-spatial-adaptive-average-pooling-update-grad-input (input grad-output grad-input))
(defmethod nn-spatial-adaptive-average-pooling-update-grad-input ((input tensor.float)
                                                                  (grad-output tensor.float)
                                                                  (grad-input tensor.float))
  (thnn-float-spatial-adaptive-average-pooling-update-grad-input (defstate)
                                                                 ($handle input)
                                                                 ($handle grad-output)
                                                                 ($handle grad-input)))
(defmethod nn-spatial-adaptive-average-pooling-update-grad-input ((input tensor.double)
                                                                  (grad-output tensor.double)
                                                                  (grad-input tensor.double))
  (thnn-double-spatial-adaptive-average-pooling-update-grad-input (defstate)
                                                                  ($handle input)
                                                                  ($handle grad-output)
                                                                  ($handle grad-input)))

(defgeneric nn-spatial-adaptive-max-pooling-update-output (input output indices ow oh))
(defmethod nn-spatial-adaptive-max-pooling-update-output ((input tensor.float)
                                                          (output tensor.float)
                                                          (indices tensor.long)
                                                          ow oh)
  (thnn-float-spatial-adaptive-max-pooling-update-output (defstate) ($handle input)
                                                         ($handle output)
                                                         ($handle indices)
                                                         ow oh))
(defmethod nn-spatial-adaptive-max-pooling-update-output ((input tensor.double)
                                                          (output tensor.double)
                                                          (indices tensor.long)
                                                          ow oh)
  (thnn-double-spatial-adaptive-max-pooling-update-output (defstate) ($handle input)
                                                          ($handle output)
                                                          ($handle indices)
                                                          ow oh))

(defgeneric nn-spatial-adaptive-max-pooling-update-grad-input (input grad-output grad-input
                                                               indices))
(defmethod nn-spatial-adaptive-max-pooling-update-grad-input ((input tensor.float)
                                                              (grad-output tensor.float)
                                                              (grad-input tensor.float)
                                                              (indices tensor.long))
  (thnn-float-spatial-adaptive-max-pooling-update-grad-input (defstate)
                                                             ($handle input)
                                                             ($handle grad-output)
                                                             ($handle grad-input)
                                                             ($handle indices)))
(defmethod nn-spatial-adaptive-max-pooling-update-grad-input ((input tensor.double)
                                                              (grad-output tensor.double)
                                                              (grad-input tensor.double)
                                                              (indices tensor.long))
  (thnn-double-spatial-adaptive-max-pooling-update-grad-input (defstate)
                                                              ($handle input)
                                                              ($handle grad-output)
                                                              ($handle grad-input)
                                                              ($handle indices)))

(defgeneric nn-spatial-average-pooling-update-output (input output kw kh dw dh padw padh
                                                      ceil-mode count-include-pad))
(defmethod nn-spatial-average-pooling-update-output ((input tensor.float) (output tensor.float)
                                                     kw kh dw dh pw ph ceil-mode
                                                     count-include-pad)
  (thnn-float-spatial-average-pooling-update-output (defstate) ($handle input)
                                                    ($handle output) kw kh dw dh pw ph
                                                    (if ceil-mode 1 0)
                                                    (if count-include-pad 1 0)))
(defmethod nn-spatial-average-pooling-update-output ((input tensor.double) (output tensor.double)
                                                     kw kh dw dh pw ph ceil-mode
                                                     count-include-pad)
  (thnn-double-spatial-average-pooling-update-output (defstate) ($handle input)
                                                     ($handle output) kw kh dw dh pw ph
                                                     (if ceil-mode 1 0)
                                                     (if count-include-pad 1 0)))

(defgeneric nn-spatial-average-pooling-update-grad-input (input grad-output grad-input
                                                          kw kh dw dh padw padh ceil-mode
                                                          count-include-pad))
(defmethod nn-spatial-average-pooling-update-grad-input ((input tensor.float)
                                                         (grad-output tensor.float)
                                                         (grad-input tensor.float)
                                                         kw kh dw dh pw ph ceil-mode
                                                         count-include-pad)
  (thnn-float-spatial-average-pooling-update-grad-input (defstate) ($handle input)
                                                        ($handle grad-output)
                                                        ($handle grad-input)
                                                        kw kh dw dh pw ph
                                                        (if ceil-mode 1 0)
                                                        (if count-include-pad 1 0)))
(defmethod nn-spatial-average-pooling-update-grad-input ((input tensor.double)
                                                         (grad-output tensor.double)
                                                         (grad-input tensor.double)
                                                         kw kh dw dh pw ph ceil-mode
                                                         count-include-pad)
  (thnn-double-spatial-average-pooling-update-grad-input (defstate) ($handle input)
                                                         ($handle grad-output)
                                                         ($handle grad-input)
                                                         kw kh dw dh pw ph
                                                         (if ceil-mode 1 0)
                                                         (if count-include-pad 1 0)))

(defgeneric nn-spatial-class-nll-criterion-update-output (input target output size-average
                                                          weights total-weight ignore-index))
(defmethod nn-spatial-class-nll-criterion-update-output ((input tensor.float)
                                                         (target tensor.float)
                                                         (output tensor.float)
                                                         size-average
                                                         (weights tensor.float)
                                                         (total-weight tensor.float)
                                                         ignore-index)
  (thnn-float-spatial-class-nll-criterion-update-output (defstate) ($handle input)
                                                        ($handle target)
                                                        ($handle output)
                                                        (if size-average 1 0)
                                                        ($handle weights)
                                                        ($handle total-weight)
                                                        ignore-index 1))
(defmethod nn-spatial-class-nll-criterion-update-output ((input tensor.double)
                                                         (target tensor.double)
                                                         (output tensor.double)
                                                         size-average
                                                         (weights tensor.double)
                                                         (total-weight tensor.double)
                                                         ignore-index)
  (thnn-double-spatial-class-nll-criterion-update-output (defstate) ($handle input)
                                                         ($handle target)
                                                         ($handle output)
                                                         (if size-average 1 0)
                                                         ($handle weights)
                                                         ($handle total-weight)
                                                         ignore-index 1))

(defgeneric nn-spatial-class-nll-criterion-update-grad-input (input target grad-output grad-input
                                                              size-average weight total-weight
                                                              ignore-index))
(defmethod nn-spatial-class-nll-criterion-update-grad-input ((input tensor.float)
                                                             (target tensor.float)
                                                             (grad-output tensor.float)
                                                             (grad-input tensor.float)
                                                             size-average
                                                             (weight tensor.float)
                                                             (total-weight tensor.float)
                                                             ignore-index)
  (thnn-float-spatial-class-nll-criterion-update-grad-input (defstate)
                                                            ($handle input)
                                                            ($handle target)
                                                            ($handle grad-output)
                                                            ($handle grad-input)
                                                            (if size-average 1 0)
                                                            ($handle weight)
                                                            ($handle total-weight)
                                                            ignore-index 1))
(defmethod nn-spatial-class-nll-criterion-update-grad-input ((input tensor.double)
                                                             (target tensor.double)
                                                             (grad-output tensor.double)
                                                             (grad-input tensor.double)
                                                             size-average
                                                             (weight tensor.double)
                                                             (total-weight tensor.double)
                                                             ignore-index)
  (thnn-double-spatial-class-nll-criterion-update-grad-input (defstate)
                                                             ($handle input)
                                                             ($handle target)
                                                             ($handle grad-output)
                                                             ($handle grad-input)
                                                             (if size-average 1 0)
                                                             ($handle weight)
                                                             ($handle total-weight)
                                                             ignore-index 1))

(defgeneric nn-spatial-convolution-local-update-output (input output weight bias finput
                                                        fgrad-input kw kh dw dh padw padh
                                                        input-width input-height
                                                        output-width output-height))
(defmethod nn-spatial-convolution-local-update-output ((input tensor.float)
                                                       (output tensor.float)
                                                       (weight tensor.float)
                                                       bias
                                                       (finput tensor.float)
                                                       (fgrad-input tensor.float)
                                                       kw kh dw dh pw ph
                                                       iw ih ow oh)
  (thnn-float-spatial-convolution-local-update-output (defstate) ($handle input)
                                                      ($handle output)
                                                      ($handle weight)
                                                      (if bias ($handle bias) (nilptr))
                                                      ($handle finput)
                                                      ($handle fgrad-input)
                                                      kw kh dw dh pw ph iw ih ow oh))
(defmethod nn-spatial-convolution-local-update-output ((input tensor.double)
                                                       (output tensor.double)
                                                       (weight tensor.double)
                                                       bias
                                                       (finput tensor.double)
                                                       (fgrad-input tensor.double)
                                                       kw kh dw dh pw ph
                                                       iw ih ow oh)
  (thnn-double-spatial-convolution-local-update-output (defstate) ($handle input)
                                                       ($handle output)
                                                       ($handle weight)
                                                       (if bias ($handle bias) (nilptr))
                                                       ($handle finput)
                                                       ($handle fgrad-input)
                                                       kw kh dw dh pw ph iw ih ow oh))

(defgeneric nn-spatial-convolution-local-update-grad-input (input grad-output grad-input
                                                            weight finput fgrad-input
                                                            kw kh dw dh padw padh
                                                            input-width input-height
                                                            output-width output-height))
(defmethod nn-spatial-convolution-local-update-grad-input ((input tensor.float)
                                                           (grad-output tensor.float)
                                                           (grad-input tensor.float)
                                                           (weight tensor.float)
                                                           (finput tensor.float)
                                                           (fgrad-input tensor.float)
                                                           kw kh dw dh pw ph iw ih ow oh)
  (thnn-float-spatial-convolution-local-update-grad-input (defstate) ($handle input)
                                                          ($handle grad-output)
                                                          ($handle grad-input)
                                                          ($handle weight)
                                                          ($handle finput)
                                                          ($handle fgrad-input)
                                                          kw kh dw dh pw ph iw ih ow oh))
(defmethod nn-spatial-convolution-local-update-grad-input ((input tensor.double)
                                                           (grad-output tensor.double)
                                                           (grad-input tensor.double)
                                                           (weight tensor.double)
                                                           (finput tensor.double)
                                                           (fgrad-input tensor.double)
                                                           kw kh dw dh pw ph iw ih ow oh)
  (thnn-double-spatial-convolution-local-update-grad-input (defstate) ($handle input)
                                                           ($handle grad-output)
                                                           ($handle grad-input)
                                                           ($handle weight)
                                                           ($handle finput)
                                                           ($handle fgrad-input)
                                                           kw kh dw dh pw ph iw ih ow oh))

(defgeneric nn-spatial-convolution-local-acc-grad-parameters (input grad-output grad-weight
                                                              grad-bias finput fgrad-input
                                                              kw kh dw dh padw padh
                                                              input-width input-height
                                                              output-width output-height
                                                              scale))
(defmethod nn-spatial-convolution-local-acc-grad-parameters ((input tensor.float)
                                                             (grad-output tensor.float)
                                                             (grad-weight tensor.float)
                                                             grad-bias
                                                             (finput tensor.float)
                                                             (fgrad-input tensor.float)
                                                             kw kh dw dh pw ph iw ih ow oh
                                                             scale)
  (thnn-float-spatial-convolution-local-acc-grad-parameters (defstate) ($handle input)
                                                            ($handle grad-output)
                                                            ($handle grad-weight)
                                                            (if grad-bias
                                                                ($handle grad-bias)
                                                                (nilptr))
                                                            ($handle finput)
                                                            ($handle fgrad-input)
                                                            kw kh dw dh pw ph iw ih ow oh
                                                            (coerce scale 'double-float)))
(defmethod nn-spatial-convolution-local-acc-grad-parameters ((input tensor.double)
                                                             (grad-output tensor.double)
                                                             (grad-weight tensor.double)
                                                             grad-bias
                                                             (finput tensor.double)
                                                             (fgrad-input tensor.double)
                                                             kw kh dw dh pw ph iw ih ow oh
                                                             scale)
  (thnn-double-spatial-convolution-local-acc-grad-parameters (defstate) ($handle input)
                                                             ($handle grad-output)
                                                             ($handle grad-weight)
                                                             (if grad-bias
                                                                 ($handle grad-bias)
                                                                 (nilptr))
                                                             ($handle finput)
                                                             ($handle fgrad-input)
                                                             kw kh dw dh pw ph iw ih ow oh
                                                             (coerce scale 'double-float)))

(defgeneric nn-spatial-convolution-mm-update-output (input output weight bias finput
                                                     fgrad-input kw kh dw dh padw padh))
(defmethod nn-spatial-convolution-mm-update-output ((input tensor.float) (output tensor.float)
                                                    (weight tensor.float) bias
                                                    (finput tensor) (fgrad-input tensor)
                                                    kw kh dw dh pw ph)
  (thnn-float-spatial-convolution-mm-update-output (defstate)
                                                   ($handle input)
                                                   ($handle output)
                                                   ($handle weight)
                                                   (if bias ($handle bias) (nilptr))
                                                   ($handle finput)
                                                   ($handle fgrad-input)
                                                   (round kw) (round kh)
                                                   (round dw) (round dh)
                                                   (round pw) (round ph)))
(defmethod nn-spatial-convolution-mm-update-output ((input tensor.double) (output tensor.double)
                                                    (weight tensor.double) bias
                                                    (finput tensor) (fgrad-input tensor)
                                                    kw kh dw dh pw ph)
  (thnn-double-spatial-convolution-mm-update-output (defstate)
                                                    ($handle input)
                                                    ($handle output)
                                                    ($handle weight)
                                                    (if bias ($handle bias) (nilptr))
                                                    ($handle finput)
                                                    ($handle fgrad-input)
                                                    (round kw) (round kh)
                                                    (round dw) (round dh)
                                                    (round pw) (round ph)))
(defgeneric nn-spatial-convolution-mm-update-grad-input (input grad-output grad-input
                                                         weight finput fgrad-input
                                                         kw kh dw dh padw padh))
(defmethod nn-spatial-convolution-mm-update-grad-input ((input tensor.float)
                                                        (grad-output tensor.float)
                                                        (grad-input tensor.float)
                                                        (weight tensor.float)
                                                        (finput tensor) (fgrad-input tensor)
                                                        kw kh dw dh pw ph)
  (thnn-float-spatial-convolution-mm-update-grad-input (defstate)
                                                       ($handle input)
                                                       ($handle grad-output)
                                                       ($handle grad-input)
                                                       ($handle weight)
                                                       ($handle finput)
                                                       ($handle fgrad-input)
                                                       (round kw) (round kh)
                                                       (round dw) (round dh)
                                                       (round pw) (round ph)))
(defmethod nn-spatial-convolution-mm-update-grad-input ((input tensor.double)
                                                        (grad-output tensor.double)
                                                        (grad-input tensor.double)
                                                        (weight tensor.double)
                                                        (finput tensor) (fgrad-input tensor)
                                                        kw kh dw dh pw ph)
  (thnn-double-spatial-convolution-mm-update-grad-input (defstate)
                                                        ($handle input)
                                                        ($handle grad-output)
                                                        ($handle grad-input)
                                                        ($handle weight)
                                                        ($handle finput)
                                                        ($handle fgrad-input)
                                                        (round kw) (round kh)
                                                        (round dw) (round dh)
                                                        (round pw) (round ph)))
(defgeneric nn-spatial-convolution-mm-acc-grad-parameters (input grad-output grad-weight
                                                           grad-bias finput fgrad-input
                                                           kw kh dw dh padw padh scale))
(defmethod nn-spatial-convolution-mm-acc-grad-parameters ((input tensor.float)
                                                          (grad-output tensor.float)
                                                          (grad-weight tensor.float)
                                                          grad-bias
                                                          (finput tensor) (fgrad-input tensor)
                                                          kw kh dw dh pw ph scale)
  (thnn-float-spatial-convolution-mm-acc-grad-parameters (defstate)
                                                         ($handle input)
                                                         ($handle grad-output)
                                                         ($handle grad-weight)
                                                         (if grad-bias ($handle grad-bias) (nilptr))
                                                         ($handle finput)
                                                         ($handle fgrad-input)
                                                         (round kw) (round kh)
                                                         (round dw) (round dh)
                                                         (round pw) (round ph)
                                                         (coerce scale 'double-float)))
(defmethod nn-spatial-convolution-mm-acc-grad-parameters ((input tensor.double)
                                                          (grad-output tensor.double)
                                                          (grad-weight tensor.double)
                                                          grad-bias
                                                          (finput tensor) (fgrad-input tensor)
                                                          kw kh dw dh pw ph scale)
  (thnn-double-spatial-convolution-mm-acc-grad-parameters (defstate)
                                                          ($handle input)
                                                          ($handle grad-output)
                                                          ($handle grad-weight)
                                                          (if grad-bias
                                                              ($handle grad-bias)
                                                              (nilptr))
                                                          ($handle finput)
                                                          ($handle fgrad-input)
                                                          (round kw) (round kh)
                                                          (round dw) (round dh)
                                                          (round pw) (round ph)
                                                          (coerce scale 'double-float)))

(defgeneric nn-spatial-convolution-map-update-output (input output weight bias conn-table
                                                      n-input-plane n-output-plane
                                                      dw dh))
(defmethod nn-spatial-convolution-map-update-output ((input tensor.float) (output tensor.float)
                                                     (weight tensor.float) bias
                                                     (conn-table tensor.float)
                                                     n-input-plane n-output-plane dw dh)
  (thnn-float-spatial-convolution-map-update-output (defstate) ($handle input)
                                                    ($handle output)
                                                    ($handle weight)
                                                    (if bias ($handle bias) (nilptr))
                                                    ($handle conn-table)
                                                    n-input-plane n-output-plane dw dh))
(defmethod nn-spatial-convolution-map-update-output ((input tensor.double) (output tensor.double)
                                                     (weight tensor.double) bias
                                                     (conn-table tensor.double)
                                                     n-input-plane n-output-plane dw dh)
  (thnn-double-spatial-convolution-map-update-output (defstate) ($handle input)
                                                     ($handle output)
                                                     ($handle weight)
                                                     (if bias ($handle bias) (nilptr))
                                                     ($handle conn-table)
                                                     n-input-plane n-output-plane dw dh))

(defgeneric nn-spatial-convolution-map-update-grad-input (input grad-output grad-input weight
                                                          bias conn-table
                                                          n-input-plane n-output-plane dw dh))
(defmethod nn-spatial-convolution-map-update-grad-input ((input tensor.float)
                                                         (grad-output tensor.float)
                                                         (grad-input tensor.float)
                                                         (weight tensor.float)
                                                         bias
                                                         (conn-table tensor.float)
                                                         n-input-plane n-output-plane dw dh)
  (thnn-float-spatial-convolution-map-update-grad-input (defstate) ($handle input)
                                                        ($handle grad-output)
                                                        ($handle grad-input)
                                                        ($handle weight)
                                                        (if bias ($handle bias) (nilptr))
                                                        ($handle conn-table)
                                                        n-input-plane n-output-plane dw dh))
(defmethod nn-spatial-convolution-map-update-grad-input ((input tensor.double)
                                                         (grad-output tensor.double)
                                                         (grad-input tensor.double)
                                                         (weight tensor.double)
                                                         bias
                                                         (conn-table tensor.double)
                                                         n-input-plane n-output-plane dw dh)
  (thnn-double-spatial-convolution-map-update-grad-input (defstate) ($handle input)
                                                         ($handle grad-output)
                                                         ($handle grad-input)
                                                         ($handle weight)
                                                         (if bias ($handle bias) (nilptr))
                                                         ($handle conn-table)
                                                         n-input-plane n-output-plane dw dh))

(defgeneric nn-spatial-convolution-map-acc-grad-parameters (input grad-output grad-weight
                                                            grad-bias conn-table
                                                            n-input-plane n-output-plane
                                                            dw dh scale))
(defmethod nn-spatial-convolution-map-acc-grad-parameters ((input tensor.float)
                                                           (grad-output tensor.float)
                                                           (grad-weight tensor.float)
                                                           grad-bias (conn-table tensor.float)
                                                           n-input-plane n-output-plane
                                                           dw dh scale)
  (thnn-float-spatial-convolution-map-acc-grad-parameters (defstate) ($handle input)
                                                          ($handle grad-output)
                                                          ($handle grad-weight)
                                                          (if grad-bias
                                                              ($handle grad-bias)
                                                              (nilptr))
                                                          ($handle conn-table)
                                                          n-input-plane n-output-plane
                                                          dw dh
                                                          (coerce scale 'double-float)))
(defmethod nn-spatial-convolution-map-acc-grad-parameters ((input tensor.double)
                                                           (grad-output tensor.double)
                                                           (grad-weight tensor.double)
                                                           grad-bias (conn-table tensor.double)
                                                           n-input-plane n-output-plane
                                                           dw dh scale)
  (thnn-double-spatial-convolution-map-acc-grad-parameters (defstate) ($handle input)
                                                           ($handle grad-output)
                                                           ($handle grad-weight)
                                                           (if grad-bias
                                                               ($handle grad-bias)
                                                               (nilptr))
                                                           ($handle conn-table)
                                                           n-input-plane n-output-plane
                                                           dw dh
                                                           (coerce scale 'double-float)))

(defgeneric nn-spatial-depthwise-convolution-update-output (input output weight bias finput
                                                            fgrad-input kw kh dw dh padw padh))
(defmethod nn-spatial-depthwise-convolution-update-output ((input tensor.float)
                                                           (output tensor.float)
                                                           (weight tensor.float)
                                                           bias
                                                           (finput tensor.float)
                                                           (fgrad-input tensor.float)
                                                           kw kh dw dh pw ph)
  (thnn-float-spatial-depthwise-convolution-update-output (mystate) (tensor-handle input)
                                                          (tensor-handle output)
                                                          (tensor-handle weight)
                                                          (if bias (tensor-handle bias) (nilptr))
                                                          (tensor-handle finput)
                                                          (tensor-handle fgrad-input)
                                                          kw kh dw dh pw ph))
(defmethod nn-spatial-depthwise-convolution-update-output ((input tensor.double)
                                                           (output tensor.double)
                                                           (weight tensor.double)
                                                           bias
                                                           (finput tensor.double)
                                                           (fgrad-input tensor.double)
                                                           kw kh dw dh pw ph)
  (thnn-double-spatial-depthwise-convolution-update-output (mystate) (tensor-handle input)
                                                           (tensor-handle output)
                                                           (tensor-handle weight)
                                                           (if bias (tensor-handle bias) (nilptr))
                                                           (tensor-handle finput)
                                                           (tensor-handle fgrad-input)
                                                           kw kh dw dh pw ph))

(defgeneric nn-spatial-depthwise-convolution-update-grad-input (input grad-output grad-input
                                                                weight finput fgrad-input
                                                                kw kh dw dh padw padh))
(defmethod nn-spatial-depthwise-convolution-update-grad-input ((input tensor.float)
                                                               (grad-output tensor.float)
                                                               (grad-input tensor.float)
                                                               (weight tensor.float)
                                                               (finput tensor.float)
                                                               (fgrad-input tensor.float)
                                                               kw kh dw dh pw ph)
  (thnn-float-spatial-depthwise-convolution-update-grad-input (mystate) (tensor-handle input)
                                                              (tensor-handle grad-output)
                                                              (tensor-handle grad-input)
                                                              (tensor-handle weight)
                                                              (tensor-handle finput)
                                                              (tensor-handle fgrad-input)
                                                              kw kh dw dh pw ph))
(defmethod nn-spatial-depthwise-convolution-update-grad-input ((input tensor.double)
                                                               (grad-output tensor.double)
                                                               (grad-input tensor.double)
                                                               (weight tensor.double)
                                                               (finput tensor.double)
                                                               (fgrad-input tensor.double)
                                                               kw kh dw dh pw ph)
  (thnn-double-spatial-depthwise-convolution-update-grad-input (mystate) (tensor-handle input)
                                                               (tensor-handle grad-output)
                                                               (tensor-handle grad-input)
                                                               (tensor-handle weight)
                                                               (tensor-handle finput)
                                                               (tensor-handle fgrad-input)
                                                               kw kh dw dh pw ph))

(defgeneric nn-spatial-depthwise-convolution-acc-grad-parameters (input grad-output grad-weight
                                                                  grad-bias finput fgrad-input
                                                                  kw kh dw dh padw padh scale))
(defmethod nn-spatial-depthwise-convolution-acc-grad-parameters ((input tensor.float)
                                                                 (grad-output tensor.float)
                                                                 (grad-weight tensor.float)
                                                                 grad-bias
                                                                 (finput tensor.float)
                                                                 (fgrad-input tensor.float)
                                                                 kw kh dw dh pw ph scale)
  (thnn-float-spatial-depthwise-convolution-acc-grad-parameters (mystate)
                                                                (tensor-handle input)
                                                                (tensor-handle grad-output)
                                                                (tensor-handle grad-weight)
                                                                (if grad-bias
                                                                    (tensor-handle grad-bias)
                                                                    (nilptr))
                                                                (tensor-handle finput)
                                                                (tensor-handle fgrad-input)
                                                                kw kh dw dh pw ph
                                                                (coerce scale 'double-float)))
(defmethod nn-spatial-depthwise-convolution-acc-grad-parameters ((input tensor.double)
                                                                 (grad-output tensor.double)
                                                                 (grad-weight tensor.double)
                                                                 grad-bias
                                                                 (finput tensor.double)
                                                                 (fgrad-input tensor.double)
                                                                 kw kh dw dh pw ph scale)
  (thnn-double-spatial-depthwise-convolution-acc-grad-parameters (mystate)
                                                                 (tensor-handle input)
                                                                 (tensor-handle grad-output)
                                                                 (tensor-handle grad-weight)
                                                                 (if grad-bias
                                                                     (tensor-handle grad-bias)
                                                                     (nilptr))
                                                                 (tensor-handle finput)
                                                                 (tensor-handle fgrad-input)
                                                                 kw kh dw dh pw ph
                                                                 (coerce scale 'double-float)))

(defgeneric nn-spatial-dilated-convolution-update-output (input output weight bias columns ones
                                                          kw kh dw dh padw padh
                                                          dilationw dilationh))
(defmethod nn-spatial-dilated-convolution-update-output ((input tensor.float)
                                                         (output tensor.float)
                                                         (weight tensor.float) bias
                                                         (columns tensor.float)
                                                         (ones tensor.float)
                                                         kw kh dw dh pw ph dlw dlh)
  (thnn-float-spatial-dilated-convolution-update-output (defstate) ($handle input)
                                                        ($handle output)
                                                        ($handle weight)
                                                        (if bias ($handle bias) (nilptr))
                                                        ($handle columns)
                                                        ($handle ones)
                                                        kw kh dw dh pw ph dlw dlh))
(defmethod nn-spatial-dilated-convolution-update-output ((input tensor.double)
                                                         (output tensor.double)
                                                         (weight tensor.double) bias
                                                         (columns tensor.double)
                                                         (ones tensor.double)
                                                         kw kh dw dh pw ph dlw dlh)
  (thnn-double-spatial-dilated-convolution-update-output (defstate) ($handle input)
                                                         ($handle output)
                                                         ($handle weight)
                                                         (if bias ($handle bias) (nilptr))
                                                         ($handle columns)
                                                         ($handle ones)
                                                         kw kh dw dh pw ph dlw dlh))

(defgeneric nn-spatial-dilated-convolution-update-grad-input (input grad-output grad-input
                                                              weight grad-columns
                                                              kw kh dw dh padw padh
                                                              dilationw dilationh))
(defmethod nn-spatial-dilated-convolution-update-grad-input ((input tensor.float)
                                                             (grad-output tensor.float)
                                                             (grad-input tensor.float)
                                                             (weight tensor.float)
                                                             (grad-columns tensor.float)
                                                             kw kh dw dh pw ph dlw dlh)
  (thnn-float-spatial-dilated-convolution-update-grad-input (defstate) ($handle input)
                                                            ($handle grad-output)
                                                            ($handle grad-input)
                                                            ($handle weight)
                                                            ($handle grad-columns)
                                                            kw kh dw dh pw ph dlw dlh))
(defmethod nn-spatial-dilated-convolution-update-grad-input ((input tensor.double)
                                                             (grad-output tensor.double)
                                                             (grad-input tensor.double)
                                                             (weight tensor.double)
                                                             (grad-columns tensor.double)
                                                             kw kh dw dh pw ph dlw dlh)
  (thnn-double-spatial-dilated-convolution-update-grad-input (defstate) ($handle input)
                                                             ($handle grad-output)
                                                             ($handle grad-input)
                                                             ($handle weight)
                                                             ($handle grad-columns)
                                                             kw kh dw dh pw ph dlw dlh))

(defgeneric nn-spatial-dilated-convolution-acc-grad-parameters (input grad-output grad-weight
                                                                grad-bias columns ones
                                                                kw kh dw dh padw padh
                                                                dilationw dilationh scale))
(defmethod nn-spatial-dilated-convolution-acc-grad-parameters ((input tensor.float)
                                                               (grad-output tensor.float)
                                                               (grad-weight tensor.float)
                                                               grad-bias (columns tensor.float)
                                                               (ones tensor.float)
                                                               kw kh dw dh pw ph dlw dlh
                                                               scale)
  (thnn-float-spatial-dilated-convolution-acc-grad-parameters (defstate) ($handle input)
                                                              ($handle grad-output)
                                                              ($handle grad-weight)
                                                              (if grad-bias
                                                                  ($handle grad-bias)
                                                                  (nilptr))
                                                              ($handle columns)
                                                              ($handle ones)
                                                              kw kh dw dh pw ph dlw dlh
                                                              (coerce scale 'double-float)))
(defmethod nn-spatial-dilated-convolution-acc-grad-parameters ((input tensor.double)
                                                               (grad-output tensor.double)
                                                               (grad-weight tensor.double)
                                                               grad-bias (columns tensor.double)
                                                               (ones tensor.double)
                                                               kw kh dw dh pw ph dlw dlh
                                                               scale)
  (thnn-double-spatial-dilated-convolution-acc-grad-parameters (defstate) ($handle input)
                                                               ($handle grad-output)
                                                               ($handle grad-weight)
                                                               (if grad-bias
                                                                   ($handle grad-bias)
                                                                   (nilptr))
                                                               ($handle columns)
                                                               ($handle ones)
                                                               kw kh dw dh pw ph dlw dlh
                                                               (coerce scale 'double-float)))

(defgeneric nn-spatial-dilated-max-pooling-update-output (input output indices
                                                          kw kh dw dh padw padh
                                                          dilationw dilationh ceil-mode))
(defmethod nn-spatial-dilated-max-pooling-update-output ((input tensor.float)
                                                         (output tensor.float)
                                                         (indices tensor.long)
                                                         kw kh dw dh pw ph dlw dlh
                                                         ceil-mode)
  (thnn-float-spatial-dilated-max-pooling-update-output (defstate) ($handle input)
                                                        ($handle output)
                                                        ($handle indices)
                                                        kw kh dw dh pw ph dlw dlh
                                                        (if ceil-mode 1 0)))
(defmethod nn-spatial-dilated-max-pooling-update-output ((input tensor.double)
                                                         (output tensor.double)
                                                         (indices tensor.long)
                                                         kw kh dw dh pw ph dlw dlh
                                                         ceil-mode)
  (thnn-double-spatial-dilated-max-pooling-update-output (defstate) ($handle input)
                                                         ($handle output)
                                                         ($handle indices)
                                                         kw kh dw dh pw ph dlw dlh
                                                         (if ceil-mode 1 0)))

(defgeneric nn-spatial-dilated-max-pooling-update-grad-input (input grad-output grad-input
                                                              indices kw kh dw dh padw padh
                                                              dilationw dilationh ceil-mode))
(defmethod nn-spatial-dilated-max-pooling-update-grad-input ((input tensor.float)
                                                             (grad-output tensor.float)
                                                             (grad-input tensor.float)
                                                             (indices tensor.long)
                                                             kw kh dw dh pw ph dlw dlh
                                                             ceil-mode)
  (thnn-float-spatial-dilated-max-pooling-update-grad-input (defstate) ($handle input)
                                                            ($handle grad-output)
                                                            ($handle grad-input)
                                                            ($handle indices)
                                                            kw kh dw dh pw ph dlw dlh
                                                            (if ceil-mode 1 0)))
(defmethod nn-spatial-dilated-max-pooling-update-grad-input ((input tensor.double)
                                                             (grad-output tensor.double)
                                                             (grad-input tensor.double)
                                                             (indices tensor.long)
                                                             kw kh dw dh pw ph dlw dlh
                                                             ceil-mode)
  (thnn-double-spatial-dilated-max-pooling-update-grad-input (defstate) ($handle input)
                                                             ($handle grad-output)
                                                             ($handle grad-input)
                                                             ($handle indices)
                                                             kw kh dw dh pw ph dlw dlh
                                                             (if ceil-mode 1 0)))

(defgeneric nn-spatial-fractional-max-pooling-update-output (input output outputw outputh
                                                             pool-size-w pool-size-h
                                                             indices random-samples))
(defmethod nn-spatial-fractional-max-pooling-update-output ((input tensor.float)
                                                            (output tensor.float)
                                                            ow oh psw psh
                                                            (indices tensor.long)
                                                            (random-samples tensor.float))
  (thnn-float-spatial-fractional-max-pooling-update-output (defstate) ($handle input)
                                                           ($handle output)
                                                           ow oh psw psh
                                                           ($handle indices)
                                                           ($handle random-samples)))
(defmethod nn-spatial-fractional-max-pooling-update-output ((input tensor.double)
                                                            (output tensor.double)
                                                            ow oh psw psh
                                                            (indices tensor.long)
                                                            (random-samples tensor.double))
  (thnn-double-spatial-fractional-max-pooling-update-output (defstate) ($handle input)
                                                            ($handle output)
                                                            ow oh psw psh
                                                            ($handle indices)
                                                            ($handle random-samples)))

(defgeneric nn-spatial-fractional-max-pooling-update-grad-input (input grad-output grad-input
                                                                 outputw outputh
                                                                 pool-size-w pool-size-h
                                                                 indices))
(defmethod nn-spatial-fractional-max-pooling-update-grad-input ((input tensor.float)
                                                                (grad-output tensor.float)
                                                                (grad-input tensor.float)
                                                                ow oh psw psh
                                                                (indices tensor.long))
  (thnn-float-spatial-fractional-max-pooling-update-grad-input (defstate) ($handle input)
                                                               ($handle grad-output)
                                                               ($handle grad-input)
                                                               ow oh psw psh
                                                               ($handle indices)))
(defmethod nn-spatial-fractional-max-pooling-update-grad-input ((input tensor.double)
                                                                (grad-output tensor.double)
                                                                (grad-input tensor.double)
                                                                ow oh psw psh
                                                                (indices tensor.long))
  (thnn-double-spatial-fractional-max-pooling-update-grad-input (defstate) ($handle input)
                                                                ($handle grad-output)
                                                                ($handle grad-input)
                                                                ow oh psw psh
                                                                ($handle indices)))

(defgeneric nn-spatial-full-convolution-update-output (input output weight bias columns ones
                                                       kw kh dw dh padw padh adjw adjh))
(defmethod nn-spatial-full-convolution-update-output ((input tensor.float) (output tensor.float)
                                                      (weight tensor.float) bias
                                                      (columns tensor.float) (ones tensor.float)
                                                      kw kh dw dh pw ph adjw adjh)
  (thnn-float-spatial-full-convolution-update-output (defstate) ($handle input)
                                                     ($handle output) ($handle weight)
                                                     (if bias ($handle bias) (nilptr))
                                                     ($handle columns)
                                                     ($handle ones) kw kh dw dh pw ph
                                                     adjw adjh))
(defmethod nn-spatial-full-convolution-update-output ((input tensor.double) (output tensor.double)
                                                      (weight tensor.double) bias
                                                      (columns tensor.double) (ones tensor.double)
                                                      kw kh dw dh pw ph adjw adjh)
  (thnn-double-spatial-full-convolution-update-output (defstate) ($handle input)
                                                      ($handle output) ($handle weight)
                                                      (if bias ($handle bias) (nilptr))
                                                      ($handle columns)
                                                      ($handle ones) kw kh dw dh pw ph
                                                      adjw adjh))

(defgeneric nn-spatial-full-convolution-update-grad-input (input grad-output grad-input
                                                           weight grad-columns
                                                           kw kh dw dh padw padh adjw adjh))
(defmethod nn-spatial-full-convolution-update-grad-input ((input tensor.float)
                                                          (grad-output tensor.float)
                                                          (grad-input tensor.float)
                                                          (weight tensor.float)
                                                          (grad-columns tensor.float)
                                                          kw kh dw dh pw ph adjw adjh)
  (thnn-float-spatial-full-convolution-update-grad-input (defstate) ($handle input)
                                                         ($handle grad-output)
                                                         ($handle grad-input)
                                                         ($handle weight)
                                                         ($handle grad-columns)
                                                         kw kh dw dh pw ph adjw adjh))
(defmethod nn-spatial-full-convolution-update-grad-input ((input tensor.double)
                                                          (grad-output tensor.double)
                                                          (grad-input tensor.double)
                                                          (weight tensor.double)
                                                          (grad-columns tensor.double)
                                                          kw kh dw dh pw ph adjw adjh)
  (thnn-double-spatial-full-convolution-update-grad-input (defstate) ($handle input)
                                                          ($handle grad-output)
                                                          ($handle grad-input)
                                                          ($handle weight)
                                                          ($handle grad-columns)
                                                          kw kh dw dh pw ph adjw adjh))

(defgeneric nn-spatial-full-convolution-acc-grad-parameters (input grad-output grad-weight grad-bias
                                                             columns ones kw kh dw dh padw padh
                                                             adjw adjh scale))
(defmethod nn-spatial-full-convolution-acc-grad-parameters ((input tensor.float)
                                                            (grad-output tensor.float)
                                                            (grad-weight tensor.float)
                                                            grad-bias
                                                            (columns tensor.float)
                                                            (ones tensor.float)
                                                            kw kh dw dh pw ph adjw adjh scale)
  (thnn-float-spatial-full-convolution-acc-grad-parameters (defstate) ($handle input)
                                                           ($handle grad-output)
                                                           ($handle grad-weight)
                                                           (if grad-bias
                                                               ($handle grad-bias)
                                                               (nilptr))
                                                           ($handle columns)
                                                           ($handle ones)
                                                           kw kh dw dh pw ph adjw adjh
                                                           (coerce scale 'double-float)))
(defmethod nn-spatial-full-convolution-acc-grad-parameters ((input tensor.double)
                                                            (grad-output tensor.double)
                                                            (grad-weight tensor.double)
                                                            grad-bias
                                                            (columns tensor.double)
                                                            (ones tensor.double)
                                                            kw kh dw dh pw ph adjw adjh scale)
  (thnn-double-spatial-full-convolution-acc-grad-parameters (defstate) ($handle input)
                                                            ($handle grad-output)
                                                            ($handle grad-weight)
                                                            (if grad-bias
                                                                ($handle grad-bias)
                                                                (nilptr))
                                                            ($handle columns)
                                                            ($handle ones)
                                                            kw kh dw dh pw ph adjw adjh
                                                            (coerce scale 'double-float)))

(defgeneric nn-spatial-full-convolution-map-update-output (input output weight bias conn-table
                                                           n-input-plane n-output-plane
                                                           dw dh))
(defmethod nn-spatial-full-convolution-map-update-output ((input tensor.float)
                                                          (output tensor.float)
                                                          (weight tensor.float)
                                                          bias (conn-table tensor.float)
                                                          n-input-plane n-output-plane
                                                          dw dh)
  (thnn-float-spatial-full-convolution-map-update-output (defstate) ($handle input)
                                                         ($handle output)
                                                         ($handle weight)
                                                         (if bias ($handle bias) (nilptr))
                                                         ($handle conn-table)
                                                         n-input-plane n-output-plane
                                                         dw dh))
(defmethod nn-spatial-full-convolution-map-update-output ((input tensor.double)
                                                          (output tensor.double)
                                                          (weight tensor.double)
                                                          bias (conn-table tensor.double)
                                                          n-input-plane n-output-plane
                                                          dw dh)
  (thnn-double-spatial-full-convolution-map-update-output (defstate) ($handle input)
                                                          ($handle output)
                                                          ($handle weight)
                                                          (if bias ($handle bias) (nilptr))
                                                          ($handle conn-table)
                                                          n-input-plane n-output-plane
                                                          dw dh))

(defgeneric nn-spatial-full-convolution-map-update-grad-input (input grad-output grad-input
                                                               weight bias conn-table
                                                               n-input-plane n-output-plane
                                                               dw dh))
(defmethod nn-spatial-full-convolution-map-update-grad-input ((input tensor.float)
                                                              (grad-output tensor.float)
                                                              (grad-input tensor.float)
                                                              (weight tensor.float)
                                                              bias (conn-table tensor.float)
                                                              n-input-plane n-output-plane
                                                              dw dh)
  (thnn-float-spatial-full-convolution-map-update-grad-input (defstate) ($handle input)
                                                             ($handle grad-output)
                                                             ($handle grad-input)
                                                             ($handle weight)
                                                             (if bias
                                                                 ($handle bias)
                                                                 (nilptr))
                                                             ($handle conn-table)
                                                             n-input-plane n-output-plane
                                                             dw dh))
(defmethod nn-spatial-full-convolution-map-update-grad-input ((input tensor.double)
                                                              (grad-output tensor.double)
                                                              (grad-input tensor.double)
                                                              (weight tensor.double)
                                                              bias (conn-table tensor.double)
                                                              n-input-plane n-output-plane
                                                              dw dh)
  (thnn-double-spatial-full-convolution-map-update-grad-input (defstate) ($handle input)
                                                              ($handle grad-output)
                                                              ($handle grad-input)
                                                              ($handle weight)
                                                              (if bias
                                                                  ($handle bias)
                                                                  (nilptr))
                                                              ($handle conn-table)
                                                              n-input-plane n-output-plane
                                                              dw dh))

(defgeneric nn-spatial-full-convolution-map-acc-grad-parameters (input grad-output
                                                                 grad-weight grad-bias
                                                                 conn-table
                                                                 n-input-plane n-output-plane
                                                                 dw dh scale))
(defmethod nn-spatial-full-convolution-map-acc-grad-parameters ((input tensor.float)
                                                                (grad-output tensor.float)
                                                                (grad-weight tensor.float)
                                                                grad-bias
                                                                (conn-table tensor.float)
                                                                n-input-plane n-output-plane
                                                                dw dh scale)
  (thnn-float-spatial-full-convolution-map-acc-grad-parameters (defstate) ($handle input)
                                                               ($handle grad-output)
                                                               ($handle grad-weight)
                                                               (if grad-bias
                                                                   ($handle grad-bias)
                                                                   (nilptr))
                                                               ($handle conn-table)
                                                               n-input-plane n-output-plane
                                                               dw dh
                                                               (coerce scale 'double-float)))
(defmethod nn-spatial-full-convolution-map-acc-grad-parameters ((input tensor.double)
                                                                (grad-output tensor.double)
                                                                (grad-weight tensor.double)
                                                                grad-bias
                                                                (conn-table tensor.double)
                                                                n-input-plane n-output-plane
                                                                dw dh scale)
  (thnn-double-spatial-full-convolution-map-acc-grad-parameters (defstate) ($handle input)
                                                                ($handle grad-output)
                                                                ($handle grad-weight)
                                                                (if grad-bias
                                                                    ($handle grad-bias)
                                                                    (nilptr))
                                                                ($handle conn-table)
                                                                n-input-plane n-output-plane
                                                                dw dh
                                                                (coerce scale 'double-float)))

(defgeneric nn-spatial-full-dilated-convolution-update-output (input output weight bias columns ones
                                                               kw kh dw dh padw padh
                                                               dilationw dilationh adjw adjh))
(defmethod nn-spatial-full-dilated-convolution-update-output ((input tensor.float)
                                                              (output tensor.float)
                                                              (weight tensor.float) bias
                                                              (columns tensor.float)
                                                              (ones tensor.float)
                                                              kw kh dw dh pw ph dlw dlh
                                                              adjw adjh)
  (thnn-float-spatial-full-dilated-convolution-update-output (defstate) ($handle input)
                                                             ($handle output)
                                                             ($handle weight)
                                                             (if bias
                                                                 ($handle bias)
                                                                 (nilptr))
                                                             ($handle columns)
                                                             ($handle ones)
                                                             kw kh dw dh pw ph dlw dlh
                                                             adjw adjh))
(defmethod nn-spatial-full-dilated-convolution-update-output ((input tensor.double)
                                                              (output tensor.double)
                                                              (weight tensor.double) bias
                                                              (columns tensor.double)
                                                              (ones tensor.double)
                                                              kw kh dw dh pw ph dlw dlh
                                                              adjw adjh)
  (thnn-double-spatial-full-dilated-convolution-update-output (defstate) ($handle input)
                                                              ($handle output)
                                                              ($handle weight)
                                                              (if bias
                                                                  ($handle bias)
                                                                  (nilptr))
                                                              ($handle columns)
                                                              ($handle ones)
                                                              kw kh dw dh pw ph dlw dlh
                                                              adjw adjh))

(defgeneric nn-spatial-full-dilated-convolution-update-grad-input (input grad-output grad-input
                                                                   weight grad-columns
                                                                   kw kh dw dh padw padh
                                                                   dilationw dilationh adjw adjh))
(defmethod nn-spatial-full-dilated-convolution-update-grad-input ((input tensor.float)
                                                                  (grad-output tensor.float)
                                                                  (grad-input tensor.float)
                                                                  (weight tensor.float)
                                                                  (grad-columns tensor.float)
                                                                  kw kh dw dh pw ph dlw dlh
                                                                  adjw adjh)
  (thnn-float-spatial-full-dilated-convolution-update-grad-input (defstate) ($handle input)
                                                                 ($handle grad-output)
                                                                 ($handle grad-input)
                                                                 ($handle weight)
                                                                 ($handle grad-columns)
                                                                 kw kh dw dh pw ph dlw dlh
                                                                 adjw adjh))
(defmethod nn-spatial-full-dilated-convolution-update-grad-input ((input tensor.double)
                                                                  (grad-output tensor.double)
                                                                  (grad-input tensor.double)
                                                                  (weight tensor.double)
                                                                  (grad-columns tensor.double)
                                                                  kw kh dw dh pw ph dlw dlh
                                                                  adjw adjh)
  (thnn-double-spatial-full-dilated-convolution-update-grad-input (defstate) ($handle input)
                                                                  ($handle grad-output)
                                                                  ($handle grad-input)
                                                                  ($handle weight)
                                                                  ($handle grad-columns)
                                                                  kw kh dw dh pw ph dlw dlh
                                                                  adjw adjh))

(defgeneric nn-spatial-full-dilated-convolution-acc-grad-parameters (input grad-output grad-weight
                                                                     grad-bias columns ones
                                                                     kw kh dw dh padw padh
                                                                     dilationw dilationh adjw adjh
                                                                     scale))
(defmethod nn-spatial-full-dilated-convolution-acc-grad-parameters ((input tensor.float)
                                                                    (grad-output tensor.float)
                                                                    (grad-weight tensor.float)
                                                                    grad-bias
                                                                    (columns tensor.float)
                                                                    (ones tensor.float)
                                                                    kw kh dw dh pw ph dlw dlh
                                                                    adjw adjh scale)
  (thnn-float-spatial-full-dilated-convolution-acc-grad-parameters (defstate) ($handle input)
                                                                   ($handle grad-output)
                                                                   ($handle grad-weight)
                                                                   (if grad-bias
                                                                       ($handle grad-bias)
                                                                       (nilptr))
                                                                   ($handle columns)
                                                                   ($handle ones)
                                                                   kw kh dw dh pw ph dlw dlh
                                                                   adjw adjh
                                                                   (coerce scale 'double-float)))
(defmethod nn-spatial-full-dilated-convolution-acc-grad-parameters ((input tensor.double)
                                                                    (grad-output tensor.double)
                                                                    (grad-weight tensor.double)
                                                                    grad-bias
                                                                    (columns tensor.double)
                                                                    (ones tensor.double)
                                                                    kw kh dw dh pw ph dlw dlh
                                                                    adjw adjh scale)
  (thnn-double-spatial-full-dilated-convolution-acc-grad-parameters (defstate) ($handle input)
                                                                    ($handle grad-output)
                                                                    ($handle grad-weight)
                                                                    (if grad-bias
                                                                        ($handle grad-bias)
                                                                        (nilptr))
                                                                    ($handle columns)
                                                                    ($handle ones)
                                                                    kw kh dw dh pw ph dlw dlh
                                                                    adjw adjh
                                                                    (coerce scale 'double-float)))

(defgeneric nn-spatial-grid-sampler-bilinear-update-output (input grid output padding-mode))
(defmethod nn-spatial-grid-sampler-bilinear-update-output ((input tensor.float)
                                                           (grid tensor.float)
                                                           (output tensor.float)
                                                           padding-mode)
  (thnn-float-spatial-grid-sampler-bilinear-update-output (defstate) ($handle input)
                                                          ($handle grid)
                                                          ($handle output)
                                                          padding-mode))
(defmethod nn-spatial-grid-sampler-bilinear-update-output ((input tensor.double)
                                                           (grid tensor.double)
                                                           (output tensor.double)
                                                           padding-mode)
  (thnn-double-spatial-grid-sampler-bilinear-update-output (defstate) ($handle input)
                                                           ($handle grid)
                                                           ($handle output)
                                                           padding-mode))

(defgeneric nn-spatial-grid-sampler-bilinear-update-grad-input (input grad-input grid grad-grid
                                                                grad-output padding-mode))
(defmethod nn-spatial-grid-sampler-bilinear-update-grad-input ((input tensor.float)
                                                               (grad-input tensor.float)
                                                               (grid tensor.float)
                                                               (grad-grid tensor.float)
                                                               (grad-output tensor.float)
                                                               padding-mode)
  (thnn-float-spatial-grid-sampler-bilinear-update-grad-input (defstate) ($handle input)
                                                              ($handle grad-input)
                                                              ($handle grid)
                                                              ($handle grad-grid)
                                                              ($handle grad-output)
                                                              padding-mode))
(defmethod nn-spatial-grid-sampler-bilinear-update-grad-input ((input tensor.double)
                                                               (grad-input tensor.double)
                                                               (grid tensor.double)
                                                               (grad-grid tensor.double)
                                                               (grad-output tensor.double)
                                                               padding-mode)
  (thnn-double-spatial-grid-sampler-bilinear-update-grad-input (defstate) ($handle input)
                                                               ($handle grad-input)
                                                               ($handle grid)
                                                               ($handle grad-grid)
                                                               ($handle grad-output)
                                                               padding-mode))

(defgeneric nn-spatial-max-pooling-update-output (input output indices kw kh dw dh padw padh
                                                  ceil-mode))
(defmethod nn-spatial-max-pooling-update-output ((input tensor.float) (output tensor.float)
                                                 (indices tensor.long) kw kh dw dh pw ph
                                                 ceil-mode)
  (thnn-float-spatial-max-pooling-update-output (defstate) ($handle input)
                                                ($handle output)
                                                ($handle indices)
                                                kw kh dw dh pw ph
                                                (if ceil-mode 1 0)))
(defmethod nn-spatial-max-pooling-update-output ((input tensor.double) (output tensor.double)
                                                 (indices tensor.long) kw kh dw dh pw ph
                                                 ceil-mode)
  (thnn-double-spatial-max-pooling-update-output (defstate) ($handle input)
                                                 ($handle output)
                                                 ($handle indices)
                                                 kw kh dw dh pw ph
                                                 (if ceil-mode 1 0)))

(defgeneric nn-spatial-max-pooling-update-grad-input (input grad-output grad-input indices
                                                      kw kh dw dh padw padh ceil-mode))
(defmethod nn-spatial-max-pooling-update-grad-input ((input tensor.float)
                                                     (grad-output tensor.float)
                                                     (grad-input tensor.float)
                                                     (indices tensor.long)
                                                     kw kh dw dh pw ph ceil-mode)
  (thnn-float-spatial-max-pooling-update-grad-input (defstate) ($handle input)
                                                    ($handle grad-output)
                                                    ($handle grad-input)
                                                    ($handle indices)
                                                    kw kh dw dh pw ph
                                                    (if ceil-mode 1 0)))
(defmethod nn-spatial-max-pooling-update-grad-input ((input tensor.double)
                                                     (grad-output tensor.double)
                                                     (grad-input tensor.double)
                                                     (indices tensor.long)
                                                     kw kh dw dh pw ph ceil-mode)
  (thnn-double-spatial-max-pooling-update-grad-input (defstate) ($handle input)
                                                     ($handle grad-output)
                                                     ($handle grad-input)
                                                     ($handle indices)
                                                     kw kh dw dh pw ph
                                                     (if ceil-mode 1 0)))

(defgeneric nn-spatial-max-unpooling-update-output (input output indices ow oh))
(defmethod nn-spatial-max-unpooling-update-output ((input tensor.float) (output tensor.float)
                                                   (indices tensor.long) ow oh)
  (thnn-float-spatial-max-unpooling-update-output (defstate) ($handle input)
                                                  ($handle output)
                                                  ($handle indices)
                                                  ow oh))
(defmethod nn-spatial-max-unpooling-update-output ((input tensor.double) (output tensor.double)
                                                   (indices tensor.long) ow oh)
  (thnn-double-spatial-max-unpooling-update-output (defstate) ($handle input)
                                                   ($handle output)
                                                   ($handle indices)
                                                   ow oh))

(defgeneric nn-spatial-max-unpooling-update-grad-input (input grad-output grad-input indices
                                                        ow oh))
(defmethod nn-spatial-max-unpooling-update-grad-input ((input tensor.float)
                                                       (grad-output tensor.float)
                                                       (grad-input tensor.float)
                                                       (indices tensor.long) ow oh)
  (thnn-float-spatial-max-unpooling-update-grad-input (defstate) ($handle input)
                                                      ($handle grad-output)
                                                      ($handle grad-input)
                                                      ($handle indices) ow oh))
(defmethod nn-spatial-max-unpooling-update-grad-input ((input tensor.double)
                                                       (grad-output tensor.double)
                                                       (grad-input tensor.double)
                                                       (indices tensor.long) ow oh)
  (thnn-double-spatial-max-unpooling-update-grad-input (defstate) ($handle input)
                                                       ($handle grad-output)
                                                       ($handle grad-input)
                                                       ($handle indices) ow oh))

(defgeneric nn-spatial-reflection-padding-update-output (input output padl padr padt padb))
(defmethod nn-spatial-reflection-padding-update-output ((input tensor.float) (output tensor.float)
                                                        padl padr padt padb)
  (thnn-float-spatial-reflection-padding-update-output (defstate) ($handle input)
                                                       ($handle output)
                                                       padl padr padt padb))
(defmethod nn-spatial-reflection-padding-update-output ((input tensor.double) (output tensor.double)
                                                        padl padr padt padb)
  (thnn-double-spatial-reflection-padding-update-output (defstate) ($handle input)
                                                        ($handle output)
                                                        padl padr padt padb))

(defgeneric nn-spatial-reflection-padding-update-grad-input (input grad-output grad-input
                                                             padl padr padt padb))
(defmethod nn-spatial-reflection-padding-update-grad-input ((input tensor.float)
                                                            (grad-output tensor.float)
                                                            (grad-input tensor.float)
                                                            padl padr padt padb)
  (thnn-float-spatial-reflection-padding-update-grad-input (defstate) ($handle input)
                                                           ($handle grad-output)
                                                           ($handle grad-input)
                                                           padl padr padt padb))
(defmethod nn-spatial-reflection-padding-update-grad-input ((input tensor.double)
                                                            (grad-output tensor.double)
                                                            (grad-input tensor.double)
                                                            padl padr padt padb)
  (thnn-double-spatial-reflection-padding-update-grad-input (defstate) ($handle input)
                                                            ($handle grad-output)
                                                            ($handle grad-input)
                                                            padl padr padt padb))

(defgeneric nn-spatial-replication-padding-update-output (input output padl padr padt padb))
(defmethod nn-spatial-replication-padding-update-output ((input tensor.float)
                                                         (output tensor.float)
                                                         padl padr padt padb)
  (thnn-float-spatial-replication-padding-update-output (defstate) ($handle input)
                                                        ($handle output)
                                                        padl padr padt padb))
(defmethod nn-spatial-replication-padding-update-output ((input tensor.double)
                                                         (output tensor.double)
                                                         padl padr padt padb)
  (thnn-double-spatial-replication-padding-update-output (defstate) ($handle input)
                                                         ($handle output)
                                                         padl padr padt padb))

(defgeneric nn-spatial-replication-padding-update-grad-input (input grad-output grad-input
                                                              padl padr padt padb))
(defmethod nn-spatial-replication-padding-update-grad-input ((input tensor.float)
                                                             (grad-output tensor.float)
                                                             (grad-input tensor.float)
                                                             padl padr padt padb)
  (thnn-float-spatial-replication-padding-update-grad-input (defstate) ($handle input)
                                                            ($handle grad-output)
                                                            ($handle grad-input)
                                                            padl padr padt padb))
(defmethod nn-spatial-replication-padding-update-grad-input ((input tensor.double)
                                                             (grad-output tensor.double)
                                                             (grad-input tensor.double)
                                                             padl padr padt padb)
  (thnn-double-spatial-replication-padding-update-grad-input (defstate) ($handle input)
                                                             ($handle grad-output)
                                                             ($handle grad-input)
                                                             padl padr padt padb))

(defgeneric nn-spatial-subsampling-update-output (input output weight bias kw kh dw dh))
(defmethod nn-spatial-subsampling-update-output ((input tensor.float) (output tensor.float)
                                                 (weight tensor.float) bias
                                                 kw kh dw dh)
  (thnn-float-spatial-subsampling-update-output (defstate) ($handle input)
                                                ($handle output)
                                                ($handle weight)
                                                (if bias ($handle bias) (nilptr))
                                                kw kh dw dh))
(defmethod nn-spatial-subsampling-update-output ((input tensor.double) (output tensor.double)
                                                 (weight tensor.double) bias
                                                 kw kh dw dh)
  (thnn-double-spatial-subsampling-update-output (defstate) ($handle input)
                                                 ($handle output)
                                                 ($handle weight)
                                                 (if bias ($handle bias) (nilptr))
                                                 kw kh dw dh))

(defgeneric nn-spatial-subsampling-update-grad-input (input grad-output grad-input weight
                                                      kw kh dw dh))
(defmethod nn-spatial-subsampling-update-grad-input ((input tensor.float)
                                                     (grad-output tensor.float)
                                                     (grad-input tensor.float)
                                                     (weight tensor.float)
                                                     kw kh dw dh)
  (thnn-float-spatial-subsampling-update-grad-input (defstate) ($handle input)
                                                    ($handle grad-output)
                                                    ($handle grad-input)
                                                    ($handle weight)
                                                    kw kh dw dh))
(defmethod nn-spatial-subsampling-update-grad-input ((input tensor.double)
                                                     (grad-output tensor.double)
                                                     (grad-input tensor.double)
                                                     (weight tensor.double)
                                                     kw kh dw dh)
  (thnn-double-spatial-subsampling-update-grad-input (defstate) ($handle input)
                                                     ($handle grad-output)
                                                     ($handle grad-input)
                                                     ($handle weight)
                                                     kw kh dw dh))

(defgeneric nn-spatial-subsampling-acc-grad-parameters (input grad-output grad-weight grad-bias
                                                        kw kh dw dh scale))
(defmethod nn-spatial-subsampling-acc-grad-parameters ((input tensor.float)
                                                       (grad-output tensor.float)
                                                       (grad-weight tensor.float) grad-bias
                                                       kw kh dw dh scale)
  (thnn-float-spatial-subsampling-acc-grad-parameters (defstate) ($handle input)
                                                      ($handle grad-output)
                                                      ($handle grad-weight)
                                                      (if grad-bias
                                                          ($handle grad-bias)
                                                          (nilptr))
                                                      kw kh dw dh
                                                      (coerce scale 'double-float)))
(defmethod nn-spatial-subsampling-acc-grad-parameters ((input tensor.double)
                                                       (grad-output tensor.double)
                                                       (grad-weight tensor.double) grad-bias
                                                       kw kh dw dh scale)
  (thnn-double-spatial-subsampling-acc-grad-parameters (defstate) ($handle input)
                                                       ($handle grad-output)
                                                       ($handle grad-weight)
                                                       (if grad-bias
                                                           ($handle grad-bias)
                                                           (nilptr))
                                                       kw kh dw dh
                                                       (coerce scale 'double-float)))

(defgeneric nn-spatial-upsampling-bilinear-update-output (input output oh ow align-corners))
(defmethod nn-spatial-upsampling-bilinear-update-output ((input tensor.float)
                                                         (output tensor.float)
                                                         oh ow align-corners)
  (thnn-float-spatial-upsampling-bilinear-update-output (defstate) ($handle input)
                                                        ($handle output) oh ow
                                                        (if align-corners 1 0)))
(defmethod nn-spatial-upsampling-bilinear-update-output ((input tensor.double)
                                                         (output tensor.double)
                                                         oh ow align-corners)
  (thnn-double-spatial-upsampling-bilinear-update-output (defstate) ($handle input)
                                                         ($handle output) oh ow
                                                         (if align-corners 1 0)))

(defgeneric nn-spatial-upsampling-bilinear-update-grad-input (grad-output grad-input
                                                              ib ic ih iw oh ow
                                                              align-corners))
(defmethod nn-spatial-upsampling-bilinear-update-grad-input ((grad-output tensor.float)
                                                             (grad-input tensor.float)
                                                             ib ic ih iw oh ow
                                                             align-corners)
  (thnn-float-spatial-upsampling-bilinear-update-grad-input (defstate)
                                                            ($handle grad-output)
                                                            ($handle grad-input)
                                                            ib ic ih iw oh ow
                                                            (if align-corners 1 0)))
(defmethod nn-spatial-upsampling-bilinear-update-grad-input ((grad-output tensor.double)
                                                             (grad-input tensor.double)
                                                             ib ic ih iw oh ow
                                                             align-corners)
  (thnn-double-spatial-upsampling-bilinear-update-grad-input (defstate)
                                                             ($handle grad-output)
                                                             ($handle grad-input)
                                                             ib ic ih iw oh ow
                                                             (if align-corners 1 0)))

(defgeneric nn-spatial-upsampling-nearest-update-output (input output scale-factor))
(defmethod nn-spatial-upsampling-nearest-update-output ((input tensor.float)
                                                        (output tensor.float)
                                                        scale-factor)
  (thnn-float-spatial-upsampling-nearest-update-output (defstate) ($handle input)
                                                       ($handle output)
                                                       scale-factor))
(defmethod nn-spatial-upsampling-nearest-update-output ((input tensor.double)
                                                        (output tensor.double)
                                                        scale-factor)
  (thnn-double-spatial-upsampling-nearest-update-output (defstate) ($handle input)
                                                        ($handle output)
                                                        scale-factor))

(defgeneric nn-spatial-upsampling-nearest-update-grad-input (input grad-output grad-input
                                                             scale-factor))
(defmethod nn-spatial-upsampling-nearest-update-grad-input ((input tensor.float)
                                                            (grad-output tensor.float)
                                                            (grad-input tensor.float)
                                                            scale-factor)
  (thnn-float-spatial-upsampling-nearest-update-grad-input (defstate) ($handle input)
                                                           ($handle grad-output)
                                                           ($handle grad-input)
                                                           scale-factor))
(defmethod nn-spatial-upsampling-nearest-update-grad-input ((input tensor.double)
                                                            (grad-output tensor.double)
                                                            (grad-input tensor.double)
                                                            scale-factor)
  (thnn-double-spatial-upsampling-nearest-update-grad-input (defstate) ($handle input)
                                                            ($handle grad-output)
                                                            ($handle grad-input)
                                                            scale-factor))

(defgeneric nn-sqrt-update-output (input output eps))
(defmethod nn-sqrt-update-output ((input tensor.float) (output tensor.float) eps)
  (thnn-float-sqrt-update-output (defstate) ($handle input) ($handle output)
                                 (coerce eps 'double-float)))
(defmethod nn-sqrt-update-output ((input tensor.double) (output tensor.double) eps)
  (thnn-double-sqrt-update-output (defstate) ($handle input) ($handle output)
                                  (coerce eps 'double-float)))

(defgeneric nn-sqrt-update-grad-input (input grad-output grad-input output))
(defmethod nn-sqrt-update-grad-input ((input tensor.float) (grad-output tensor.float)
                                      (grad-input tensor.float) (output tensor.float))
  (thnn-float-sqrt-update-grad-input (defstate) ($handle input)
                                     ($handle grad-output) ($handle grad-input)
                                     ($handle output)))
(defmethod nn-sqrt-update-grad-input ((input tensor.double) (grad-output tensor.double)
                                      (grad-input tensor.double) (output tensor.double))
  (thnn-double-sqrt-update-grad-input (defstate) ($handle input)
                                      ($handle grad-output) ($handle grad-input)
                                      ($handle output)))

(defgeneric nn-square-update-output (input output))
(defmethod nn-square-update-output ((input tensor.float) (output tensor.float))
  (thnn-float-square-update-output (defstate) ($handle input) ($handle output)))
(defmethod nn-square-update-output ((input tensor.double) (output tensor.double))
  (thnn-double-square-update-output (defstate) ($handle input) ($handle output)))

(defgeneric nn-square-update-grad-input (input grad-output grad-input))
(defmethod nn-square-update-grad-input ((input tensor.float) (grad-output tensor.float)
                                        (grad-input tensor.float))
  (thnn-float-square-update-grad-input (defstate) ($handle input)
                                       ($handle grad-output)
                                       ($handle grad-input)))
(defmethod nn-square-update-grad-input ((input tensor.double) (grad-output tensor.double)
                                        (grad-input tensor.double))
  (thnn-double-square-update-grad-input (defstate) ($handle input)
                                        ($handle grad-output)
                                        ($handle grad-input)))

(defgeneric nn-tanh-update-output (input output))
(defmethod nn-tanh-update-output ((input tensor.float) (output tensor.float))
  (thnn-float-tanh-update-output (defstate)
                                 ($handle input)
                                 ($handle output)))
(defmethod nn-tanh-update-output ((input tensor.double) (output tensor.double))
  (thnn-double-tanh-update-output (defstate)
                                  ($handle input)
                                  ($handle output)))

(defgeneric nn-tanh-update-grad-input (grad-output grad-input output))
(defmethod nn-tanh-update-grad-input ((grad-output tensor.float)
                                      (grad-input tensor.float) (output tensor.float))
  (thnn-float-tanh-update-grad-input (defstate)
                                     ($handle grad-output)
                                     ($handle grad-input)
                                     ($handle output)))
(defmethod nn-tanh-update-grad-input ((grad-output tensor.double)
                                      (grad-input tensor.double) (output tensor.double))
  (thnn-double-tanh-update-grad-input (defstate)
                                      ($handle grad-output)
                                      ($handle grad-input)
                                      ($handle output)))

(defgeneric nn-temporal-convolution-update-output (input output weight bias kw dw
                                                   input-frame-size output-frame-size))
(defmethod nn-temporal-convolution-update-output ((input tensor.float) (output tensor.float)
                                                  (weight tensor.float) bias
                                                  kw dw ifz ofz)
  (thnn-float-temporal-convolution-update-output (defstate) ($handle input)
                                                 ($handle output)
                                                 ($handle weight)
                                                 (if bias ($handle bias) (nilptr))
                                                 kw dw ifz ofz))
(defmethod nn-temporal-convolution-update-output ((input tensor.double) (output tensor.double)
                                                  (weight tensor.double) bias
                                                  kw dw ifz ofz)
  (thnn-double-temporal-convolution-update-output (defstate) ($handle input)
                                                  ($handle output)
                                                  ($handle weight)
                                                  (if bias ($handle bias) (nilptr))
                                                  kw dw ifz ofz))

(defgeneric nn-temporal-convolution-update-grad-input (input grad-output grad-input weight kw dw))
(defmethod nn-temporal-convolution-update-grad-input ((input tensor.float)
                                                      (grad-output tensor.float)
                                                      (grad-input tensor.float)
                                                      (weight tensor.float)
                                                      kw dw)
  (thnn-float-temporal-convolution-update-grad-input (defstate) ($handle input)
                                                     ($handle grad-output)
                                                     ($handle grad-input)
                                                     ($handle weight)
                                                     kw dw))
(defmethod nn-temporal-convolution-update-grad-input ((input tensor.double)
                                                      (grad-output tensor.double)
                                                      (grad-input tensor.double)
                                                      (weight tensor.double)
                                                      kw dw)
  (thnn-double-temporal-convolution-update-grad-input (defstate) ($handle input)
                                                      ($handle grad-output)
                                                      ($handle grad-input)
                                                      ($handle weight)
                                                      kw dw))

(defgeneric nn-temporal-convolution-acc-grad-parameters (input grad-output grad-weight grad-bias
                                                         kw dw scale))
(defmethod nn-temporal-convolution-acc-grad-parameters ((input tensor.float)
                                                        (grad-output tensor.float)
                                                        (grad-weight tensor.float)
                                                        grad-bias kw dw scale)
  (thnn-float-temporal-convolution-acc-grad-parameters (defstate) ($handle input)
                                                       ($handle grad-output)
                                                       ($handle grad-weight)
                                                       (if grad-bias
                                                           ($handle grad-bias)
                                                           (nilptr))
                                                       kw dw
                                                       (coerce scale 'double-float)))
(defmethod nn-temporal-convolution-acc-grad-parameters ((input tensor.double)
                                                        (grad-output tensor.double)
                                                        (grad-weight tensor.double)
                                                        grad-bias kw dw scale)
  (thnn-double-temporal-convolution-acc-grad-parameters (defstate) ($handle input)
                                                        ($handle grad-output)
                                                        ($handle grad-weight)
                                                        (if grad-bias
                                                            ($handle grad-bias)
                                                            (nilptr))
                                                        kw dw
                                                        (coerce scale 'double-float)))

(defgeneric nn-temporal-max-pooling-update-output (input output indices kw dw))
(defmethod nn-temporal-max-pooling-update-output ((input tensor.float) (output tensor.float)
                                                  (indices tensor.long) kw dw)
  (thnn-float-temporal-max-pooling-update-output (defstate) ($handle input)
                                                 ($handle output)
                                                 ($handle indices)
                                                 kw dw))
(defmethod nn-temporal-max-pooling-update-output ((input tensor.double) (output tensor.double)
                                                  (indices tensor.long) kw dw)
  (thnn-double-temporal-max-pooling-update-output (defstate) ($handle input)
                                                  ($handle output)
                                                  ($handle indices)
                                                  kw dw))

(defgeneric nn-temporal-max-pooling-update-grad-input (input grad-output grad-input indices kw dw))
(defmethod nn-temporal-max-pooling-update-grad-input ((input tensor.float)
                                                      (grad-output tensor.float)
                                                      (grad-input tensor.float)
                                                      (indices tensor.long)
                                                      kw dw)
  (thnn-float-temporal-max-pooling-update-grad-input (defstate) ($handle input)
                                                     ($handle grad-output)
                                                     ($handle grad-input)
                                                     ($handle indices)
                                                     kw dw))
(defmethod nn-temporal-max-pooling-update-grad-input ((input tensor.double)
                                                      (grad-output tensor.double)
                                                      (grad-input tensor.double)
                                                      (indices tensor.long)
                                                      kw dw)
  (thnn-double-temporal-max-pooling-update-grad-input (defstate) ($handle input)
                                                      ($handle grad-output)
                                                      ($handle grad-input)
                                                      ($handle indices)
                                                      kw dw))

(defgeneric nn-temporal-row-convolution-update-output (input output weight bias finput fgrad-input
                                                       kw dw padw feat-first))
(defmethod nn-temporal-row-convolution-update-output ((input tensor.float) (output tensor.float)
                                                      (weight tensor.float) bias
                                                      (finput tensor.float)
                                                      (fgrad-input tensor.float)
                                                      kw dw pw ff)
  (thnn-float-temporal-row-convolution-update-output (defstate) ($handle input)
                                                     ($handle output)
                                                     ($handle weight)
                                                     (if bias ($handle bias) (nilptr))
                                                     ($handle finput)
                                                     ($handle fgrad-input)
                                                     kw dw pw
                                                     (if ff 1 0)))
(defmethod nn-temporal-row-convolution-update-output ((input tensor.double) (output tensor.double)
                                                      (weight tensor.double) bias
                                                      (finput tensor.double)
                                                      (fgrad-input tensor.double)
                                                      kw dw pw ff)
  (thnn-double-temporal-row-convolution-update-output (defstate) ($handle input)
                                                      ($handle output)
                                                      ($handle weight)
                                                      (if bias ($handle bias) (nilptr))
                                                      ($handle finput)
                                                      ($handle fgrad-input)
                                                      kw dw pw
                                                      (if ff 1 0)))

(defgeneric nn-temporal-row-convolution-update-grad-input (input grad-output grad-input weight
                                                           finput fgrad-input kw dw padw feat-fst))
(defmethod nn-temporal-row-convolution-update-grad-input ((input tensor.float)
                                                          (grad-output tensor.float)
                                                          (grad-input tensor.float)
                                                          (weight tensor.float)
                                                          (finput tensor.float)
                                                          (fgrad-input tensor.float)
                                                          kw dw pw ff)
  (thnn-float-temporal-row-convolution-update-grad-input (defstate) ($handle input)
                                                         ($handle grad-output)
                                                         ($handle grad-input)
                                                         ($handle weight)
                                                         ($handle finput)
                                                         ($handle fgrad-input)
                                                         kw dw pw
                                                         (if ff 1 0)))
(defmethod nn-temporal-row-convolution-update-grad-input ((input tensor.double)
                                                          (grad-output tensor.double)
                                                          (grad-input tensor.double)
                                                          (weight tensor.double)
                                                          (finput tensor.double)
                                                          (fgrad-input tensor.double)
                                                          kw dw pw ff)
  (thnn-double-temporal-row-convolution-update-grad-input (defstate) ($handle input)
                                                          ($handle grad-output)
                                                          ($handle grad-input)
                                                          ($handle weight)
                                                          ($handle finput)
                                                          ($handle fgrad-input)
                                                          kw dw pw
                                                          (if ff 1 0)))

(defgeneric nn-temporal-row-convolution-acc-grad-parameters (input grad-output grad-weight grad-bias
                                                             finput fgrad-input kw dw padw
                                                             feat-first scale))
(defmethod nn-temporal-row-convolution-acc-grad-parameters ((input tensor.float)
                                                            (grad-output tensor.float)
                                                            (grad-weight tensor.float)
                                                            grad-bias
                                                            (finput tensor.float)
                                                            (fgrad-input tensor.float)
                                                            kw dw pw ff scale)
  (thnn-float-temporal-row-convolution-acc-grad-parameters (defstate) ($handle input)
                                                           ($handle grad-output)
                                                           ($handle grad-weight)
                                                           (if grad-bias
                                                               ($handle grad-bias)
                                                               (nilptr))
                                                           ($handle finput)
                                                           ($handle fgrad-input)
                                                           kw dw pw
                                                           (if ff 1 0)
                                                           (coerce scale 'double-float)))
(defmethod nn-temporal-row-convolution-acc-grad-parameters ((input tensor.double)
                                                            (grad-output tensor.double)
                                                            (grad-weight tensor.double)
                                                            grad-bias
                                                            (finput tensor.double)
                                                            (fgrad-input tensor.double)
                                                            kw dw pw ff scale)
  (thnn-double-temporal-row-convolution-acc-grad-parameters (defstate) ($handle input)
                                                            ($handle grad-output)
                                                            ($handle grad-weight)
                                                            (if grad-bias
                                                                ($handle grad-bias)
                                                                (nilptr))
                                                            ($handle finput)
                                                            ($handle fgrad-input)
                                                            kw dw pw
                                                            (if ff 1 0)
                                                            (coerce scale 'double-float)))

(defgeneric nn-temporal-subsampling-update-output (input output weight bias kw dw input-frame-size))
(defmethod nn-temporal-subsampling-update-output ((input tensor.float) (output tensor.float)
                                                  (weight tensor.float) bias kw dw ifz)
  (thnn-float-temporal-subsampling-update-output (defstate) ($handle input)
                                                 ($handle output) ($handle weight)
                                                 (if bias ($handle bias) (nilptr))
                                                 kw dw ifz))
(defmethod nn-temporal-subsampling-update-output ((input tensor.double) (output tensor.double)
                                                  (weight tensor.double) bias kw dw ifz)
  (thnn-double-temporal-subsampling-update-output (defstate) ($handle input)
                                                  ($handle output) ($handle weight)
                                                  (if bias ($handle bias) (nilptr))
                                                  kw dw ifz))

(defgeneric nn-temporal-subsampling-update-grad-input (input grad-output grad-input weight kw dw))
(defmethod nn-temporal-subsampling-update-grad-input ((input tensor.float)
                                                      (grad-output tensor.float)
                                                      (grad-input tensor.float)
                                                      (weight tensor.float)
                                                      kw dw)
  (thnn-float-temporal-subsampling-update-grad-input (defstate) ($handle input)
                                                     ($handle grad-output)
                                                     ($handle grad-input)
                                                     ($handle weight)
                                                     kw dw))
(defmethod nn-temporal-subsampling-update-grad-input ((input tensor.double)
                                                      (grad-output tensor.double)
                                                      (grad-input tensor.double)
                                                      (weight tensor.double)
                                                      kw dw)
  (thnn-double-temporal-subsampling-update-grad-input (defstate) ($handle input)
                                                      ($handle grad-output)
                                                      ($handle grad-input)
                                                      ($handle weight)
                                                      kw dw))

(defgeneric nn-temporal-subsampling-acc-grad-parameters (input grad-output grad-weight grad-bias
                                                         kw dw scale))
(defmethod nn-temporal-subsampling-acc-grad-parameters ((input tensor.float)
                                                        (grad-output tensor.float)
                                                        (grad-weight tensor.float)
                                                        grad-bias kw dw scale)
  (thnn-float-temporal-subsampling-acc-grad-parameters (defstate) ($handle input)
                                                       ($handle grad-output)
                                                       ($handle grad-weight)
                                                       (if grad-bias
                                                           ($handle grad-bias)
                                                           (nilptr))
                                                       kw dw
                                                       (coerce scale 'double-float)))
(defmethod nn-temporal-subsampling-acc-grad-parameters ((input tensor.double)
                                                        (grad-output tensor.double)
                                                        (grad-weight tensor.double)
                                                        grad-bias kw dw scale)
  (thnn-double-temporal-subsampling-acc-grad-parameters (defstate) ($handle input)
                                                        ($handle grad-output)
                                                        ($handle grad-weight)
                                                        (if grad-bias
                                                            ($handle grad-bias)
                                                            (nilptr))
                                                        kw dw
                                                        (coerce scale 'double-float)))

(defgeneric nn-threshold-update-output (input output threshold val in-place))
(defmethod nn-threshold-update-output ((input tensor.float) (output tensor.float)
                                       threshold val in-place)
  (thnn-float-threshold-update-output (defstate) ($handle input) ($handle output)
                                      (coerce threshold 'double-float)
                                      (coerce val 'double-float) (if in-place 1 0)))
(defmethod nn-threshold-update-output ((input tensor.double) (output tensor.double)
                                       threshold val in-place)
  (thnn-double-threshold-update-output (defstate) ($handle input) ($handle output)
                                       (coerce threshold 'double-float)
                                       (coerce val 'double-float) (if in-place 1 0)))

(defgeneric nn-threshold-update-grad-input (input grad-output grad-input threshold val in-place))
(defmethod nn-threshold-update-grad-input ((input tensor.float) (grad-output tensor.float)
                                           (grad-input tensor.float) threshold val in-place)
  (thnn-float-threshold-update-grad-input (defstate) ($handle input)
                                          ($handle grad-output) ($handle grad-input)
                                          (coerce threshold 'double-float)
                                          (coerce val 'double-float)
                                          (if in-place 1 0)))
(defmethod nn-threshold-update-grad-input ((input tensor.double) (grad-output tensor.double)
                                           (grad-input tensor.double) threshold val in-place)
  (thnn-double-threshold-update-grad-input (defstate) ($handle input)
                                           ($handle grad-output) ($handle grad-input)
                                           (coerce threshold 'double-float)
                                           (coerce val 'double-float)
                                           (if in-place 1 0)))

(defgeneric nn-unfolded-acc (finput input kw kh dw dh padw padh n-input-plane iw ih ow oh))
(defmethod nn-unfolded-acc ((finput tensor.float) (input tensor.float)
                            kw kh dw dh pw ph nip iw ih ow oh)
  (thnn-float-unfolded-acc ($handle finput) ($handle input)
                           kw kh dw dh pw ph nip iw ih ow oh))
(defmethod nn-unfolded-acc ((finput tensor.double) (input tensor.double)
                            kw kh dw dh pw ph nip iw ih ow oh)
  (thnn-double-unfolded-acc ($handle finput) ($handle input)
                            kw kh dw dh pw ph nip iw ih ow oh))

(defgeneric nn-unfolded-copy (finput input kw kh dw dh padw padh n-input-plane iw ih ow oh))
(defmethod nn-unfolded-copy ((finput tensor.float) (input tensor.float)
                             kw kh dw dh pw ph nip iw ih ow oh)
  (thnn-float-unfolded-copy ($handle finput) ($handle input)
                            kw kh dw dh pw ph nip iw ih ow oh))
(defmethod nn-unfolded-copy ((finput tensor.double) (input tensor.double)
                             kw kh dw dh pw ph nip iw ih ow oh)
  (thnn-double-unfolded-copy ($handle finput) ($handle input)
                             kw kh dw dh pw ph nip iw ih ow oh))

(defgeneric nn-volumetric-average-pooling-update-output (input output kt kw kh dt dw dh
                                                         padt padw padh ceil-mode
                                                         count-include-pad))
(defmethod nn-volumetric-average-pooling-update-output ((input tensor.float)
                                                        (output tensor.float)
                                                        kt kw kh dt dw dh pt pw ph
                                                        ceil-mode count-include-pad)
  (thnn-float-volumetric-average-pooling-update-output (defstate) ($handle input)
                                                       ($handle output)
                                                       kt kw kh dt dw dh pt pw ph
                                                       (if ceil-mode 1 0)
                                                       (if count-include-pad 1 0)))
(defmethod nn-volumetric-average-pooling-update-output ((input tensor.double)
                                                        (output tensor.double)
                                                        kt kw kh dt dw dh pt pw ph
                                                        ceil-mode count-include-pad)
  (thnn-double-volumetric-average-pooling-update-output (defstate) ($handle input)
                                                        ($handle output)
                                                        kt kw kh dt dw dh pt pw ph
                                                        (if ceil-mode 1 0)
                                                        (if count-include-pad 1 0)))

(defgeneric nn-volumetric-average-pooling-update-grad-input (input grad-output grad-input
                                                             kt kw kh dt dw dh padt padw padh
                                                             ceil-mode count-include-pad))
(defmethod nn-volumetric-average-pooling-update-grad-input ((input tensor.float)
                                                            (grad-output tensor.float)
                                                            (grad-input tensor.float)
                                                            kt kw kh dt dw dh pt pw ph
                                                            ceil-mode count-include-pad)
  (thnn-float-volumetric-average-pooling-update-grad-input (defstate) ($handle input)
                                                           ($handle grad-output)
                                                           ($handle grad-input)
                                                           kt kw kh dt dw dh pt pw ph
                                                           (if ceil-mode 1 0)
                                                           (if count-include-pad 1 0)))
(defmethod nn-volumetric-average-pooling-update-grad-input ((input tensor.double)
                                                            (grad-output tensor.double)
                                                            (grad-input tensor.double)
                                                            kt kw kh dt dw dh pt pw ph
                                                            ceil-mode count-include-pad)
  (thnn-double-volumetric-average-pooling-update-grad-input (defstate) ($handle input)
                                                            ($handle grad-output)
                                                            ($handle grad-input)
                                                            kt kw kh dt dw dh pt pw ph
                                                            (if ceil-mode 1 0)
                                                            (if count-include-pad 1 0)))

(defgeneric nn-volumetric-convolution-update-output (input output weight bias finput fgrad-input
                                                     dt dw dh pt pw ph))
(defmethod nn-volumetric-convolution-update-output ((input tensor.float) (output tensor.float)
                                                    (weight tensor.float) bias
                                                    (finput tensor.float)
                                                    (fgrad-input tensor.float)
                                                    dt dw dh pt pw ph)
  (thnn-float-volumetric-convolution-update-output (defstate) ($handle input)
                                                   ($handle output)
                                                   ($handle weight)
                                                   (if bias ($handle bias) (nilptr))
                                                   ($handle finput)
                                                   ($handle fgrad-input)
                                                   dt dw dh pt pw ph))
(defmethod nn-volumetric-convolution-update-output ((input tensor.double) (output tensor.double)
                                                    (weight tensor.double) bias
                                                    (finput tensor.double)
                                                    (fgrad-input tensor.double)
                                                    dt dw dh pt pw ph)
  (thnn-double-volumetric-convolution-update-output (defstate) ($handle input)
                                                    ($handle output)
                                                    ($handle weight)
                                                    (if bias ($handle bias) (nilptr))
                                                    ($handle finput)
                                                    ($handle fgrad-input)
                                                    dt dw dh pt pw ph))

(defgeneric nn-volumetric-convolution-update-grad-input (input grad-output grad-input weight finput
                                                         dt dw dh pt pw ph))
(defmethod nn-volumetric-convolution-update-grad-input ((input tensor.float)
                                                        (grad-output tensor.float)
                                                        (grad-input tensor.float)
                                                        (weight tensor.float)
                                                        (finput tensor.float)
                                                        dt dw dh pt pw ph)
  (thnn-float-volumetric-convolution-update-grad-input (defstate) ($handle input)
                                                       ($handle grad-output)
                                                       ($handle grad-input)
                                                       ($handle weight)
                                                       ($handle finput)
                                                       dt dw dh pt pw ph))
(defmethod nn-volumetric-convolution-update-grad-input ((input tensor.double)
                                                        (grad-output tensor.double)
                                                        (grad-input tensor.double)
                                                        (weight tensor.double)
                                                        (finput tensor.double)
                                                        dt dw dh pt pw ph)
  (thnn-double-volumetric-convolution-update-grad-input (defstate) ($handle input)
                                                        ($handle grad-output)
                                                        ($handle grad-input)
                                                        ($handle weight)
                                                        ($handle finput)
                                                        dt dw dh pt pw ph))

(defgeneric nn-volumetric-convolution-acc-grad-parameters (input grad-output grad-weight
                                                           grad-bias finput fgrad-input
                                                           dt dw dh pt pw ph scale))
(defmethod nn-volumetric-convolution-acc-grad-parameters ((input tensor.float)
                                                          (grad-output tensor.float)
                                                          (grad-weight tensor.float)
                                                          grad-bias
                                                          (finput tensor.float)
                                                          (fgrad-input tensor.float)
                                                          dt dw dh pt pw ph scale)
  (thnn-float-volumetric-convolution-acc-grad-parameters (defstate) ($handle input)
                                                         ($handle grad-output)
                                                         ($handle grad-weight)
                                                         (if grad-bias
                                                             ($handle grad-bias)
                                                             (nilptr))
                                                         ($handle finput)
                                                         ($handle fgrad-input)
                                                         dt dw dh pt pw ph
                                                         (coerce scale 'double-float)))
(defmethod nn-volumetric-convolution-acc-grad-parameters ((input tensor.double)
                                                          (grad-output tensor.double)
                                                          (grad-weight tensor.double)
                                                          grad-bias
                                                          (finput tensor.double)
                                                          (fgrad-input tensor.double)
                                                          dt dw dh pt pw ph scale)
  (thnn-double-volumetric-convolution-acc-grad-parameters (defstate) ($handle input)
                                                          ($handle grad-output)
                                                          ($handle grad-weight)
                                                          (if grad-bias
                                                              ($handle grad-bias)
                                                              (nilptr))
                                                          ($handle finput)
                                                          ($handle fgrad-input)
                                                          dt dw dh pt pw ph
                                                          (coerce scale 'double-float)))

(defgeneric nn-volumetric-convolution-mm-update-output (input output weight bias finput
                                                        kt kw kh dt dw dh pt pw ph))
(defmethod nn-volumetric-convolution-mm-update-output ((input tensor.float) (output tensor.float)
                                                       (weight tensor.float) bias
                                                       (finput tensor.float)
                                                       kt kw kh dt dw dh pt pw ph)
  (thnn-float-volumetric-convolution-mm-update-output (defstate) ($handle input)
                                                      ($handle output)
                                                      ($handle weight)
                                                      (if bias ($handle bias) (nilptr))
                                                      ($handle finput)
                                                      kt kw kh dt dw dh pt pw ph))
(defmethod nn-volumetric-convolution-mm-update-output ((input tensor.double) (output tensor.double)
                                                       (weight tensor.double) bias
                                                       (finput tensor.double)
                                                       kt kw kh dt dw dh pt pw ph)
  (thnn-double-volumetric-convolution-mm-update-output (defstate) ($handle input)
                                                       ($handle output)
                                                       ($handle weight)
                                                       (if bias ($handle bias) (nilptr))
                                                       ($handle finput)
                                                       kt kw kh dt dw dh pt pw ph))

(defgeneric nn-volumetric-convolution-mm-update-grad-input (input grad-output grad-input weight
                                                            finput fgrad-input kt kw kh dt dw dh
                                                            pt pw ph))
(defmethod nn-volumetric-convolution-mm-update-grad-input ((input tensor.float)
                                                           (grad-output tensor.float)
                                                           (grad-input tensor.float)
                                                           (weight tensor.float)
                                                           (finput tensor.float)
                                                           (fgrad-input tensor.float)
                                                           kt kw kh dt dw dh pt pw ph)
  (thnn-float-volumetric-convolution-mm-update-grad-input (defstate) ($handle input)
                                                          ($handle grad-output)
                                                          ($handle grad-input)
                                                          ($handle weight)
                                                          ($handle finput)
                                                          ($handle fgrad-input)
                                                          kt kw kh dt dw dh pt pw ph))
(defmethod nn-volumetric-convolution-mm-update-grad-input ((input tensor.double)
                                                           (grad-output tensor.double)
                                                           (grad-input tensor.double)
                                                           (weight tensor.double)
                                                           (finput tensor.double)
                                                           (fgrad-input tensor.double)
                                                           kt kw kh dt dw dh pt pw ph)
  (thnn-double-volumetric-convolution-mm-update-grad-input (defstate) ($handle input)
                                                           ($handle grad-output)
                                                           ($handle grad-input)
                                                           ($handle weight)
                                                           ($handle finput)
                                                           ($handle fgrad-input)
                                                           kt kw kh dt dw dh pt pw ph))

(defgeneric nn-volumetric-convolution-mm-acc-grad-parameters (input grad-output grad-weight
                                                              grad-bias finput kt kw kh dt dw dh
                                                              pt pw ph scale))
(defmethod nn-volumetric-convolution-mm-acc-grad-parameters ((input tensor.float)
                                                             (grad-output tensor.float)
                                                             (grad-weight tensor.float)
                                                             grad-bias
                                                             (finput tensor.float)
                                                             kt kw kh dt dw dh pt pw ph scale)
  (thnn-float-volumetric-convolution-mm-acc-grad-parameters (defstate) ($handle input)
                                                            ($handle grad-output)
                                                            ($handle grad-weight)
                                                            (if grad-bias
                                                                ($handle grad-bias)
                                                                (nilptr))
                                                            ($handle finput)
                                                            kt kw kh dt dw dh pt pw ph
                                                            (coerce scale 'double-float)))
(defmethod nn-volumetric-convolution-mm-acc-grad-parameters ((input tensor.double)
                                                             (grad-output tensor.double)
                                                             (grad-weight tensor.double)
                                                             grad-bias
                                                             (finput tensor.double)
                                                             kt kw kh dt dw dh pt pw ph scale)
  (thnn-double-volumetric-convolution-mm-acc-grad-parameters (defstate) ($handle input)
                                                             ($handle grad-output)
                                                             ($handle grad-weight)
                                                             (if grad-bias
                                                                 ($handle grad-bias)
                                                                 (nilptr))
                                                             ($handle finput)
                                                             kt kw kh dt dw dh pt pw ph
                                                             (coerce scale 'double-float)))

(defgeneric nn-volumetric-dilated-convolution-update-output (input output weight bias columns
                                                             ones kt kw kh dt dw dh pt pw ph
                                                             dlt dlw dlh))
(defmethod nn-volumetric-dilated-convolution-update-output ((input tensor.float)
                                                            (output tensor.float)
                                                            (weight tensor.float)
                                                            bias
                                                            (columns tensor.float)
                                                            (ones tensor.float)
                                                            kt kw kh dt dw dh pt pw ph
                                                            dlt dlw dlh)
  (thnn-float-volumetric-dilated-convolution-update-output (defstate) ($handle input)
                                                           ($handle output)
                                                           ($handle weight)
                                                           (if bias ($handle bias) (nilptr))
                                                           ($handle columns)
                                                           ($handle ones)
                                                           kt kw kh dt dw dh pt pw ph
                                                           dlt dlw dlh))
(defmethod nn-volumetric-dilated-convolution-update-output ((input tensor.double)
                                                            (output tensor.double)
                                                            (weight tensor.double)
                                                            bias
                                                            (columns tensor.double)
                                                            (ones tensor.double)
                                                            kt kw kh dt dw dh pt pw ph
                                                            dlt dlw dlh)
  (thnn-double-volumetric-dilated-convolution-update-output (defstate) ($handle input)
                                                            ($handle output)
                                                            ($handle weight)
                                                            (if bias ($handle bias) (nilptr))
                                                            ($handle columns)
                                                            ($handle ones)
                                                            kt kw kh dt dw dh pt pw ph
                                                            dlt dlw dlh))

(defgeneric nn-volumetric-dilated-convolution-update-grad-input (input grad-output grad-input
                                                                 weight grad-columns
                                                                 kt kw kh dt dw dh pt pw ph
                                                                 dlt dlw dlh))
(defmethod nn-volumetric-dilated-convolution-update-grad-input ((input tensor.float)
                                                                (grad-output tensor.float)
                                                                (grad-input tensor.float)
                                                                (weight tensor.float)
                                                                (grad-columns tensor.float)
                                                                kt kw kh dt dw dh pt pw ph
                                                                dlt dlw dlh)
  (thnn-float-volumetric-dilated-convolution-update-grad-input (defstate) ($handle input)
                                                               ($handle grad-output)
                                                               ($handle grad-input)
                                                               ($handle weight)
                                                               ($handle grad-columns)
                                                               kt kw kh dt dw dh pt pw ph
                                                               dlt dlw dlh))
(defmethod nn-volumetric-dilated-convolution-update-grad-input ((input tensor.double)
                                                                (grad-output tensor.double)
                                                                (grad-input tensor.double)
                                                                (weight tensor.double)
                                                                (grad-columns tensor.double)
                                                                kt kw kh dt dw dh pt pw ph
                                                                dlt dlw dlh)
  (thnn-double-volumetric-dilated-convolution-update-grad-input (defstate) ($handle input)
                                                                ($handle grad-output)
                                                                ($handle grad-input)
                                                                ($handle weight)
                                                                ($handle grad-columns)
                                                                kt kw kh dt dw dh pt pw ph
                                                                dlt dlw dlh))

(defgeneric nn-volumetric-dilated-convolution-acc-grad-parameters (input grad-output grad-weight
                                                                   grad-bias columns ones
                                                                   kt kw kh dt dw dh pt pw ph
                                                                   dlt dlw dlh scale))
(defmethod nn-volumetric-dilated-convolution-acc-grad-parameters ((input tensor.float)
                                                                  (grad-output tensor.float)
                                                                  (grad-weight tensor.float)
                                                                  grad-bias
                                                                  (columns tensor.float)
                                                                  (ones tensor.float)
                                                                  kt kw kh dt dw dh pt pw ph
                                                                  dlt dlw dlh scale)
  (thnn-float-volumetric-dilated-convolution-acc-grad-parameters (defstate) ($handle input)
                                                                 ($handle grad-output)
                                                                 ($handle grad-weight)
                                                                 (if grad-bias
                                                                     ($handle grad-bias)
                                                                     (nilptr))
                                                                 ($handle columns)
                                                                 ($handle ones)
                                                                 kt kw kh dt dw dh pt pw ph
                                                                 dlt dlw dlh
                                                                 (coerce scale 'double-float)))
(defmethod nn-volumetric-dilated-convolution-acc-grad-parameters ((input tensor.double)
                                                                  (grad-output tensor.double)
                                                                  (grad-weight tensor.double)
                                                                  grad-bias
                                                                  (columns tensor.double)
                                                                  (ones tensor.double)
                                                                  kt kw kh dt dw dh pt pw ph
                                                                  dlt dlw dlh scale)
  (thnn-double-volumetric-dilated-convolution-acc-grad-parameters (defstate) ($handle input)
                                                                  ($handle grad-output)
                                                                  ($handle grad-weight)
                                                                  (if grad-bias
                                                                      ($handle grad-bias)
                                                                      (nilptr))
                                                                  ($handle columns)
                                                                  ($handle ones)
                                                                  kt kw kh dt dw dh pt pw ph
                                                                  dlt dlw dlh
                                                                  (coerce scale 'double-float)))

(defgeneric nn-volumetric-dilated-max-pooling-update-output (input output indices kt kw kh
                                                             dt dw dh pt pw ph dlt dlw dlh
                                                             ceil-mode))
(defmethod nn-volumetric-dilated-max-pooling-update-output ((input tensor.float)
                                                            (output tensor.float)
                                                            (indices tensor.long)
                                                            kt kw kh dt dw dh pt pw ph
                                                            dlt dlw dlh ceil-mode)
  (thnn-float-volumetric-dilated-max-pooling-update-output (defstate) ($handle input)
                                                           ($handle output)
                                                           ($handle indices)
                                                           kt kw kh dt dw dh pt pw ph
                                                           dlt dlw dlh
                                                           (if ceil-mode 1 0)))
(defmethod nn-volumetric-dilated-max-pooling-update-output ((input tensor.double)
                                                            (output tensor.double)
                                                            (indices tensor.long)
                                                            kt kw kh dt dw dh pt pw ph
                                                            dlt dlw dlh ceil-mode)
  (thnn-double-volumetric-dilated-max-pooling-update-output (defstate) ($handle input)
                                                            ($handle output)
                                                            ($handle indices)
                                                            kt kw kh dt dw dh pt pw ph
                                                            dlt dlw dlh
                                                            (if ceil-mode 1 0)))

(defgeneric nn-volumetric-dilated-max-pooling-update-grad-input (input grad-output grad-input
                                                                 indices kt kw kh dt dw dh
                                                                 pt pw ph dlt dlw dlh ceil-mode))
(defmethod nn-volumetric-dilated-max-pooling-update-grad-input ((input tensor.float)
                                                                (grad-output tensor.float)
                                                                (grad-input tensor.float)
                                                                (indices tensor.long)
                                                                kt kw kh dt dw dh
                                                                pt pw ph dlt dlw dlh ceil-mode)
  (thnn-float-volumetric-dilated-max-pooling-update-grad-input (defstate) ($handle input)
                                                               ($handle grad-output)
                                                               ($handle grad-input)
                                                               ($handle indices)
                                                               kt kw kh dt dw dh
                                                               pt pw ph dlt dlw dlh
                                                               (if ceil-mode 1 0)))
(defmethod nn-volumetric-dilated-max-pooling-update-grad-input ((input tensor.double)
                                                                (grad-output tensor.double)
                                                                (grad-input tensor.double)
                                                                (indices tensor.long)
                                                                kt kw kh dt dw dh
                                                                pt pw ph dlt dlw dlh ceil-mode)
  (thnn-double-volumetric-dilated-max-pooling-update-grad-input (defstate) ($handle input)
                                                                ($handle grad-output)
                                                                ($handle grad-input)
                                                                ($handle indices)
                                                                kt kw kh dt dw dh
                                                                pt pw ph dlt dlw dlh
                                                                (if ceil-mode 1 0)))

(defgeneric nn-volumetric-fractional-max-pooling-update-output (input output ot ow oh pst psw psh
                                                                indices random-samples))
(defmethod nn-volumetric-fractional-max-pooling-update-output ((input tensor.float)
                                                               (output tensor.float)
                                                               ot ow oh pst psw psh
                                                               (indices tensor.long)
                                                               (random-samples tensor.float))
  (thnn-float-volumetric-fractional-max-pooling-update-output (defstate) ($handle input)
                                                              ($handle output)
                                                              ot ow oh pst psw psh
                                                              ($handle indices)
                                                              ($handle random-samples)))
(defmethod nn-volumetric-fractional-max-pooling-update-output ((input tensor.double)
                                                               (output tensor.double)
                                                               ot ow oh pst psw psh
                                                               (indices tensor.long)
                                                               (random-samples tensor.double))
  (thnn-double-volumetric-fractional-max-pooling-update-output (defstate) ($handle input)
                                                               ($handle output)
                                                               ot ow oh pst psw psh
                                                               ($handle indices)
                                                               ($handle random-samples)))

(defgeneric nn-volumetric-fractional-max-pooling-update-grad-input (input grad-output grad-input
                                                                    ot ow oh pst psw psh indices))
(defmethod nn-volumetric-fractional-max-pooling-update-grad-input ((input tensor.float)
                                                                   (grad-output tensor.float)
                                                                   (grad-input tensor.float)
                                                                   ot ow oh pst psw psh
                                                                   (indices tensor.long))
  (thnn-float-volumetric-fractional-max-pooling-update-grad-input (defstate) ($handle input)
                                                                  ($handle grad-output)
                                                                  ($handle grad-input)
                                                                  ot ow oh pst psw psh
                                                                  ($handle indices)))
(defmethod nn-volumetric-fractional-max-pooling-update-grad-input ((input tensor.double)
                                                                   (grad-output tensor.double)
                                                                   (grad-input tensor.double)
                                                                   ot ow oh pst psw psh
                                                                   (indices tensor.long))
  (thnn-double-volumetric-fractional-max-pooling-update-grad-input (defstate) ($handle input)
                                                                   ($handle grad-output)
                                                                   ($handle grad-input)
                                                                   ot ow oh pst psw psh
                                                                   ($handle indices)))

(defgeneric nn-volumetric-full-convolution-update-output (input output weight bias finput
                                                          fgrad-input dt dw dh pt pw ph
                                                          at aw ah))
(defmethod nn-volumetric-full-convolution-update-output ((input tensor.float)
                                                         (output tensor.float)
                                                         (weight tensor.float)
                                                         bias
                                                         (finput tensor.float)
                                                         (fgrad-input tensor.float)
                                                         dt dw dh pt pw ph at aw ah)
  (thnn-float-volumetric-full-convolution-update-output (defstate) ($handle input)
                                                        ($handle output)
                                                        ($handle weight)
                                                        (if bias ($handle bias) (nilptr))
                                                        ($handle finput)
                                                        ($handle fgrad-input)
                                                        dt dw dh pt pw ph at aw ah))
(defmethod nn-volumetric-full-convolution-update-output ((input tensor.double)
                                                         (output tensor.double)
                                                         (weight tensor.double)
                                                         bias
                                                         (finput tensor.double)
                                                         (fgrad-input tensor.double)
                                                         dt dw dh pt pw ph at aw ah)
  (thnn-double-volumetric-full-convolution-update-output (defstate) ($handle input)
                                                         ($handle output)
                                                         ($handle weight)
                                                         (if bias ($handle bias) (nilptr))
                                                         ($handle finput)
                                                         ($handle fgrad-input)
                                                         dt dw dh pt pw ph at aw ah))

(defgeneric nn-volumetric-full-convolution-update-grad-input (input grad-output grad-input
                                                              weight finput fgrad-input
                                                              dt dw dh pt pw ph at aw ah))
(defmethod nn-volumetric-full-convolution-update-grad-input ((input tensor.float)
                                                             (grad-output tensor.float)
                                                             (grad-input tensor.float)
                                                             (weight tensor.float)
                                                             (finput tensor.float)
                                                             (fgrad-input tensor.float)
                                                             dt dw dh pt pw ph at aw ah)
  (thnn-float-volumetric-full-convolution-update-grad-input (defstate) ($handle input)
                                                            ($handle grad-output)
                                                            ($handle grad-input)
                                                            ($handle weight)
                                                            ($handle finput)
                                                            ($handle fgrad-input)
                                                            dt dw dh pt pw ph at aw ah))
(defmethod nn-volumetric-full-convolution-update-grad-input ((input tensor.double)
                                                             (grad-output tensor.double)
                                                             (grad-input tensor.double)
                                                             (weight tensor.double)
                                                             (finput tensor.double)
                                                             (fgrad-input tensor.double)
                                                             dt dw dh pt pw ph at aw ah)
  (thnn-double-volumetric-full-convolution-update-grad-input (defstate) ($handle input)
                                                             ($handle grad-output)
                                                             ($handle grad-input)
                                                             ($handle weight)
                                                             ($handle finput)
                                                             ($handle fgrad-input)
                                                             dt dw dh pt pw ph at aw ah))

(defgeneric nn-volumetric-full-convolution-acc-grad-parameters (input grad-output grad-weight
                                                                grad-bias finput fgrad-input
                                                                dt dw dh pt pw ph at aw ah
                                                                scale))
(defmethod nn-volumetric-full-convolution-acc-grad-parameters ((input tensor.float)
                                                               (grad-output tensor.float)
                                                               (grad-weight tensor.float)
                                                               grad-bias
                                                               (finput tensor.float)
                                                               (fgrad-input tensor.float)
                                                               dt dw dh pt pw ph at aw ah
                                                               scale)
  (thnn-float-volumetric-full-convolution-update-acc-grad-parameters (defstate)
                                                                     ($handle input)
                                                                     ($handle grad-output)
                                                                     ($handle grad-weight)
                                                                     (if grad-bias
                                                                         ($handle grad-bias)
                                                                         (nilptr))
                                                                     ($handle finput)
                                                                     ($handle fgrad-input)
                                                                     dt dw dh pt pw ph at aw ah
                                                                     (coerce scale 'double-float)))
(defmethod nn-volumetric-full-convolution-acc-grad-parameters ((input tensor.double)
                                                               (grad-output tensor.double)
                                                               (grad-weight tensor.double)
                                                               grad-bias
                                                               (finput tensor.double)
                                                               (fgrad-input tensor.double)
                                                               dt dw dh pt pw ph at aw ah
                                                               scale)
  (thnn-double-volumetric-full-convolution-update-acc-grad-parameters (defstate)
                                                                      ($handle input)
                                                                      ($handle grad-output)
                                                                      ($handle grad-weight)
                                                                      (if grad-bias
                                                                          ($handle grad-bias)
                                                                          (nilptr))
                                                                      ($handle finput)
                                                                      ($handle fgrad-input)
                                                                      dt dw dh pt pw ph at aw ah
                                                                      (coerce scale 'double-float)))

(defgeneric nn-volumetric-full-dilated-convolution-update-output (input output weight bias
                                                                  finput fgrad-input
                                                                  dt dw dh pt pw ph dlt dlw dlh
                                                                  at aw ah))
(defmethod nn-volumetric-full-dilated-convolution-update-output ((input tensor.float)
                                                                 (output tensor.float)
                                                                 (weight tensor.float)
                                                                 bias
                                                                 (finput tensor.float)
                                                                 (fgrad-input tensor.float)
                                                                 dt dw dh pt pw ph dlt dlw dlh
                                                                 at aw ah)
  (thnn-float-volumetric-full-dilated-convolution-update-output (defstate) ($handle input)
                                                                ($handle output)
                                                                ($handle weight)
                                                                (if bias
                                                                    ($handle bias)
                                                                    (nilptr))
                                                                ($handle finput)
                                                                ($handle fgrad-input)
                                                                dt dw dh pt pw ph dlt dlw dlh
                                                                at aw ah))
(defmethod nn-volumetric-full-dilated-convolution-update-output ((input tensor.double)
                                                                 (output tensor.double)
                                                                 (weight tensor.double)
                                                                 bias
                                                                 (finput tensor.double)
                                                                 (fgrad-input tensor.double)
                                                                 dt dw dh pt pw ph dlt dlw dlh
                                                                 at aw ah)
  (thnn-double-volumetric-full-dilated-convolution-update-output (defstate) ($handle input)
                                                                 ($handle output)
                                                                 ($handle weight)
                                                                 (if bias
                                                                     ($handle bias)
                                                                     (nilptr))
                                                                 ($handle finput)
                                                                 ($handle fgrad-input)
                                                                 dt dw dh pt pw ph dlt dlw dlh
                                                                 at aw ah))

(defgeneric nn-volumetric-full-dilated-convolution-update-grad-input (input grad-output grad-input
                                                                      weight finput fgrad-input
                                                                      dt dw dh pt pw ph dlt dlw dlh
                                                                      at aw ah))
(defmethod nn-volumetric-full-dilated-convolution-update-grad-input ((input tensor.float)
                                                                     (grad-output tensor.float)
                                                                     (grad-input tensor.float)
                                                                     (weight tensor.float)
                                                                     (finput tensor.float)
                                                                     (fgrad-input tensor.float)
                                                                     dt dw dh pt pw ph dlt dlw dlh
                                                                     at aw ah)
  (thnn-float-volumetric-full-dilated-convolution-update-grad-input (defstate)
                                                                    ($handle input)
                                                                    ($handle grad-output)
                                                                    ($handle grad-input)
                                                                    ($handle weight)
                                                                    ($handle finput)
                                                                    ($handle fgrad-input)
                                                                    dt dw dh pt pw ph dlt dlw dlh
                                                                    at aw ah))
(defmethod nn-volumetric-full-dilated-convolution-update-grad-input ((input tensor.double)
                                                                     (grad-output tensor.double)
                                                                     (grad-input tensor.double)
                                                                     (weight tensor.double)
                                                                     (finput tensor.double)
                                                                     (fgrad-input tensor.double)
                                                                     dt dw dh pt pw ph dlt dlw dlh
                                                                     at aw ah)
  (thnn-double-volumetric-full-dilated-convolution-update-grad-input (defstate)
                                                                     ($handle input)
                                                                     ($handle grad-output)
                                                                     ($handle grad-input)
                                                                     ($handle weight)
                                                                     ($handle finput)
                                                                     ($handle fgrad-input)
                                                                     dt dw dh pt pw ph dlt dlw dlh
                                                                     at aw ah))

(defgeneric nn-volumetric-full-dilated-convolution-acc-grad-parameters (input grad-output
                                                                        grad-weight grad-bias
                                                                        finput fgrad-input
                                                                        dt dw dh pt pw ph
                                                                        dlt dlw dlh at aw ah
                                                                        scale))
(defmethod nn-volumetric-full-dilated-convolution-acc-grad-parameters ((input tensor.float)
                                                                       (grad-output tensor.float)
                                                                       (grad-weight tensor.float)
                                                                       grad-bias
                                                                       (finput tensor.float)
                                                                       (fgrad-input tensor.float)
                                                                       dt dw dh pt pw ph
                                                                       dlt dlw dlh at aw ah
                                                                       scale)
  (thnn-float-volumetric-full-dilated-convolution-acc-grad-parameters (defstate)
                                                                      ($handle input)
                                                                      ($handle grad-output)
                                                                      ($handle grad-weight)
                                                                      (if grad-bias
                                                                          ($handle grad-bias)
                                                                          (nilptr))
                                                                      ($handle finput)
                                                                      ($handle fgrad-input)
                                                                      dt dw dh pt pw ph
                                                                      dlt dlw dlh at aw ah
                                                                      (coerce scale 'double-float)))
(defmethod nn-volumetric-full-dilated-convolution-acc-grad-parameters ((input tensor.double)
                                                                       (grad-output tensor.double)
                                                                       (grad-weight tensor.double)
                                                                       grad-bias
                                                                       (finput tensor.double)
                                                                       (fgrad-input tensor.double)
                                                                       dt dw dh pt pw ph
                                                                       dlt dlw dlh at aw ah
                                                                       scale)
  (thnn-double-volumetric-full-dilated-convolution-acc-grad-parameters (defstate)
                                                                       ($handle input)
                                                                       ($handle grad-output)
                                                                       ($handle grad-weight)
                                                                       (if grad-bias
                                                                           ($handle grad-bias)
                                                                           (nilptr))
                                                                       ($handle finput)
                                                                       ($handle fgrad-input)
                                                                       dt dw dh pt pw ph
                                                                       dlt dlw dlh at aw ah
                                                                       (coerce scale
                                                                               'double-float)))

(defgeneric nn-volumetric-max-pooling-update-output (input output indices kt kw kh
                                                     dt dw dh pt pw ph ceil-mode))
(defmethod nn-volumetric-max-pooling-update-output ((input tensor.float) (output tensor.float)
                                                    (indices tensor.long)
                                                    kt kw kh dt dw dh pt pw ph ceil-mode)
  (thnn-float-volumetric-max-pooling-update-output (defstate) ($handle input)
                                                   ($handle output)
                                                   ($handle indices)
                                                   kt kw kh dt dw dh pt pw ph
                                                   (if ceil-mode 1 0)))
(defmethod nn-volumetric-max-pooling-update-output ((input tensor.double) (output tensor.double)
                                                    (indices tensor.long)
                                                    kt kw kh dt dw dh pt pw ph ceil-mode)
  (thnn-double-volumetric-max-pooling-update-output (defstate) ($handle input)
                                                    ($handle output)
                                                    ($handle indices)
                                                    kt kw kh dt dw dh pt pw ph
                                                    (if ceil-mode 1 0)))

(defgeneric nn-volumetric-max-pooling-update-grad-input (input grad-output grad-input indices
                                                         kt kw kh dt dw dh pt pw ph ceil-mode))
(defmethod nn-volumetric-max-pooling-update-grad-input ((input tensor.float)
                                                        (grad-output tensor.float)
                                                        (grad-input tensor.float)
                                                        (indices tensor.long)
                                                        kt kw kh dt dw dh pt pw ph ceil-mode)
  (thnn-float-volumetric-max-pooling-update-grad-input (defstate) ($handle input)
                                                       ($handle grad-output)
                                                       ($handle grad-input)
                                                       ($handle indices)
                                                       kt kw kh dt dw dh pt pw ph
                                                       (if ceil-mode 1 0)))
(defmethod nn-volumetric-max-pooling-update-grad-input ((input tensor.double)
                                                        (grad-output tensor.double)
                                                        (grad-input tensor.double)
                                                        (indices tensor.long)
                                                        kt kw kh dt dw dh pt pw ph ceil-mode)
  (thnn-double-volumetric-max-pooling-update-grad-input (defstate) ($handle input)
                                                        ($handle grad-output)
                                                        ($handle grad-input)
                                                        ($handle indices)
                                                        kt kw kh dt dw dh pt pw ph
                                                        (if ceil-mode 1 0)))

(defgeneric nn-volumetric-max-unpooling-update-output (input output indices ot ow oh dt dw dh
                                                       pt pw ph))
(defmethod nn-volumetric-max-unpooling-update-output ((input tensor.float) (output tensor.float)
                                                      (indices tensor.long)
                                                      ot ow oh dt dw dh pt pw ph)
  (thnn-float-volumetric-max-unpooling-update-output (defstate) ($handle input)
                                                     ($handle output)
                                                     ($handle indices)
                                                     ot ow oh dt dw dh pt pw ph))
(defmethod nn-volumetric-max-unpooling-update-output ((input tensor.double) (output tensor.double)
                                                      (indices tensor.long)
                                                      ot ow oh dt dw dh pt pw ph)
  (thnn-double-volumetric-max-unpooling-update-output (defstate) ($handle input)
                                                      ($handle output)
                                                      ($handle indices)
                                                      ot ow oh dt dw dh pt pw ph))

(defgeneric nn-volumetric-max-unpooling-update-grad-input (input grad-output grad-input indices
                                                           ot ow oh dt dw dh pt pw ph))
(defmethod nn-volumetric-max-unpooling-update-grad-input ((input tensor.float)
                                                          (grad-output tensor.float)
                                                          (grad-input tensor.float)
                                                          (indices tensor.long)
                                                          ot ow oh dt dw dh pt pw ph)
  (thnn-float-volumetric-max-unpooling-update-grad-input (defstate) ($handle input)
                                                         ($handle grad-output)
                                                         ($handle grad-input)
                                                         ($handle indices)
                                                         ot ow oh dt dw dh pt pw ph))
(defmethod nn-volumetric-max-unpooling-update-grad-input ((input tensor.double)
                                                          (grad-output tensor.double)
                                                          (grad-input tensor.double)
                                                          (indices tensor.long)
                                                          ot ow oh dt dw dh pt pw ph)
  (thnn-double-volumetric-max-unpooling-update-grad-input (defstate) ($handle input)
                                                          ($handle grad-output)
                                                          ($handle grad-input)
                                                          ($handle indices)
                                                          ot ow oh dt dw dh pt pw ph))

(defgeneric nn-volumetric-replication-padding-update-output (input output pl pr pt pb pf pk))
(defmethod nn-volumetric-replication-padding-update-output ((input tensor.float)
                                                            (output tensor.float)
                                                            pl pr pt pb pf pk)
  (thnn-float-volumetric-replication-padding-update-output (defstate) ($handle input)
                                                           ($handle output)
                                                           pl pr pt pb pf pk))
(defmethod nn-volumetric-replication-padding-update-output ((input tensor.double)
                                                            (output tensor.double)
                                                            pl pr pt pb pf pk)
  (thnn-double-volumetric-replication-padding-update-output (defstate) ($handle input)
                                                            ($handle output)
                                                            pl pr pt pb pf pk))

(defgeneric nn-volumetric-replication-padding-update-grad-input (input grad-output grad-input
                                                                 pl pr pt pb pf pk))
(defmethod nn-volumetric-replication-padding-update-grad-input ((input tensor.float)
                                                                (grad-output tensor.float)
                                                                (grad-input tensor.float)
                                                                pl pr pt pb pf pk)
  (thnn-float-volumetric-replication-padding-update-grad-input (defstate) ($handle input)
                                                               ($handle grad-output)
                                                               ($handle grad-input)
                                                               pl pr pt pb pf pk))
(defmethod nn-volumetric-replication-padding-update-grad-input ((input tensor.double)
                                                                (grad-output tensor.double)
                                                                (grad-input tensor.double)
                                                                pl pr pt pb pf pk)
  (thnn-double-volumetric-replication-padding-update-grad-input (defstate) ($handle input)
                                                                ($handle grad-output)
                                                                ($handle grad-input)
                                                                pl pr pt pb pf pk))

(defgeneric nn-volumetric-upsampling-nearest-update-output (input output scale-factor))
(defmethod nn-volumetric-upsampling-nearest-update-output ((input tensor.float)
                                                           (output tensor.float)
                                                           scale-factor)
  (thnn-float-volumetric-upsampling-nearest-update-output (defstate) ($handle input)
                                                          ($handle output)
                                                          scale-factor))
(defmethod nn-volumetric-upsampling-nearest-update-output ((input tensor.double)
                                                           (output tensor.double)
                                                           scale-factor)
  (thnn-double-volumetric-upsampling-nearest-update-output (defstate) ($handle input)
                                                           ($handle output)
                                                           scale-factor))

(defgeneric nn-volumetric-upsampling-nearest-update-grad-input (input grad-output
                                                                grad-input scale-factor))
(defmethod nn-volumetric-upsampling-nearest-update-grad-input ((input tensor.float)
                                                               (grad-output tensor.float)
                                                               (grad-input tensor.float)
                                                               scale-factor)
  (thnn-float-volumetric-upsampling-nearest-update-grad-input (defstate) ($handle input)
                                                              ($handle grad-output)
                                                              ($handle grad-input)
                                                              scale-factor))
(defmethod nn-volumetric-upsampling-nearest-update-grad-input ((input tensor.double)
                                                               (grad-output tensor.double)
                                                               (grad-input tensor.double)
                                                               scale-factor)
  (thnn-double-volumetric-upsampling-nearest-update-grad-input (defstate) ($handle input)
                                                               ($handle grad-output)
                                                               ($handle grad-input)
                                                               scale-factor))

(defgeneric nn-volumetric-upsampling-trilinear-update-output (input output od oh ow align-corners))
(defmethod nn-volumetric-upsampling-trilinear-update-output ((input tensor.float)
                                                             (output tensor.float)
                                                             od oh ow
                                                             align-corners)
  (thnn-float-volumetric-upsampling-trilinear-update-output (defstate) ($handle input)
                                                            ($handle output)
                                                            od oh ow
                                                            (if align-corners 1 0)))
(defmethod nn-volumetric-upsampling-trilinear-update-output ((input tensor.double)
                                                             (output tensor.double)
                                                             od oh ow
                                                             align-corners)
  (thnn-double-volumetric-upsampling-trilinear-update-output (defstate) ($handle input)
                                                             ($handle output)
                                                             od oh ow
                                                             (if align-corners 1 0)))

(defgeneric nn-volumetric-upsampling-trilinear-update-grad-input (grad-output grad-input
                                                                  ib ic it ih iw od oh ow
                                                                  align-corners))
(defmethod nn-volumetric-upsampling-trilinear-update-grad-input ((grad-output tensor.float)
                                                                 (grad-input tensor.float)
                                                                 ib ic it ih iw od oh ow
                                                                 align-corners)
  (thnn-float-volumetric-upsampling-trilinear-update-grad-input (defstate)
                                                                ($handle grad-output)
                                                                ($handle grad-input)
                                                                ib ic it ih iw od oh ow
                                                                (if align-corners 1 0)))
(defmethod nn-volumetric-upsampling-trilinear-update-grad-input ((grad-output tensor.double)
                                                                 (grad-input tensor.double)
                                                                 ib ic it ih iw od oh ow
                                                                 align-corners)
  (thnn-double-volumetric-upsampling-trilinear-update-grad-input (defstate)
                                                                 ($handle grad-output)
                                                                 ($handle grad-input)
                                                                 ib ic it ih iw od oh ow
                                                                 (if align-corners 1 0)))
