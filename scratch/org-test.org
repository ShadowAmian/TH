#+TITLE: Common Lisp code in the ORG file
#+AUTHOR: Sungjin Chun
#+EMAIL: chunsj@gmail.com

* Literate programming
I love the concept of literate programming or write down your thought and make it happen at the same time style approach. I've learned from Smalltalk or Squeak exactly that dynamic and active environment is the most important part of human creativity and that org-babel can realize similar environment for common lisp in emacs.
I'd like to create a kind of template so that future-myself can refer how to write some dynamic documents in emacs.

* Package definition - defpackage
Every source code should be in the src block and you'd better create a package before writing down your own code. Executing code block is C-c C-c.
#+BEGIN_SRC lisp :results silent
(defpackage :my-org-playground
  (:use #:common-lisp
        #:mu
        #:th))
#+END_SRC

* Writing code inside the defined package - in-package
Note that the *in-package* part in the code block; you need to specify package or default namespace will be used.
** Function definition
#+BEGIN_SRC lisp :results silent
(in-package :my-org-playground)
(defun hello-tensor ()
  (tensor '((1 2) (3 4))))
#+END_SRC
** Variable/parameter definition
#+BEGIN_SRC lisp :results silent
(defparameter *my-org-playground-parameter* 123)
#+END_SRC

* Using definitions in code
Note that *in-package* is used here as well.
** Example #1
#+BEGIN_SRC lisp
(in-package :my-org-playground)
(hello-tensor)
#+END_SRC

#+RESULTS:
: #<TENSOR.FLOAT (2 2)>
: |  1.0000e+0   2.0000e+0|
: |  3.0000e+0   4.0000e+0|
** Example #2
#+BEGIN_SRC lisp
(+ 456 *my-org-playground-parameter*)
#+END_SRC

#+RESULTS:
: 579
