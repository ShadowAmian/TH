(defpackage :pca
  (:use #:common-lisp
        #:mu
        #:th))

(in-package :pca)

(defclass pca ()
  ((ncomp :initform nil :accessor number-of-components)
   (mean :initform nil :accessor sample-mean)))

(defun eigen (pca x maxiter)
  (let* ((xsz ($size x))
         (nsamples ($ xsz 0))
         (nfeatures ($ xsz 1))
         (evals (tensor))
         (evecs (tensor))
         (index -1))
    (if (> nsamples nfeatures)
        (let ((cov ((cov x))))
          ($ev! evals evecs cov)
          (setf index (- nfeatures (number-of-components pca))))
        (let ((cov ((cov x))))
          ($ev! evals evecs cov)
          (setf evecs ($div! ($@ ($transpose x) evecs)
                             ($* ev)))
          (setf index (- nfeatures (number-of-components pca)))))))

(defun em (pca x maxiter))

(defun fit (pca x &key (method :eigen) (maxiter 100))
  (setf (sample-mean pca) ($mean x 0))
  (cond ((eq method :eigen) (eigen pca ($- x (sample-mean pca)) maxiter))
        ((eq method :em) (em pca ($- x (sample-mean pca)) maxiter))
        (T (error "no such method ~A" method))))

(let ((x (tensor '((1 2 3 4) (5 6 7 8) (9 10 11 12)))))
  (prn ($mean x 1))
  (prn ($repeat ($mean x 1) 1 ($size x 1)))
  (prn ($var x))
  (prn (cov x)))

(th::th-float-tensor-var)
($var)

(defun cov (x &optional biased)
  (let ((m x))
    (when (> ($ndim m) 2)
      (error "x has more than 2 dimensions."))
    (when (< ($ndim m) 2)
      (setf m ($view m 1 -1)))
    (let ((a ($- m ($repeat ($mean m 0) ($size m 0) 1))))
      ($div! ($@ ($transpose a) a) (- ($size x 0) (if biased 0 1))))))

($var )

(let ((x (tensor '(1 2 3 4 5 6))))
  (prn ($view x 1 -1))
  (prn (cov x)))

(let ((x (tensor '((90 60 90)
                   (90 90 30)
                   (60 60 60)
                   (60 60 90)
                   (30 30 30))))
      (e (tensor))
      (v (tensor)))
  ;;(prn ($mean x 0))
  ;;(prn ($- x ($repeat ($mean x 0) ($size x 0) 1)))
  (prn (cov x))
  (let ((a ($- x ($repeat ($mean x 0) ($size x 0) 1))))
    (prn ($div! ($@ ($transpose a) a) (- ($size x 0) 1))))
  ($ev! e v ($index x 0 '(0 1 2)) t))

(let ((a (-> (tensor '((1.96  0.00  0.00  0.00  0.00)
                       (-6.49  3.80  0.00  0.00  0.00)
                       (-0.47 -6.39  4.17  0.00  0.00)
                       (-7.20  1.50 -1.51  5.70  0.00)
                       (-0.65 -6.34  2.67  1.80 -7.10)))
             ($transpose)))
      (b nil)
      (e (tensor))
      (v (tensor)))
  (setf b ($+ a ($transpose ($triu a 1))))
  (prn b)
  ($ev! e v a t)
  (prn e)
  (prn v)
  ;;($ev! e v b t)
  ;;(prn e)
  ;;(prn v)
  ;;(prn ($@ v ($diag ($select e 1 0)) ($transpose v)))
  ;;(prn ($dist b ($@ v ($diag ($select e 1 0)) ($transpose v))))
  )
