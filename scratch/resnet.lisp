(defpackage :th.m.resnet50
  (:use #:common-lisp
        #:mu
        #:th
        #:th.image
        #:th.m.imagenet))

(in-package :th.m.resnet50)

(defparameter +model-location+ ($concat (namestring (user-homedir-pathname)) "Desktop"))

(defun read-text-weight-file (wn &optional (readp t))
  (when readp
    (let ((f (file.disk (format nil "~A/resnet50/resnet50-~A.txt" +model-location+ wn) "r"))
          (tx (tensor)))
      ($fread tx f)
      ($fclose f)
      tx)))

;; XXX need to read rms and rvs as well
(defparameter *weights*
  (list :k1 (read-text-weight-file "p0")
        :g1 (read-text-weight-file "p1")
        :b1 (read-text-weight-file "p2")
        :m1 (read-text-weight-file "m1")
        :v1 (read-text-weight-file "v1")
        :k2 (read-text-weight-file "p3")
        :g2 (read-text-weight-file "p4")
        :b2 (read-text-weight-file "p5")
        :m2 (read-text-weight-file "m2")
        :v2 (read-text-weight-file "v2")
        :k3 (read-text-weight-file "p6")
        :g3 (read-text-weight-file "p7")
        :b3 (read-text-weight-file "p8")
        :m3 (read-text-weight-file "m3")
        :v3 (read-text-weight-file "v3")
        :k4 (read-text-weight-file "p9")
        :g4 (read-text-weight-file "p10")
        :b4 (read-text-weight-file "p11")
        :m4 (read-text-weight-file "m4")
        :v4 (read-text-weight-file "v4")
        :dk1 (read-text-weight-file "p12")
        :dg1 (read-text-weight-file "p13")
        :db1 (read-text-weight-file "p14")
        :dm1 (read-text-weight-file "m5")
        :dv1 (read-text-weight-file "v5")
        :k5 (read-text-weight-file "p15")
        :g5 (read-text-weight-file "p16")
        :b5 (read-text-weight-file "p17")
        :m5 (read-text-weight-file "m6")
        :v5 (read-text-weight-file "v6")
        :k6 (read-text-weight-file "p18")
        :g6 (read-text-weight-file "p19")
        :b6 (read-text-weight-file "p20")
        :m6 (read-text-weight-file "m7")
        :v6 (read-text-weight-file "v7")
        :k7 (read-text-weight-file "p21")
        :g7 (read-text-weight-file "p22")
        :b7 (read-text-weight-file "p23")
        :m7 (read-text-weight-file "m8")
        :v7 (read-text-weight-file "v8")
        :k8 (read-text-weight-file "p24")
        :g8 (read-text-weight-file "p25")
        :b8 (read-text-weight-file "p26")
        :m8 (read-text-weight-file "m9")
        :v8 (read-text-weight-file "v9")
        :k9 (read-text-weight-file "p27")
        :g9 (read-text-weight-file "p28")
        :b9 (read-text-weight-file "p29")
        :m9 (read-text-weight-file "m10")
        :v9 (read-text-weight-file "v10")
        :k10 (read-text-weight-file "p30")
        :g10 (read-text-weight-file "p31")
        :b10 (read-text-weight-file "p32")
        :m10 (read-text-weight-file "m11")
        :v10 (read-text-weight-file "v11")
        :k11 (read-text-weight-file "p33")
        :g11 (read-text-weight-file "p34")
        :b11 (read-text-weight-file "p35")
        :m11 (read-text-weight-file "m12")
        :v11 (read-text-weight-file "v12")
        :k12 (read-text-weight-file "p36")
        :g12 (read-text-weight-file "p37")
        :b12 (read-text-weight-file "p38")
        :m12 (read-text-weight-file "m13")
        :v12 (read-text-weight-file "v13")
        :k13 (read-text-weight-file "p39")
        :g13 (read-text-weight-file "p40")
        :b13 (read-text-weight-file "p41")
        :m13 (read-text-weight-file "m14")
        :v13 (read-text-weight-file "v14")
        :dk2 (read-text-weight-file "p42")
        :dg2 (read-text-weight-file "p43")
        :db2 (read-text-weight-file "p44")
        :dm2 (read-text-weight-file "m15")
        :dv2 (read-text-weight-file "v15")
        :k14 (read-text-weight-file "p45")
        :g14 (read-text-weight-file "p46")
        :b14 (read-text-weight-file "p47")
        :m14 (read-text-weight-file "m16")
        :v14 (read-text-weight-file "v16")
        :k15 (read-text-weight-file "p48")
        :g15 (read-text-weight-file "p49")
        :b15 (read-text-weight-file "p50")
        :m15 (read-text-weight-file "m17")
        :v15 (read-text-weight-file "v17")
        :k16 (read-text-weight-file "p51")
        :g16 (read-text-weight-file "p52")
        :b16 (read-text-weight-file "p53")
        :m16 (read-text-weight-file "m18")
        :v16 (read-text-weight-file "v18")
        :k17 (read-text-weight-file "p54")
        :g17 (read-text-weight-file "p55")
        :b17 (read-text-weight-file "p56")
        :m17 (read-text-weight-file "m19")
        :v17 (read-text-weight-file "v19")
        :k18 (read-text-weight-file "p57")
        :g18 (read-text-weight-file "p58")
        :b18 (read-text-weight-file "p59")
        :m18 (read-text-weight-file "m20")
        :v18 (read-text-weight-file "v20")
        :k19 (read-text-weight-file "p60")
        :g19 (read-text-weight-file "p61")
        :b19 (read-text-weight-file "p62")
        :m19 (read-text-weight-file "m21")
        :v19 (read-text-weight-file "v21")
        :k20 (read-text-weight-file "p63")
        :g20 (read-text-weight-file "p64")
        :b20 (read-text-weight-file "p65")
        :m20 (read-text-weight-file "m22")
        :v20 (read-text-weight-file "v22")
        :k21 (read-text-weight-file "p66")
        :g21 (read-text-weight-file "p67")
        :b21 (read-text-weight-file "p68")
        :m21 (read-text-weight-file "m23")
        :v21 (read-text-weight-file "v23")
        :k22 (read-text-weight-file "p69")
        :g22 (read-text-weight-file "p70")
        :b22 (read-text-weight-file "p71")
        :m22 (read-text-weight-file "m24")
        :v22 (read-text-weight-file "v24")
        :k23 (read-text-weight-file "p72")
        :g23 (read-text-weight-file "p73")
        :b23 (read-text-weight-file "p74")
        :m23 (read-text-weight-file "m25")
        :v23 (read-text-weight-file "v25")
        :k24 (read-text-weight-file "p75")
        :g24 (read-text-weight-file "p76")
        :b24 (read-text-weight-file "p77")
        :m24 (read-text-weight-file "m26")
        :v24 (read-text-weight-file "v26")
        :k25 (read-text-weight-file "p78")
        :g25 (read-text-weight-file "p79")
        :b25 (read-text-weight-file "p80")
        :m25 (read-text-weight-file "m27")
        :v25 (read-text-weight-file "v27")
        :dk3 (read-text-weight-file "p81")
        :dg3 (read-text-weight-file "p82")
        :db3 (read-text-weight-file "p83")
        :dm3 (read-text-weight-file "m28")
        :dv3 (read-text-weight-file "v28")
        :k26 (read-text-weight-file "p84")
        :g26 (read-text-weight-file "p85")
        :b26 (read-text-weight-file "p86")
        :m26 (read-text-weight-file "m29")
        :v26 (read-text-weight-file "v29")
        :k27 (read-text-weight-file "p87")
        :g27 (read-text-weight-file "p88")
        :b27 (read-text-weight-file "p89")
        :m27 (read-text-weight-file "m30")
        :v27 (read-text-weight-file "v30")
        :k28 (read-text-weight-file "p90")
        :g28 (read-text-weight-file "p91")
        :b28 (read-text-weight-file "p92")
        :m28 (read-text-weight-file "m31")
        :v28 (read-text-weight-file "v31")
        :k29 (read-text-weight-file "p93")
        :g29 (read-text-weight-file "p94")
        :b29 (read-text-weight-file "p95")
        :m29 (read-text-weight-file "m32")
        :v29 (read-text-weight-file "v32")
        :k30 (read-text-weight-file "p96")
        :g30 (read-text-weight-file "p97")
        :b30 (read-text-weight-file "p98")
        :m30 (read-text-weight-file "m33")
        :v30 (read-text-weight-file "v33")
        :k31 (read-text-weight-file "p99")
        :g31 (read-text-weight-file "p100")
        :b31 (read-text-weight-file "p101")
        :m31 (read-text-weight-file "m34")
        :v31 (read-text-weight-file "v34")
        :k32 (read-text-weight-file "p102")
        :g32 (read-text-weight-file "p103")
        :b32 (read-text-weight-file "p104")
        :m32 (read-text-weight-file "m35")
        :v32 (read-text-weight-file "v35")
        :k33 (read-text-weight-file "p105")
        :g33 (read-text-weight-file "p106")
        :b33 (read-text-weight-file "p107")
        :m33 (read-text-weight-file "m36")
        :v33 (read-text-weight-file "v36")
        :k34 (read-text-weight-file "p108")
        :g34 (read-text-weight-file "p109")
        :b34 (read-text-weight-file "p110")
        :m34 (read-text-weight-file "m37")
        :v34 (read-text-weight-file "v37")
        :k35 (read-text-weight-file "p111")
        :g35 (read-text-weight-file "p112")
        :b35 (read-text-weight-file "p113")
        :m35 (read-text-weight-file "m38")
        :v35 (read-text-weight-file "v38")
        :k36 (read-text-weight-file "p114")
        :g36 (read-text-weight-file "p115")
        :b36 (read-text-weight-file "p116")
        :m36 (read-text-weight-file "m39")
        :v36 (read-text-weight-file "v39")
        :k37 (read-text-weight-file "p117")
        :g37 (read-text-weight-file "p118")
        :b37 (read-text-weight-file "p119")
        :m37 (read-text-weight-file "m40")
        :v37 (read-text-weight-file "v40")
        :k38 (read-text-weight-file "p120")
        :g38 (read-text-weight-file "p121")
        :b38 (read-text-weight-file "p122")
        :m38 (read-text-weight-file "m41")
        :v38 (read-text-weight-file "v41")
        :k39 (read-text-weight-file "p123")
        :g39 (read-text-weight-file "p124")
        :b39 (read-text-weight-file "p125")
        :m39 (read-text-weight-file "m42")
        :v39 (read-text-weight-file "v42")
        :k40 (read-text-weight-file "p126")
        :g40 (read-text-weight-file "p127")
        :b40 (read-text-weight-file "p128")
        :m40 (read-text-weight-file "m43")
        :v40 (read-text-weight-file "v43")
        :k41 (read-text-weight-file "p129")
        :g41 (read-text-weight-file "p130")
        :b41 (read-text-weight-file "p131")
        :m41 (read-text-weight-file "m44")
        :v41 (read-text-weight-file "v44")
        :k42 (read-text-weight-file "p132")
        :g42 (read-text-weight-file "p133")
        :b42 (read-text-weight-file "p134")
        :m42 (read-text-weight-file "m45")
        :v42 (read-text-weight-file "v45")
        :k43 (read-text-weight-file "p135")
        :g43 (read-text-weight-file "p136")
        :b43 (read-text-weight-file "p137")
        :m43 (read-text-weight-file "m46")
        :v43 (read-text-weight-file "v46")
        :dk4 (read-text-weight-file "p138")
        :dg4 (read-text-weight-file "p139")
        :db4 (read-text-weight-file "p140")
        :dm4 (read-text-weight-file "m47")
        :dv4 (read-text-weight-file "v47")
        :k44 (read-text-weight-file "p141")
        :g44 (read-text-weight-file "p142")
        :b44 (read-text-weight-file "p143")
        :m44 (read-text-weight-file "m48")
        :v44 (read-text-weight-file "v48")
        :k45 (read-text-weight-file "p144")
        :g45 (read-text-weight-file "p145")
        :b45 (read-text-weight-file "p146")
        :m45 (read-text-weight-file "m49")
        :v45 (read-text-weight-file "v49")
        :k46 (read-text-weight-file "p147")
        :g46 (read-text-weight-file "p148")
        :b46 (read-text-weight-file "p149")
        :m46 (read-text-weight-file "m50")
        :v46 (read-text-weight-file "v50")
        :k47 (read-text-weight-file "p150")
        :g47 (read-text-weight-file "p151")
        :b47 (read-text-weight-file "p152")
        :m47 (read-text-weight-file "m51")
        :v47 (read-text-weight-file "v51")
        :k48 (read-text-weight-file "p153")
        :g48 (read-text-weight-file "p154")
        :b48 (read-text-weight-file "p155")
        :m48 (read-text-weight-file "m52")
        :v48 (read-text-weight-file "v52")
        :k49 (read-text-weight-file "p156")
        :g49 (read-text-weight-file "p157")
        :b49 (read-text-weight-file "p158")
        :m49 (read-text-weight-file "m53")
        :v49 (read-text-weight-file "v53")
        :w50 (read-text-weight-file "f159")
        :b50 (read-text-weight-file "f160")))

(defun w (wn) (getf *weights* wn))

(prn (w :k39))

(defun blki (x)
  (-> x
      ($conv2d (w :k1) nil 2 2 3 3)
      ($bn (w :g1) (w :b1) (w :m1) (w :v1))
      ($relu)
      ($maxpool2d 3 3 2 2 1 1)))

(defun kw (h n) (values (intern (format nil "~A~A" (string-upcase h) n) "KEYWORD")))

(defun blkd (x n1 n2 n3 dn &optional (stride 1))
  (let ((k1 (kw "k" n1))
        (g1 (kw "g" n1))
        (b1 (kw "b" n1))
        (m1 (kw "m" n1))
        (v1 (kw "v" n1))
        (k2 (kw "k" n2))
        (g2 (kw "g" n2))
        (b2 (kw "b" n2))
        (m2 (kw "m" n2))
        (v2 (kw "v" n2))
        (k3 (kw "k" n3))
        (g3 (kw "g" n3))
        (b3 (kw "b" n3))
        (m3 (kw "m" n3))
        (v3 (kw "v" n3))
        (dk (kw "dk" dn))
        (dg (kw "dg" dn))
        (db (kw "db" dn))
        (dm (kw "dm" dn))
        (dv (kw "dv" dn)))
    (let* ((r (-> x
                  ($conv2d (w dk) nil stride stride)
                  ($bn (w dg) (w db) (w dm) (w dv))))
           (o (-> x
                  ($conv2d (w k1) nil 1 1)
                  ($bn (w g1) (w b1) (w m1) (w v1))
                  ($relu)
                  ($conv2d (w k2) nil stride stride 1 1)
                  ($bn (w g2) (w b2) (w m2) (w v2))
                  ($relu)
                  ($conv2d (w k3) nil 1 1)
                  ($bn (w g3) (w b3) (w m3) (w v3)))))
      ($relu ($+ o r)))))

(defun blk (x n1 n2 n3)
  (let ((k1 (kw "k" n1))
        (g1 (kw "g" n1))
        (b1 (kw "b" n1))
        (m1 (kw "m" n1))
        (v1 (kw "v" n1))
        (k2 (kw "k" n2))
        (g2 (kw "g" n2))
        (b2 (kw "b" n2))
        (m2 (kw "m" n2))
        (v2 (kw "v" n2))
        (k3 (kw "k" n3))
        (g3 (kw "g" n3))
        (b3 (kw "b" n3))
        (m3 (kw "m" n3))
        (v3 (kw "v" n3)))
    (let ((r x)
          (o (-> x
                 ($conv2d (w k1) nil 1 1)
                 ($bn (w g1) (w b1) (w m1) (w v1))
                 ($relu)
                 ($conv2d (w k2) nil 1 1 1 1)
                 ($bn (w g2) (w b2) (w m2) (w v2))
                 ($relu)
                 ($conv2d (w k3) nil 1 1)
                 ($bn (w g3) (w b3) (w m3) (w v3)))))
      ($relu ($+ o r)))))

;; XXX need to compare with pytorch result, layer by layer
;; especially batch normalization result
(let* ((rgb (tensor-from-jpeg-file "data/cat.vgg16.jpg" :resize-dimension '(224 224)))
       (input (imagenet-input rgb))
       (x  (if (eq 3 ($ndim input))
               (apply #'$reshape input (cons 1 ($size input)))
               input)))
  ;; (let ((f (file.disk "input.txt" "r")))
  ;;   ($fread x f)
  ;;   ($fclose f))
  ;; (prn x)
  (prn (-> x
           (blki)
           (blkd 2 3 4 1)
           (blk 5 6 7)
           (blk 8 9 10)
           (blkd 11 12 13 2 2)
           (blk 14 15 16)
           (blk 17 18 19)
           (blk 20 21 22)
           (blkd 23 24 25 3 2)
           (blk 26 27 28)
           (blk 29 30 31)
           (blk 32 33 34)
           (blk 35 36 37)
           (blk 38 39 40)
           (blkd 41 42 43 4 2)
           (blk 44 45 46)
           (blk 47 48 49)
           ($avgpool2d 7 7 1 1)
           ($reshape ($size x 0) 2048)
           ($affine (w :w50) (w :b50))
           ($max 1))))

(let ((x (tensor))
      (f (file.disk "input.txt" "r")))
  ($fread x f)
  ($fclose f)
  (prn (-> x
           ($conv2d (w :k1) nil 2 2 3 3)
           ($bn (w :g1) (w :b1) (w :m1) (w :v1))
           ($relu)
           ($maxpool2d 3 3 2 2 1 1))))

(prn (w :b1))

($avgpool2d x 7 7 1 1)
($affine x w b)
