(defpackage :th.m.resnet50
  (:use #:common-lisp
        #:mu
        #:th
        #:th.image
        #:th.m.imagenet))

(in-package :th.m.resnet50)

(defparameter +model-location+ ($concat (namestring (user-homedir-pathname)) "Desktop"))

(defun read-text-weight-file (wn &optional (readp t))
  (when readp
    (let ((f (file.disk (format nil "~A/resnet50/resnet-~A.txt" +model-location+ wn) "r"))
          (tx (tensor)))
      ($fread tx f)
      ($fclose f)
      tx)))

(defparameter *weights*
  (list :k1 (read-text-weight-file "p0")
        :g1 (read-text-weight-file "p1")
        :b1 (read-text-weight-file "p2")
        :k2 (read-text-weight-file "p3")
        :g2 (read-text-weight-file "p4")
        :b2 (read-text-weight-file "p5")
        :k3 (read-text-weight-file "p6")
        :g3 (read-text-weight-file "p7")
        :b3 (read-text-weight-file "p8")
        :k4 (read-text-weight-file "p9")
        :g4 (read-text-weight-file "p10")
        :b4 (read-text-weight-file "p11")
        :dk1 (read-text-weight-file "p12")
        :dg1 (read-text-weight-file "p13")
        :db1 (read-text-weight-file "p14")
        :k5 (read-text-weight-file "p15")
        :g5 (read-text-weight-file "p16")
        :b5 (read-text-weight-file "p17")
        :k6 (read-text-weight-file "p18")
        :g6 (read-text-weight-file "p19")
        :b6 (read-text-weight-file "p20")
        :k7 (read-text-weight-file "p21")
        :g7 (read-text-weight-file "p22")
        :b7 (read-text-weight-file "p23")
        :k8 (read-text-weight-file "p24")
        :g8 (read-text-weight-file "p25")
        :b8 (read-text-weight-file "p26")
        :k9 (read-text-weight-file "p27")
        :g9 (read-text-weight-file "p28")
        :b9 (read-text-weight-file "p29")
        :k10 (read-text-weight-file "p30")
        :g10 (read-text-weight-file "p31")
        :b10 (read-text-weight-file "p32")
        :k11 (read-text-weight-file "p33")
        :g11 (read-text-weight-file "p34")
        :b11 (read-text-weight-file "p35")
        :k12 (read-text-weight-file "p36")
        :g12 (read-text-weight-file "p37")
        :b12 (read-text-weight-file "p38")
        :k13 (read-text-weight-file "p39")
        :g13 (read-text-weight-file "p40")
        :b13 (read-text-weight-file "p41")
        :dk2 (read-text-weight-file "p42")
        :dg2 (read-text-weight-file "p43")
        :db2 (read-text-weight-file "p44")
        :k14 (read-text-weight-file "p45")
        :g14 (read-text-weight-file "p46")
        :b14 (read-text-weight-file "p47")
        :k15 (read-text-weight-file "p48")
        :g15 (read-text-weight-file "p49")
        :b15 (read-text-weight-file "p50")
        :k16 (read-text-weight-file "p51")
        :g16 (read-text-weight-file "p52")
        :b16 (read-text-weight-file "p53")
        :k17 (read-text-weight-file "p54")
        :g17 (read-text-weight-file "p55")
        :b17 (read-text-weight-file "p56")
        :k18 (read-text-weight-file "p57")
        :g18 (read-text-weight-file "p58")
        :b18 (read-text-weight-file "p59")
        :k19 (read-text-weight-file "p60")
        :g19 (read-text-weight-file "p61")
        :b19 (read-text-weight-file "p62")
        :k20 (read-text-weight-file "p63")
        :g20 (read-text-weight-file "p64")
        :b20 (read-text-weight-file "p65")
        :k21 (read-text-weight-file "p66")
        :g21 (read-text-weight-file "p67")
        :b21 (read-text-weight-file "p68")
        :k22 (read-text-weight-file "p69")
        :g22 (read-text-weight-file "p70")
        :b22 (read-text-weight-file "p71")))

(defun w (wn) (getf *weights* wn))

(prn (w :k11))

(let* ((rgb (tensor-from-png-file "data/cat.vgg16.png"))
       (x (imagenet-input rgb)))
  (prn (-> x
           (blki)
           (blkd :k2 :g2 :b2 :k3 :g3 :b3 :k4 :g4 :b4 :dk1 :dg1 :db1)
           (blk :k5 :g5 :b5 :k6 :g6 :b6 :k7 :g7 :b7)
           (blk :k8 :g8 :b8 :k9 :g9 :b9 :k10 :g10 :b10)
           (blkd :k11 :g11 :b11 :k12 :g12 :b12 :k13 :g13 :b13 :dk2 :dg2 :db2)
           (blk :k14 :g14 :b14 :k15 :g15 :b15 :k16 :g16 :b16)
           (blk :k17 :g17 :b17 :k18 :g18 :b18 :k19 :g19 :b19)
           (blk :k20 :g20 :b20 :k21 :g21 :b21 :k22 :g22 :b22))))

(defun blki (input)
  (let ((x  (if (eq 3 ($ndim input))
                (apply #'$reshape input (cons 1 ($size input)))
                input)))
    (-> x
        ($conv2d (w :k1) nil 2 2 3 3)
        ($bn (w :g1) (w :b1))
        ($relu)
        ($maxpool2d 3 3 2 2 1 1))))

(defun blkd (x k1 g1 b1 k2 g2 b2 k3 g3 b3 dk dg db)
  (let* ((r (-> x
                ($conv2d (w dk) nil 1 1)
                ($bn (w dg) (w db))))
         (o (-> x
                ($conv2d (w k1) nil 1 1)
                ($bn (w g1) (w b1))
                ($relu)
                ($conv2d (w k2) nil 1 1 1 1)
                ($bn (w g2) (w b2))
                ($relu)
                ($conv2d (w k3) nil 1 1)
                ($bn (w g3) (w b3)))))
    ($relu ($+ o r))))

(defun blk (x k1 g1 b1 k2 g2 b2 k3 g3 b3)
  (let ((r x)
        (o (-> x
               ($conv2d (w k1) nil 1 1)
               ($bn (w g1) (w b1))
               ($relu)
               ($conv2d (w k2) nil 1 1 1 1)
               ($bn (w g2) (w b2))
               ($relu)
               ($conv2d (w k3) nil 1 1)
               ($bn (w g3) (w b3)))))
    ($relu ($+ o r))))
