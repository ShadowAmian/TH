(defpackage :conv-test
  (:use #:common-lisp
        #:mu
        #:th))

(in-package :conv-test)

;; some basic test on convolution
(let ((x (rnd 100 100))
      (k (rnd 10 10)))
  (print ($size ($conv2 x k)))
  (print ($size ($conv2 x k :full))))
(let ((x (rnd 50 100 100))
      (k (rnd 50 10 10)))
  (print ($size ($conv2 x k)))
  (print ($size ($conv2 x k :full))))

;; base conv2 operation
(let* ((x ($constant  '(((10 20 30 40) (41 31 21 11) (12 22 32 42) (43 33 23 13))
                        ((40 30 20 10) (11 21 31 41) (42 32 22 12) (13 23 33 43)))))
       (k ($variable '(((1 0 1) (0 1 0) (1 0 1))
                       ((1 1 1) (0 0 0) (1 1 1))))))
  (print x)
  (print ($conv2 ($data x) ($data k)))
  (print ($sum ($conv2 ($data x) ($data k)) 0))
  (print ($conv2 x k))
  (print ($sum ($conv2 x k) 0))
  (print ($reshape ($sum ($conv2 x k) 0) 1 2 2)))

(let* ((x (tensor  '(((10 20 30 40) (41 31 21 11) (12 22 32 42) (43 33 23 13))
                     ((40 30 20 10) (11 21 31 41) (42 32 22 12) (13 23 33 43)))))
       (k (tensor '((((1 0 1) (0 1 0) (1 0 1))
                     ((1 1 1) (0 0 0) (1 1 1))))))
       (b (tensor '(1)))
       (dk (apply #'zeros ($size k)))
       (db (tensor '(1)))
       (finput (tensor))
       (dfinput (tensor))
       (out (tensor))
       (gradient (tensor))
       (dout (tensor '(((301 271) (282 313))))))
  (th::nn-spatial-convolution-mm-update-output x out k b finput dfinput
                                               ($size k 2) ($size k 3) 1 1 0 0)
  (print out)
  (th::nn-spatial-convolution-mm-update-grad-input x dout gradient k finput dfinput
                                                   ($size k 2) ($size k 3) 1 1 0 0)
  (print gradient)
  (th::nn-spatial-convolution-mm-acc-grad-parameters x dout dk db finput dfinput
                                                     ($size k 2) ($size k 3) 1 1 0 0
                                                     1)
  (print dk)
  (print db))

(let* ((x ($constant  '(((10 20 30 40) (41 31 21 11) (12 22 32 42) (43 33 23 13))
                        ((40 30 20 10) (11 21 31 41) (42 32 22 12) (13 23 33 43)))))
       (k ($variable '(((1 0 1) (0 1 0) (1 0 1))
                       ((1 1 1) (0 0 0) (1 1 1)))))
       (c ($sum ($conv2 x k) 0))
       (g (tensor '((300 270) (281 311)))))
  (print c)
  ($bp! c g)
  (print ($gradient k)))

(let* ((x (tensor  '(((10 20 30 40) (41 31 21 11) (12 22 32 42) (43 33 23 13))
                     ((40 30 20 10) (11 21 31 41) (42 32 22 12) (13 23 33 43)))))
       (k (tensor '((((1 0 1) (0 1 0) (1 0 1))
                     ((1 1 1) (0 0 0) (1 1 1))))))
       (b (tensor '(1)))
       (finput (tensor))
       (dfinput (tensor))
       (c (tensor))
       (g (tensor '(((1 1) (1 1)))))
       (dx (tensor))
       (dk (apply #'zeros ($size k)))
       (db (tensor '(0))))
  (th::nn-spatial-convolution-mm-update-output x c k b finput dfinput
                                               ($size k 2) ($size k 3) 1 1 0 0)
  (print c)
  (th::nn-spatial-convolution-mm-update-grad-input x g dx k finput dfinput
                                                   ($size k 2) ($size k 3) 1 1 0 0)
  (print dx)
  (th::nn-spatial-convolution-mm-acc-grad-parameters x g dk db finput dfinput
                                                     ($size k 2) ($size k 3) 1 1 0 0
                                                     1)
  (print ($reshape dk 2 3 3))
  (print db))

(let* ((x (tensor  '(((10 20 30 40) (41 31 21 11) (12 22 32 42) (43 33 23 13))
                     ((40 30 20 10) (11 21 31 41) (42 32 22 12) (13 23 33 43)))))
       (k (tensor '((((1 0 1) (0 1 0) (1 0 1))
                     ((1 1 1) (0 0 0) (1 1 1))))))
       (b (tensor '(1))))
  (print ($conv2d x k b)))

(let* ((x (tensor  '((((10 20 30 40) (41 31 21 11) (12 22 32 42) (43 33 23 13))
                      ((40 30 20 10) (11 21 31 41) (42 32 22 12) (13 23 33 43)))
                     (((10 20 30 40) (41 31 21 11) (12 22 32 42) (43 33 23 13))
                      ((40 30 20 10) (11 21 31 41) (42 32 22 12) (13 23 33 43))))))
       (k (tensor '((((1 0 1) (0 1 0) (1 0 1))
                     ((1 1 1) (0 0 0) (1 1 1)))
                    (((1 0 1) (0 1 0) (1 0 1))
                     ((1 1 1) (0 0 0) (1 1 1))))))
       (b (tensor '(1 1))))
  (print ($conv2d x k b)))

(let* ((x ($constant '(((10 20 30 40) (41 31 21 11) (12 22 32 42) (43 33 23 13))
                       ((40 30 20 10) (11 21 31 41) (42 32 22 12) (13 23 33 43)))))
       (k ($variable '((((1 0 1) (0 1 0) (1 0 1))
                        ((1 1 1) (0 0 0) (1 1 1))))))
       (b ($variable '(1)))
       (o ($conv2d x k b))
       (g (tensor '(((1 1) (1 1))))))
  (print o)
  ($bp! o g)
  (print ($reshape ($gradient k) 2 3 3))
  (print ($gradient b))
  ($gd! o 0.01)
  (print k)
  (print ($reshape k 2 3 3))
  (print b)
  (print ($conv2d x k b)))

(let* ((x (tensor  '(((10 20 30 40 50)
                      (51 41 31 21 11)
                      (12 22 32 42 52)
                      (53 43 33 23 13)
                      (14 24 34 44 54))
                     ((10 20 30 40 50)
                      (51 41 31 21 11)
                      (12 22 32 42 52)
                      (53 43 33 23 13)
                      (14 24 34 44 54)))))
       (k (tensor '((((1 0 1) (0 1 0) (1 0 1))
                     ((1 1 1) (0 0 0) (1 1 1))))))
       (b (tensor '(1)))
       (c ($conv2d x k b))
       (p ($empty x))
       (indices (tensor.long))
       (g (tensor '(((1 1) (1 1)))))
       (dp ($empty p)))
  (th::nn-spatial-max-pooling-update-output c p indices 2 2 1 1 0 0 nil)
  (print p)
  (th::nn-spatial-max-pooling-update-grad-input c g dp indices 2 2 1 1 0 0 nil)
  (print dp))

(let* ((x (tensor  '(((10 20 30 40 50)
                      (51 41 31 21 11)
                      (12 22 32 42 52)
                      (53 43 33 23 13)
                      (14 24 34 44 54))
                     ((10 20 30 40 50)
                      (51 41 31 21 11)
                      (12 22 32 42 52)
                      (53 43 33 23 13)
                      (14 24 34 44 54)))))
       (k (tensor '((((1 0 1) (0 1 0) (1 0 1))
                     ((1 1 1) (0 0 0) (1 1 1))))))
       (b (tensor '(1)))
       (c ($conv2d x k b))
       (p ($maxpool2d c 2 2)))
  (print p))

(let* ((x ($constant '(((10 20 30 40 50)
                        (51 41 31 21 11)
                        (12 22 32 42 52)
                        (53 43 33 23 13)
                        (14 24 34 44 54))
                       ((10 20 30 40 50)
                        (51 41 31 21 11)
                        (12 22 32 42 52)
                        (53 43 33 23 13)
                        (14 24 34 44 54)))))
       (k ($variable '((((1 0 1) (0 1 0) (1 0 1))
                        ((1 1 1) (0 0 0) (1 1 1))))))
       (b ($variable '(1)))
       (c ($conv2d x k b))
       (p ($maxpool2d c 2 2))
       (g (tensor '(((1 1) (1 1))))))
  (print c)
  (print p)
  ($bp! p g)
  (print ($gradient c))
  (print ($gradient k)))

(let* ((x (tensor  '(((10 20 30 40 50)
                      (51 41 31 21 11)
                      (12 22 32 42 52)
                      (53 43 33 23 13)
                      (14 24 34 44 54))
                     ((10 20 30 40 50)
                      (51 41 31 21 11)
                      (12 22 32 42 52)
                      (53 43 33 23 13)
                      (14 24 34 44 54)))))
       (k (tensor '((((1 0 1) (0 1 0) (1 0 1))
                     ((1 1 1) (0 0 0) (1 1 1))))))
       (b (tensor '(1)))
       (c ($conv2d x k b))
       (p ($empty x))
       (g (tensor '(((1 1) (1 1)))))
       (dp ($empty p)))
  (th::nn-spatial-average-pooling-update-output c p 2 2 1 1 0 0 nil t)
  (print p)
  (th::nn-spatial-average-pooling-update-grad-input c g dp 2 2 1 1 0 0 nil t)
  (print dp))

(let* ((x ($constant '(((10 20 30 40 50)
                        (51 41 31 21 11)
                        (12 22 32 42 52)
                        (53 43 33 23 13)
                        (14 24 34 44 54))
                       ((10 20 30 40 50)
                        (51 41 31 21 11)
                        (12 22 32 42 52)
                        (53 43 33 23 13)
                        (14 24 34 44 54)))))
       (k ($variable '((((1 0 1) (0 1 0) (1 0 1))
                        ((1 1 1) (0 0 0) (1 1 1))))))
       (b ($variable '(1)))
       (c ($conv2d x k b))
       (p ($avgpool2d c 2 2))
       (g (tensor '(((1 1) (1 1))))))
  (print p)
  ($bp! p g)
  (print ($gradient c))
  (print ($gradient k)))

;; compare 2 implementations - one from th and the other from thnn
(let* ((x (tensor '((1 2 3 4)
                    (2 3 4 1)
                    (2 4 1 2)
                    (4 1 2 3))))
       (k (tensor '((1 1)
                    (1 1))))
       (c ($conv2 x k))
       (g (tensor '((1 1 1)
                    (1 1 1)
                    (1 1 1)))))
  (print c)
  (print ($conv2 x g))
  (print ($xcorr2 g k :full))
  (print ($add k ($mul ($conv2 x g) -0.01))))

(let* ((x ($variable '(((1 2 3 4)
                        (2 3 4 1)
                        (2 4 1 2)
                        (4 1 2 3)))))
       (k ($variable '((((1 1)
                         (1 1))))))
       (c ($conv2d x k))
       (g (tensor '(((1 1 1)
                     (1 1 1)
                     (1 1 1))))))
  (print c)
  ($bp! c g)
  (print ($gradient k))
  (print ($gradient x))
  ($gd! c 0.01)
  (print k))

(let* ((x ($variable '((1 2 3 4)
                       (2 3 4 1)
                       (2 4 1 2)
                       (4 1 2 3))))
       (k ($variable '((1 1)
                       (1 1))))
       (c ($conv2 x k))
       (g (tensor '((1 1 1)
                    (1 1 1)
                    (1 1 1)))))
  (print c)
  ($bp! c g)
  (print ($gradient k))
  (print ($gradient x))
  ($gd! c 0.01)
  (print k))

;; conv2, xcorr2 test - every print should be 0.0
(let* ((x (tensor '((1 2 3 4) (2 3 4 5) (3 4 5 6) (4 5 6 7))))
       (k (tensor '((1 2 3) (4 5 6) (7 8 9))))
       (ki ($clone k))
       (ks ($storage k))
       (kis ($storage ki)))
  (loop :for i :from (1- ($count ks)) :downto 0
        :do (setf ($ kis (- ($count ks) i 1)) ($ ks i)))
  (let ((imvc ($conv2 x k))
        (imvc2 ($conv2 x k :valid))
        (imfc ($conv2 x k :full))
        (imvx ($xcorr2 x ki))
        (imvx2 ($xcorr2 x ki :valid))
        (imfx ($xcorr2 x ki :full)))
    (print ($sum ($sub imvc imvc2)))
    (print ($sum ($sub imvc imvx)))
    (print ($sum ($sub imvc imvx2)))
    (print ($sum ($sub imfc imfx)))
    (print (- ($dot x x) ($ ($xcorr2 x x) 0 0)))
    (let ((xx (tensor 2 ($size x 0) ($size x 1)))
          (kk (tensor 2 ($size k 0) ($size k 1))))
      ($copy! ($ xx 0) x)
      ($copy! ($ xx 1) x)
      ($copy! ($ kk 0) k)
      ($copy! ($ kk 1) k)
      (let ((immvc ($conv2 xx kk))
            (immvc2 ($conv2 xx kk :valid))
            (immfc ($conv2 xx kk :full)))
        (print ($sum ($sub ($ immvc 0) ($ immvc 1))))
        (print ($sum ($sub ($ immvc 0) imvc)))
        (print ($sum ($sub ($ immvc2 0) imvc2)))
        (print ($sum ($sub ($ immfc 0) ($ immfc 1))))
        (print ($sum ($sub ($ immfc 0) imfc)))))))

;; conv3, xcorr3 test - should be 0.0 as well
(let* ((x (tensor '(((1 2 3 4) (2 3 4 5) (3 4 5 6) (4 5 6 7))
                    ((9 8 7 6) (8 7 6 5) (7 6 5 4) (6 5 4 3)))))
       (k (tensor '(((1 2 3) (2 3 4) (3 4 5))
                    ((9 8 7) (8 7 6) (7 6 5)))))
       (ki ($clone k))
       (ks ($storage k))
       (kis ($storage ki)))
  (loop :for i :from (1- ($count ks)) :downto 0
        :do (setf ($ kis (- ($count ks) i 1)) ($ ks i)))
  (let ((imvc ($conv3 x k))
        (imvc2 ($conv3 x k :valid))
        (imfc ($conv3 x k :full))
        (imvx ($xcorr3 x ki))
        (imvx2 ($xcorr3 x ki :valid))
        (imfx ($xcorr3 x ki :full)))
    (print ($sum ($sub imvc imvc2)))
    (print ($sum ($sub imvc imvx)))
    (print ($sum ($sub imvc imvx2)))
    (print ($sum ($sub imfc imfx)))
    (print (- ($dot x x) ($ ($xcorr3 x x) 0 0 0)))
    (let ((xx (tensor 2 ($size x 0) ($size x 1) ($size x 2)))
          (kk (tensor 2 ($size k 0) ($size k 1) ($size k 2))))
      ($copy! ($ xx 0) x)
      ($copy! ($ xx 1) x)
      ($copy! ($ kk 0) k)
      ($copy! ($ kk 1) k)
      (let ((immvc ($conv3 xx kk))
            (immvc2 ($conv3 xx kk :valid))
            (immfc ($conv3 xx kk :full)))
        (print ($sum ($sub ($ immvc 0) ($ immvc 1))))
        (print ($sum ($sub ($ immvc 0) imvc)))
        (print ($sum ($sub ($ immvc2 0) imvc2)))
        (print ($sum ($sub ($ immfc 0) ($ immfc 1))))
        (print ($sum ($sub ($ immfc 0) imfc)))))))

;; xcorr3 and xcorr2, valid
(let* ((x (tensor '(((1 2 3 4) (2 3 4 5) (3 4 5 6) (4 5 6 7))
                    ((9 8 7 6) (8 7 6 5) (7 6 5 4) (6 5 4 3)))))
       (k (tensor '(((1 2 3) (2 3 4) (3 4 5))
                    ((9 8 7) (8 7 6) (7 6 5)))))
       (o3 ($xcorr3 x k))
       (o32 ($zero o3)))
  (loop :for i :from 0 :below ($size o3 0)
        :do (loop :for j :from 0 :below ($size k 0)
                  :do ($add! ($ o32 i) ($xcorr2 ($ x (+ i j)) ($ k j)))))
  (print ($sum ($sub o3 o32))))

;; xcorr3 and xcorr2, full
(let* ((x (tensor '(((1 2 3 4) (2 3 4 5) (3 4 5 6) (4 5 6 7))
                    ((9 8 7 6) (8 7 6 5) (7 6 5 4) (6 5 4 3)))))
       (k (tensor '(((1 2 3) (2 3 4) (3 4 5))
                    ((9 8 7) (8 7 6) (7 6 5)))))
       (o3 ($xcorr3 x k :full))
       (o32 ($zero o3)))
  (loop :for i :from 0 :below ($size x 0)
        :do (loop :for j :from 0 :below ($size k 0)
                  :do ($add! ($ o32 (+ i j)) ($xcorr2 ($ x i) ($ k (- ($size k 0) j 1)) :full))))
  (print ($sum ($sub o3 o32))))

;; conv3 and conv2, valid
(let* ((x (tensor '(((1 2 3 4) (2 3 4 5) (3 4 5 6) (4 5 6 7))
                    ((9 8 7 6) (8 7 6 5) (7 6 5 4) (6 5 4 3)))))
       (k (tensor '(((1 2 3) (2 3 4) (3 4 5))
                    ((9 8 7) (8 7 6) (7 6 5)))))
       (o3 ($conv3 x k))
       (o32 ($zero o3)))
  (loop :for i :from 0 :below ($size o3 0)
        :do (loop :for j :from 0 :below ($size k 0)
                  :do ($add! ($ o32 i) ($conv2 ($ x (+ i j)) ($ k (- ($size k 0) j 1))))))
  (print ($sum ($sub o3 o32))))

;; conv3 and conv2, full
(let* ((x (tensor '(((1 2 3 4) (2 3 4 5) (3 4 5 6) (4 5 6 7))
                    ((9 8 7 6) (8 7 6 5) (7 6 5 4) (6 5 4 3)))))
       (k (tensor '(((1 2 3) (2 3 4) (3 4 5))
                    ((9 8 7) (8 7 6) (7 6 5)))))
       (o3 ($conv3 x k :full))
       (o32 ($zero o3)))
  (loop :for i :from 0 :below ($size x 0)
        :do (loop :for j :from 0 :below ($size k 0)
                  :do ($add! ($ o32 (+ i j)) ($conv2 ($ x i) ($ k j) :full))))
  (print ($sum ($sub o3 o32))))
