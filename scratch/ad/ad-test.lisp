(defpackage :th.ad-test
  (:use #:common-lisp
        #:mu
        #:th))

(in-package :th.ad-test)

(let* ((a ($constant (tensor '(5 5 5))))
       (c ($variable 5))
       (out ($broadcast c a)))
  ($gs! out)
  (unless ($eq ($data out) ($data a))
    (error "out should be the same one as a"))
  (unless (= 3 ($gradient c))
    (error "should be 3")))

(let* ((a ($constant (tensor '(1 0 -3.21))))
       (b ($constant (tensor '(-1.3 2.8 -0.1)))))
  (unless (< (abs (- 11.3041 ($data ($dot a a)))) 0.0001)
    (error "invalid dot a and a"))
  (unless (< (abs (- -0.979 ($data ($dot a b)))) 0.01)
    (error "invalid dot a and b"))
  (unless ($eq ($data ($add a b)) (tensor '(-0.3 2.8 -3.31)))
    (error "invalid add a b"))
  (unless ($eq ($data ($sub a b)) (tensor '(2.3 -2.8 -3.11)))
    (error "invalid sub a b"))
  (unless ($eq ($data ($mul a b)) (tensor '(-1.3 0.0 0.321)))
    (error "invalid mul a b"))
  (unless ($eq ($data ($mv ($constant (tensor '((1 0 0) (0 2 0) (0 0 3)))) a))
               (tensor '(1.0 0.0 -9.63)))
    (error "invalid mm"))
  (unless ($eq ($data ($sigmoid a)) (tensor '(0.73 0.50 0.04)))
    (error "invalid sigmoid"))
  (unless ($eq ($data ($log ($constant (tensor '(0.2 0.9 3.21)))))
               (tensor '(-1.6094379124341003
                         -0.10536051565782628
                         1.1662709371419244)))
    (error "invalid log"))
  (unless (= ($data ($bce ($constant (tensor '((0.1 0.5 0.9))))
                          ($constant (tensor '((0 0 1))))))
             0.3012894)
    (error "invalid bce")))

(let* ((m ($variable (tensor '((2 0) (0 2)))))
       (v ($constant (tensor '(2 3))))
       (out ($mv m v)))
  ($gs! out)
  (unless ($eq ($gradient m)
               (tensor '((2.0 2.0) (3.0 3.0))))
    (prn ($gradient m))
    (error "mv")))

(let* ((A (tensor '((1 1 1) (1 1 1))))
       (B (tensor '((0.1) (0.1) (0.1))))
       (delta (tensor '((1.0) (1.0))))
       (out ($sigmoid ($mm ($variable A) ($variable B))))
       (gradient ($bp! out delta)))
  (unless ($eq (-> gradient ($children) ($first) ($gradient))
               (tensor '((2.4445831169074586)
                         (2.4445831169074586))))
    (error "mm")))

(let* ((x ($variable '((1 2 3) (4 5 6) (7 8 9))))
       (y ($constant 40))
       (out ($sum x))
       (delta ($sub out y))
       (loss ($dot delta delta)))
  (print out)
  (print loss)
  ($bp! loss 1)
  (print ($gradient x))
  ($gd! loss 0.01)
  (print x)
  (print ($sum x))
  (loop :for i :from 1 :to 50
        :for y* = ($sum x)
        :for d = ($sub y* y)
        :for l = ($dot d d)
        :do (progn
              ($bp! l)
              ($gd! l 0.01)))
  (print x)
  (print ($sum x)))

(let* ((x ($variable '((1 2 3) (4 5 6) (7 8 9))))
       (y ($constant 6))
       (out ($mean x)))
  (print out)
  (loop :for i :from 1 :to 50
        :for y* = ($mean x)
        :for d = ($sub y* y)
        :for l = ($dot d d)
        :do (progn
              ($bp! l)
              ($gd! l 0.9)))
  (print x)
  (print ($mean x)))

(let* ((x ($variable '((1 2) (3 4) (5 6))))
       (y ($constant 5))
       (out ($max x)))
  (print out)
  (loop :for i :from 1 :to 50
        :for y* = ($max x)
        :for d = ($sub y* y)
        :for l = ($dot d d)
        :do (progn
              ($bp! l)
              ($gd! l 0.1)))
  (print x)
  (print ($max x)))

(let* ((x ($variable '((1 2) (3 4) (5 6))))
       (y ($constant 5))
       (out ($min x)))
  (print out)
  (loop :for i :from 1 :to 50
        :for y* = ($min x)
        :for d = ($sub y* y)
        :for l = ($dot d d)
        :do (progn
              ($bp! l)
              ($gd! l 0.5)))
  (print x)
  (print ($min x)))

(let* ((x ($variable '((1 2) (3 4))))
       (a ($constant '(1 2 3 4)))
       (y ($constant 20))
       (out ($dot ($reshape x 1 4) a))
       (delta ($sub out y))
       (loss ($dot delta delta)))
  (print out)
  (print loss)
  ($bp! loss)
  (print ($gradient x))
  ($gd! loss)
  (print x)
  (print ($dot ($reshape x 1 4) a))
  (loop :for i :from 1 :to 10
        :for y* = ($dot ($reshape x 1 4) a)
        :for d = ($sub y* y)
        :for l = ($dot d d)
        :do (progn
              ($bp! l)
              ($gd! l 0.01)))
  (print x)
  (print ($dot ($reshape x 1 4) a)))

(let* ((x ($variable '((1 2) (3 4))))
       (a ($constant '(1 2 3 4)))
       (y ($constant 20))
       (out ($dot ($reshape ($transpose x) 1 4) a))
       (delta ($sub out y))
       (loss ($dot delta delta)))
  (print out)
  (print loss)
  ($bp! loss)
  (print ($gradient x))
  ($gd! loss)
  (print x)
  (print ($dot ($reshape ($transpose x) 1 4) a))
  (loop :for i :from 1 :to 10
        :for y* = ($dot ($reshape ($transpose x) 1 4) a)
        :for d = ($sub y* y)
        :for l = ($dot d d)
        :do (progn
              ($bp! l)
              ($gd! l 0.01)))
  (print x)
  (print ($dot ($reshape ($transpose x) 1 4) a)))
