(defpackage :rnn-manual-check
  (:use #:common-lisp
        #:mu
        #:th))

(in-package :rnn-manual-check)

;; following code is for checking manually computed simple recurrent neural network
;; both forward and backward propagation through time

;; before
(let* ((w 0.5)
       (v 1)
       (u 1)
       (x 1)
       (ps 0)
       (a (* ps w))
       (b (* v x))
       (z (+ a b))
       (s z)
       (p (* u s))
       (y 1)
       (d (- y p))
       (l (* d d))
       (sl l))
  (prn "L1:" sl l p)
  (let* ((x 1)
         (ps s)
         (a (* ps w))
         (b (* v x))
         (z (+ a b))
         (s z)
         (p (* u s))
         (y 2)
         (d (- y p))
         (pl l)
         (l (* d d))
         (sl (+ pl l)))
    (prn "L2:" sl l p)
    (let* ((x 1)
           (ps s)
           (a (* ps w))
           (b (* v x))
           (z (+ a b))
           (s z)
           (p (* u s))
           (y 3)
           (d (- y p))
           (pl sl)
           (l (* d d))
           (sl (+ pl l)))
      (prn "L3:" sl l p))))

;; after one iteration
(let* ((w 0.6025)
       (v 1.1)
       (u 1.1)
       (x 1)
       (ps 0)
       (a (* ps w))
       (b (* v x))
       (z (+ a b))
       (s z)
       (p (* u s))
       (y 1)
       (d (- y p))
       (l (* d d))
       (sl l))
  (prn "L1:" sl l p)
  (let* ((x 1)
         (ps s)
         (a (* ps w))
         (b (* v x))
         (z (+ a b))
         (s z)
         (p (* u s))
         (y 2)
         (d (- y p))
         (pl l)
         (l (* d d))
         (sl (+ pl l)))
    (prn "L2:" sl l p)
    (let* ((x 1)
           (ps s)
           (a (* ps w))
           (b (* v x))
           (z (+ a b))
           (s z)
           (p (* u s))
           (y 3)
           (d (- y p))
           (pl sl)
           (l (* d d))
           (sl (+ pl l)))
      (prn "L3:" sl l p))))
