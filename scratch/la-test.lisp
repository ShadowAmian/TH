(defpackage :la-test
  (:use #:common-lisp
        #:mu
        #:th))

(in-package :la-test)

;; cholesky
(let* ((x (rnd 10 10))
       (a ($mm x ($transpose x))))
  (let* ((c ($potrf a))
         (b ($mm ($transpose c) c)))
    (print ($sum ($sub a b))))
  (let* ((u ($potrf a t))
         (b ($mm ($transpose u) u)))
    (print ($sum ($sub a b))))
  (let* ((l ($potrf a nil))
         (b ($mm l ($transpose l))))
    (print ($sum ($sub a b)))))

(let ((a (-> (tensor '((6.80 -2.11  5.66  5.97  8.23)
                       (-6.05 -3.30  5.36 -4.44  1.08)
                       (-0.45  2.58 -2.70  0.27  9.04)
                       (8.32  2.71  4.35  -7.17  2.14)
                       (-9.67 -5.14 -7.26  6.08 -6.87)))
             ($transpose)))
      (b (-> (tensor '((4.02  6.19 -8.22 -7.57 -3.03)
                       (-1.56  4.00 -8.67  1.75  2.86)
                       (9.81 -4.09 -4.57 -8.61  8.99)))
             ($transpose))))
  ;; ensure a is positive symmetric definite
  (setf a ($mm a ($transpose a)))
  (let* ((u ($potrf a))
         (x ($potrs b u)))
    (print ($sum ($sub b ($mm a x)))))
  (let* ((l ($potrf a nil))
         (x ($potrs b l nil)))
    (print ($sum ($sub b ($mm a x))))))

(let ((a (-> (tensor '((6.80 -2.11  5.66  5.97  8.23)
                       (-6.05 -3.30  5.36 -4.44  1.08)
                       (-0.45  2.58 -2.70  0.27  9.04)
                       (8.32  2.71  4.35  -7.17  2.14)
                       (-9.67 -5.14 -7.26  6.08 -6.87)))
             ($transpose))))
  (setf a ($mm a ($transpose a)))
  (let* ((inv0 ($inverse a))
         (chol ($potrf a))
         (inv1 ($potri chol)))
    (print ($sum ($sub inv0 inv1))))
  (let* ((inv0 ($inverse a))
         (chol ($potrf a nil))
         (inv1 ($potri chol nil)))
    (print ($sum ($sub inv0 inv1)))))
